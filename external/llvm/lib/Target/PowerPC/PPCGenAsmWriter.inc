//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2659U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2652U,	// BUNDLE
    268436050U,	// ADD4
    268436050U,	// ADD8
    268435990U,	// ADDC
    268435990U,	// ADDC8
    268436156U,	// ADDE
    268436156U,	// ADDE8
    268452837U,	// ADDI
    268452837U,	// ADDI8
    268452394U,	// ADDIC
    268452394U,	// ADDIC8
    268451886U,	// ADDICo
    268470015U,	// ADDIS
    268470015U,	// ADDIS8
    268567241U,	// ADDME
    268567241U,	// ADDME8
    268567256U,	// ADDZE
    268567256U,	// ADDZE8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    268436115U,	// AND
    268436115U,	// AND8
    268435997U,	// ANDC
    268435997U,	// ANDC8
    268484754U,	// ANDISo
    268484754U,	// ANDISo8
    268484695U,	// ANDIo
    268484695U,	// ANDIo8
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    536871226U,	// B
    823134829U,	// BCC
    2698U,	// BCTR
    2698U,	// BCTR8
    2683U,	// BCTRL8_Darwin
    2683U,	// BCTRL8_ELF
    2683U,	// BCTRL_Darwin
    2683U,	// BCTRL_SVR4
    301990965U,	// BL8_Darwin
    301990965U,	// BL8_ELF
    318768181U,	// BL8_NOP_ELF
    1107296556U,	// BLA8_Darwin
    1107296556U,	// BLA8_ELF
    1124073772U,	// BLA8_NOP_ELF
    1107296556U,	// BLA_Darwin
    1107296556U,	// BLA_SVR4
    872417901U,	// BLR
    301990965U,	// BL_Darwin
    301990965U,	// BL_SVR4
    268436126U,	// CMPD
    268452851U,	// CMPDI
    268436102U,	// CMPLD
    268485611U,	// CMPLDI
    268437626U,	// CMPLW
    268485670U,	// CMPLWI
    268437645U,	// CMPW
    268452910U,	// CMPWI
    268567220U,	// CNTLZD
    268568861U,	// CNTLZW
    268437582U,	// CREQV
    268436973U,	// CROR
    270534734U,	// CRSET
    270534136U,	// CRUNSET
    1342177569U,	// DCBA
    1342178023U,	// DCBF
    1342178264U,	// DCBI
    1342179255U,	// DCBST
    1342179242U,	// DCBT
    1342179267U,	// DCBTST
    1342179867U,	// DCBZ
    1342178413U,	// DCBZL
    268436142U,	// DIVD
    268437510U,	// DIVDU
    268437783U,	// DIVW
    268437551U,	// DIVWU
    1610614553U,	// DSS
    2676U,	// DSSALL
    1879050174U,	// DST
    1879050174U,	// DST64
    1879050187U,	// DSTST
    1879050187U,	// DSTST64
    1879050200U,	// DSTSTT
    1879050200U,	// DSTSTT64
    1879050194U,	// DSTT
    1879050194U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    268437584U,	// EQV
    268437584U,	// EQV8
    268566951U,	// EXTSB
    268566951U,	// EXTSB8
    268567422U,	// EXTSH
    268567422U,	// EXTSH8
    268568765U,	// EXTSW
    268568765U,	// EXTSW_32
    268568765U,	// EXTSW_32_64
    268568096U,	// FABSD
    268568096U,	// FABSS
    268436049U,	// FADD
    268437117U,	// FADDS
    268436049U,	// FADDrtz
    268567160U,	// FCFID
    268437523U,	// FCMPUD
    268437523U,	// FCMPUS
    268569126U,	// FCTIDZ
    268569146U,	// FCTIWZ
    268437576U,	// FDIV
    268437340U,	// FDIVS
    268444247U,	// FMADD
    268445316U,	// FMADDS
    268568034U,	// FMR
    268444149U,	// FMSUB
    268445292U,	// FMSUBS
    268436570U,	// FMUL
    268437266U,	// FMULS
    268568102U,	// FNABSD
    268568102U,	// FNABSS
    268567303U,	// FNEGD
    268567303U,	// FNEGS
    268444254U,	// FNMADD
    268445324U,	// FNMADDS
    268444156U,	// FNMSUB
    268445300U,	// FNMSUBS
    268567973U,	// FRSP
    268444744U,	// FSELD
    268444744U,	// FSELS
    268568496U,	// FSQRT
    268568368U,	// FSQRTS
    268435951U,	// FSUB
    268437093U,	// FSUBS
    271843629U,	// LA
    272632353U,	// LBZ
    272632353U,	// LBZ8
    273680438U,	// LBZU
    273680438U,	// LBZU8
    274729481U,	// LBZX
    274729481U,	// LBZX8
    275776130U,	// LD
    274729356U,	// LDARX
    276826107U,	// LDU
    274729299U,	// LDX
    352324167U,	// LDinto_toc
    0U,	// LDtoc
    2640U,	// LDtoc_restore
    272630374U,	// LFD
    273678950U,	// LFDU
    274729286U,	// LFDX
    272631451U,	// LFS
    273680027U,	// LFSU
    274729407U,	// LFSX
    272630055U,	// LHA
    272630055U,	// LHA8
    273680352U,	// LHAU
    271976416U,	// LHAU8
    274729253U,	// LHAX
    274729253U,	// LHAX8
    274729370U,	// LHBRX
    272632366U,	// LHZ
    272632366U,	// LHZ8
    273680444U,	// LHZU
    273680444U,	// LHZU8
    274729487U,	// LHZX
    274729487U,	// LHZX8
    277873661U,	// LI
    277873661U,	// LI8
    278923014U,	// LIS
    278923014U,	// LIS8
    274729265U,	// LVEBX
    274729310U,	// LVEHX
    274729452U,	// LVEWX
    274728020U,	// LVSL
    274728460U,	// LVSR
    274729441U,	// LVX
    274728032U,	// LVXL
    275775793U,	// LWA
    274729363U,	// LWARX
    274729259U,	// LWAX
    274729385U,	// LWBRX
    272632386U,	// LWZ
    272632386U,	// LWZ8
    273680450U,	// LWZU
    273680450U,	// LWZU8
    274729493U,	// LWZX
    274729493U,	// LWZX8
    268567283U,	// MCRF
    301991352U,	// MFCR
    301991352U,	// MFCR8
    0U,	// MFCR8pseud
    0U,	// MFCRpseud
    301991442U,	// MFCTR
    301991442U,	// MFCTR8
    301991573U,	// MFFS
    301991382U,	// MFLR
    301991382U,	// MFLR8
    279971256U,	// MFOCRF
    369100293U,	// MFVRSAVE
    301991366U,	// MFVSCR
    2147484409U,	// MTCRF
    2147484409U,	// MTCRF8
    301991449U,	// MTCTR
    301991449U,	// MTCTR8
    2415919307U,	// MTFSB0
    2415919315U,	// MTFSB1
    2801795840U,	// MTFSF
    301991388U,	// MTLR
    301991388U,	// MTLR8
    301989889U,	// MTVRSAVE
    301991374U,	// MTVSCR
    268436081U,	// MULHD
    268437491U,	// MULHDU
    268437604U,	// MULHW
    268437537U,	// MULHWU
    268436095U,	// MULLD
    268452858U,	// MULLI
    268437619U,	// MULLW
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    268436114U,	// NAND
    268436114U,	// NAND8
    268567304U,	// NEG
    268567304U,	// NEG8
    2694U,	// NOP
    268436968U,	// NOR
    268436968U,	// NOR8
    268436969U,	// OR
    268436969U,	// OR4To8
    268436969U,	// OR8
    268436969U,	// OR8To4
    268436025U,	// ORC
    268436025U,	// ORC8
    268485658U,	// ORI
    268485658U,	// ORI8
    268486412U,	// ORIS
    268486412U,	// ORIS8
    0U,	// RESTORE_CR
    268444729U,	// RLDCL
    268510272U,	// RLDICL
    268510654U,	// RLDICR
    281543681U,	// RLDIMI
    281674761U,	// RLWIMI
    268526802U,	// RLWINM
    268526802U,	// RLWINM8
    268525662U,	// RLWINMo
    268444890U,	// RLWNM
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_VRRC
    268436109U,	// SLD
    268437640U,	// SLW
    0U,	// SPILL_CR
    268436043U,	// SRAD
    268501982U,	// SRADI
    268437590U,	// SRAW
    268518431U,	// SRAWI
    268436132U,	// SRD
    268437652U,	// SRW
    272630206U,	// STB
    272630206U,	// STB8
    2818574310U,	// STBU
    2818574310U,	// STBU8
    274729280U,	// STBX
    274729280U,	// STBX8
    275776169U,	// STD
    274727099U,	// STDCX
    2835351552U,	// STDU
    274729420U,	// STDUX
    274729304U,	// STDX
    274729304U,	// STDX_32
    275776169U,	// STD_32
    272630379U,	// STFD
    2818574316U,	// STFDU
    274729292U,	// STFDX
    274729467U,	// STFIWX
    272631456U,	// STFS
    2818574362U,	// STFSU
    274729413U,	// STFSX
    272630677U,	// STH
    272630677U,	// STH8
    274729377U,	// STHBRX
    2818574349U,	// STHU
    2818574349U,	// STHU8
    274729325U,	// STHX
    274729325U,	// STHX8
    274729272U,	// STVEBX
    274729317U,	// STVEHX
    274729459U,	// STVEWX
    274729446U,	// STVX
    274728038U,	// STVXL
    272632020U,	// STW
    272632020U,	// STW8
    274729392U,	// STWBRX
    274727107U,	// STWCX
    2818574377U,	// STWU
    268437978U,	// STWUX
    274729475U,	// STWX
    274729475U,	// STWX8
    268436205U,	// SUBF
    268436205U,	// SUBF8
    268436003U,	// SUBFC
    268436003U,	// SUBFC8
    268436162U,	// SUBFE
    268436162U,	// SUBFE8
    268452401U,	// SUBFIC
    268452401U,	// SUBFIC8
    268567248U,	// SUBFME
    268567248U,	// SUBFME8
    268567263U,	// SUBFZE
    268567263U,	// SUBFZE8
    2671U,	// SYNC
    301990202U,	// TAILB
    301990202U,	// TAILB8
    1107296547U,	// TAILBA
    1107296547U,	// TAILBA8
    2698U,	// TAILBCTR
    2698U,	// TAILBCTR8
    1090650388U,	// TCRETURNai
    1090650331U,	// TCRETURNai8
    285344318U,	// TCRETURNdi
    285343977U,	// TCRETURNdi8
    285345195U,	// TCRETURNri
    285343991U,	// TCRETURNri8
    2689U,	// TRAP
    268566789U,	// UPDATE_VRSAVE
    268437730U,	// VADDCUW
    268436803U,	// VADDFP
    268437056U,	// VADDSBS
    268437200U,	// VADDSHS
    268437366U,	// VADDSWS
    268436615U,	// VADDUBM
    268437084U,	// VADDUBS
    268436664U,	// VADDUHM
    268437228U,	// VADDUHS
    268436739U,	// VADDUWM
    268437393U,	// VADDUWS
    268436120U,	// VAND
    268435996U,	// VANDC
    268435816U,	// VAVGSB
    268436287U,	// VAVGSH
    268437657U,	// VAVGSW
    268435916U,	// VAVGUB
    268436387U,	// VAVGUH
    268437739U,	// VAVGUW
    281807288U,	// VCFSX
    281807315U,	// VCFUX
    268436767U,	// VCMPBFP
    268435559U,	// VCMPBFPo
    268436866U,	// VCMPEQFP
    268435580U,	// VCMPEQFPo
    268435941U,	// VCMPEQUB
    268435480U,	// VCMPEQUBo
    268436412U,	// VCMPEQUH
    268435521U,	// VCMPEQUHo
    268437755U,	// VCMPEQUW
    268435621U,	// VCMPEQUWo
    268436820U,	// VCMPGEFP
    268435569U,	// VCMPGEFPo
    268436876U,	// VCMPGTFP
    268435591U,	// VCMPGTFPo
    268435869U,	// VCMPGTSB
    268435469U,	// VCMPGTSBo
    268436340U,	// VCMPGTSH
    268435510U,	// VCMPGTSHo
    268437683U,	// VCMPGTSW
    268435610U,	// VCMPGTSWo
    268435972U,	// VCMPGTUB
    268435491U,	// VCMPGTUBo
    268436422U,	// VCMPGTUH
    268435532U,	// VCMPGTUHo
    268437765U,	// VCMPGTUW
    268435632U,	// VCMPGTUWo
    281806746U,	// VCTSXS
    281806754U,	// VCTUXS
    268567909U,	// VEXPTEFP
    268567883U,	// VLOGEFP
    268444986U,	// VMADDFP
    268436886U,	// VMAXFP
    268435886U,	// VMAXSB
    268436357U,	// VMAXSH
    268437700U,	// VMAXSW
    268435982U,	// VMAXUB
    268436432U,	// VMAXUH
    268437775U,	// VMAXUW
    268445369U,	// VMHADDSHS
    268445380U,	// VMHRADDSHS
    268436858U,	// VMINFP
    268435852U,	// VMINSB
    268436323U,	// VMINSH
    268437675U,	// VMINSW
    268435924U,	// VMINUB
    268436395U,	// VMINUH
    268437747U,	// VMINUW
    268444845U,	// VMLADDUHM
    268435773U,	// VMRGHB
    268436244U,	// VMRGHH
    268437596U,	// VMRGHW
    268435781U,	// VMRGLB
    268436252U,	// VMRGLH
    268437611U,	// VMRGLW
    268444788U,	// VMSUMMBM
    268444826U,	// VMSUMSHM
    268445401U,	// VMSUMSHS
    268444816U,	// VMSUMUBM
    268444865U,	// VMSUMUHM
    268445429U,	// VMSUMUHS
    268435807U,	// VMULESB
    268436278U,	// VMULESH
    268435907U,	// VMULEUB
    268436378U,	// VMULEUH
    268435860U,	// VMULOSB
    268436331U,	// VMULOSH
    268435932U,	// VMULOUB
    268436403U,	// VMULOUH
    268444968U,	// VNMSUBFP
    268436967U,	// VNOR
    268436979U,	// VOR
    268444897U,	// VPERM
    268437884U,	// VPKPX
    268437278U,	// VPKSHSS
    268437304U,	// VPKSHUS
    268437287U,	// VPKSWSS
    268437322U,	// VPKSWUS
    268436712U,	// VPKUHUM
    268437313U,	// VPKUHUS
    268436721U,	// VPKUWUM
    268437331U,	// VPKUWUS
    268567902U,	// VREFP
    268567755U,	// VRFIM
    268567820U,	// VRFIN
    268567966U,	// VRFIP
    268569139U,	// VRFIZ
    268435789U,	// VRLB
    268436260U,	// VRLH
    268437633U,	// VRLW
    268567919U,	// VRSQRTEFP
    268444750U,	// VSEL
    268436565U,	// VSL
    268435795U,	// VSLB
    268444689U,	// VSLDOI
    268436266U,	// VSLH
    268436755U,	// VSLO
    268437639U,	// VSLW
    281805238U,	// VSPLTB
    281805709U,	// VSPLTH
    282067321U,	// VSPLTISB
    282067792U,	// VSPLTISH
    282069153U,	// VSPLTISW
    281807052U,	// VSPLTW
    268437005U,	// VSR
    268435766U,	// VSRAB
    268436237U,	// VSRAH
    268437589U,	// VSRAW
    268435801U,	// VSRB
    268436272U,	// VSRH
    268436761U,	// VSRO
    268437651U,	// VSRW
    268437721U,	// VSUBCUW
    268436786U,	// VSUBFP
    268437047U,	// VSUBSBS
    268437168U,	// VSUBSHS
    268437357U,	// VSUBSWS
    268436606U,	// VSUBUBM
    268437075U,	// VSUBUBS
    268436644U,	// VSUBUHM
    268437219U,	// VSUBUHS
    268436730U,	// VSUBUWM
    268437384U,	// VSUBUWS
    268437347U,	// VSUM2SWS
    268437037U,	// VSUM4SBS
    268437158U,	// VSUM4SHS
    268437065U,	// VSUM4UBS
    268437375U,	// VSUMSWS
    268568947U,	// VUPKHPX
    268566896U,	// VUPKHSB
    268567367U,	// VUPKHSH
    268568963U,	// VUPKLPX
    268566915U,	// VUPKLSB
    268567386U,	// VUPKLSH
    268436991U,	// VXOR
    270534143U,	// V_SET0
    268436986U,	// XOR
    268436986U,	// XOR8
    268485657U,	// XORI
    268485657U,	// XORI8
    268486411U,	// XORIS
    268486411U,	// XORIS8
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 12 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 23 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 34 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 45 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 53 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 64 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 75 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 86 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 93 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 102 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 112 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 123 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 134 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 145 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 153 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 164 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 175 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 186 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 194 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 202 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 210 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 218 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 232 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 246 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 260 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 275 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 288 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 294 */ 'l', 'h', 'a', 32, 0,
  /* 299 */ 'b', 'l', 'a', 32, 0,
  /* 304 */ 'l', 'w', 'a', 32, 0,
  /* 309 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 316 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 324 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 332 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 338 */ 'v', 's', 'l', 'b', 32, 0,
  /* 344 */ 'v', 's', 'r', 'b', 32, 0,
  /* 350 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 359 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 367 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 376 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 386 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 395 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 403 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 412 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 422 */ 'e', 'x', 't', 's', 'b', 32, 0,
  /* 429 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 437 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 445 */ 's', 't', 'b', 32, 0,
  /* 450 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 459 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 467 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 475 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 484 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 494 */ 'f', 's', 'u', 'b', 32, 0,
  /* 500 */ 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 507 */ 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 515 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 525 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 533 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 539 */ 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 546 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 553 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 560 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 568 */ 'o', 'r', 'c', 32, 0,
  /* 573 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 586 */ 's', 'r', 'a', 'd', 32, 0,
  /* 592 */ 'f', 'a', 'd', 'd', 32, 0,
  /* 598 */ 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 605 */ 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 613 */ 'l', 'f', 'd', 32, 0,
  /* 618 */ 's', 't', 'f', 'd', 32, 0,
  /* 624 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 631 */ 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 638 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 645 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 652 */ 's', 'l', 'd', 32, 0,
  /* 657 */ 'n', 'a', 'n', 'd', 32, 0,
  /* 663 */ 'v', 'a', 'n', 'd', 32, 0,
  /* 669 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 675 */ 's', 'r', 'd', 32, 0,
  /* 680 */ 's', 't', 'd', 32, 0,
  /* 685 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 691 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 699 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 705 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 712 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 719 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 727 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 734 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 742 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 748 */ 's', 'u', 'b', 'f', 32, 0,
  /* 754 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 760 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 767 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 774 */ 'f', 'n', 'e', 'g', 32, 0,
  /* 780 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 787 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 795 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 803 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 809 */ 'v', 's', 'l', 'h', 32, 0,
  /* 815 */ 'v', 's', 'r', 'h', 32, 0,
  /* 821 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 830 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 838 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 847 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 857 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 866 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 874 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 883 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 893 */ 'e', 'x', 't', 's', 'h', 32, 0,
  /* 900 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 908 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 916 */ 's', 't', 'h', 32, 0,
  /* 921 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 930 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 938 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 946 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 955 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 965 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 975 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 983 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 989 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 996 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 1002 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 1010 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 1017 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 1024 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 1032 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 1040 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 1048 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 1054 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 1061 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 1069 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 1076 */ 'b', 'l', 32, 0,
  /* 1080 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 1087 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 1095 */ 'f', 's', 'e', 'l', 32, 0,
  /* 1101 */ 'v', 's', 'e', 'l', 32, 0,
  /* 1107 */ 'l', 'v', 's', 'l', 32, 0,
  /* 1113 */ 'f', 'm', 'u', 'l', 32, 0,
  /* 1119 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 1125 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 1132 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 1139 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 1149 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 1158 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 1167 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 1177 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 1187 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 1196 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 1207 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 1216 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 1226 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 1233 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 1241 */ 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 1248 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 1255 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 1264 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 1273 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 1282 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 1291 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 1298 */ 'v', 's', 'l', 'o', 32, 0,
  /* 1304 */ 'v', 's', 'r', 'o', 32, 0,
  /* 1310 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 1319 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 1329 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 1337 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 1346 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 1354 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 1363 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 1373 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 1380 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 1390 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 1401 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 1409 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 1419 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 1429 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 1437 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 1444 */ 'f', 'r', 's', 'p', 32, 0,
  /* 1450 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 1463 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 1469 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 1477 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 1485 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 1493 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 1499 */ 'm', 't', 'l', 'r', 32, 0,
  /* 1505 */ 'f', 'm', 'r', 32, 0,
  /* 1510 */ 'v', 'n', 'o', 'r', 32, 0,
  /* 1516 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 1522 */ 'v', 'o', 'r', 32, 0,
  /* 1527 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 1534 */ 'v', 'x', 'o', 'r', 32, 0,
  /* 1540 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 1547 */ 'l', 'v', 's', 'r', 32, 0,
  /* 1553 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 1560 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 1567 */ 'f', 'a', 'b', 's', 32, 0,
  /* 1573 */ 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 1580 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 1590 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 1599 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 1608 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 1618 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 1627 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 1636 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 1643 */ 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 1651 */ 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 1660 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 1667 */ 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 1675 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 1684 */ 'm', 'f', 'f', 's', 32, 0,
  /* 1690 */ 'l', 'f', 's', 32, 0,
  /* 1695 */ 's', 't', 'f', 's', 32, 0,
  /* 1701 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 1711 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 1720 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 1731 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 1743 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 1752 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 1762 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 1771 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 1780 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 1790 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 1797 */ 'l', 'i', 's', 32, 0,
  /* 1802 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 1809 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 1816 */ 'd', 's', 's', 32, 0,
  /* 1821 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 1830 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 1839 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 1847 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 1856 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 1865 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 1874 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 1883 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 1890 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 1900 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 1909 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 1918 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 1927 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 1936 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 1945 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 1953 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 1961 */ 'd', 'c', 'b', 't', 32, 0,
  /* 1967 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 1974 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 1981 */ 'd', 's', 't', 32, 0,
  /* 1986 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 1994 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 2001 */ 'd', 's', 't', 't', 32, 0,
  /* 2007 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 2015 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 2021 */ 's', 't', 'b', 'u', 32, 0,
  /* 2027 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 2034 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 2042 */ 'l', 'd', 'u', 32, 0,
  /* 2047 */ 's', 't', 'd', 'u', 32, 0,
  /* 2053 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 2060 */ 's', 't', 'h', 'u', 32, 0,
  /* 2066 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 2073 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 2080 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 2088 */ 's', 't', 'w', 'u', 32, 0,
  /* 2094 */ 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 2101 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 2107 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 2113 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 2119 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 2125 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 2132 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 2139 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 2147 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 2154 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 2162 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 2169 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 2176 */ 'v', 'r', 'l', 'w', 32, 0,
  /* 2182 */ 'v', 's', 'l', 'w', 32, 0,
  /* 2188 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 2194 */ 'v', 's', 'r', 'w', 32, 0,
  /* 2200 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 2208 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 2218 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 2226 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 2236 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 2243 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 2251 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 2259 */ 's', 't', 'w', 32, 0,
  /* 2264 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 2273 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 2282 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 2290 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 2298 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 2308 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 2318 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 2326 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 2332 */ 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 2340 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 2346 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 2352 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 2359 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 2367 */ 's', 't', 'b', 'x', 32, 0,
  /* 2373 */ 'l', 'f', 'd', 'x', 32, 0,
  /* 2379 */ 's', 't', 'f', 'd', 'x', 32, 0,
  /* 2386 */ 'l', 'd', 'x', 32, 0,
  /* 2391 */ 's', 't', 'd', 'x', 32, 0,
  /* 2397 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 2404 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 2412 */ 's', 't', 'h', 'x', 32, 0,
  /* 2418 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 2427 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 2434 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 2443 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 2450 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 2457 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 2464 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 2472 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 2479 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 2487 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 2494 */ 'l', 'f', 's', 'x', 32, 0,
  /* 2500 */ 's', 't', 'f', 's', 'x', 32, 0,
  /* 2507 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 2514 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 2521 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 2528 */ 'l', 'v', 'x', 32, 0,
  /* 2533 */ 's', 't', 'v', 'x', 32, 0,
  /* 2539 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 2546 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 2554 */ 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 2562 */ 's', 't', 'w', 'x', 32, 0,
  /* 2568 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 2574 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 2580 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 2586 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 2592 */ 'l', 'b', 'z', 32, 0,
  /* 2597 */ 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 2605 */ 'l', 'h', 'z', 32, 0,
  /* 2610 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 2617 */ 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 2625 */ 'l', 'w', 'z', 32, 0,
  /* 2630 */ 'l', 'd', 32, '2', ',', 32, '8', '(', 0,
  /* 2639 */ 'l', 'd', 32, '2', ',', 32, '4', '0', '(', '1', ')', 0,
  /* 2651 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2658 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2668 */ 'b', 0,
  /* 2670 */ 's', 'y', 'n', 'c', 0,
  /* 2675 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 2682 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 2688 */ 't', 'r', 'a', 'p', 0,
  /* 2693 */ 'n', 'o', 'p', 0,
  /* 2697 */ 'b', 'c', 't', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, BCTR, BCTR8, BCTRL8_Darwin, BCTRL8_ELF, BCTRL_Darwi...
    return;
    break;
  case 1:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // B
    printBranchOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // BCC, BLR
    printPredicateOperand(MI, 0, O, "cc"); 
    break;
  case 4:
    // BLA8_Darwin, BLA8_ELF, BLA8_NOP_ELF, BLA_Darwin, BLA_SVR4, TAILBA, TAI...
    printAbsAddrOperand(MI, 0, O); 
    break;
  case 5:
    // DCBA, DCBF, DCBI, DCBST, DCBT, DCBTST, DCBZ, DCBZL
    printMemRegReg(MI, 0, O); 
    return;
    break;
  case 6:
    // DSS
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // MTCRF, MTCRF8
    printcrbitm(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 9:
    // MTFSB0, MTFSB1
    printU5ImmOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // MTFSF, STBU, STBU8, STDU, STFDU, STFSU, STHU, STHU8, STWU
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  }


  // Fragment 1 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 24) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // BCC, TCRETURNai, TCRETURNai8, TCRETURNdi, TCRETURNdi8, TCRETURNri, TCR...
    O << ' '; 
    break;
  case 2:
    // BL8_Darwin, BL8_ELF, BLA8_Darwin, BLA8_ELF, BLA_Darwin, BLA_SVR4, BL_D...
    return;
    break;
  case 3:
    // BL8_NOP_ELF, BLA8_NOP_ELF
    O << "\n\tnop"; 
    return;
    break;
  case 4:
    // BLR
    O << "lr "; 
    printPredicateOperand(MI, 0, O, "reg"); 
    return;
    break;
  case 5:
    // LDinto_toc
    O << ')'; 
    return;
    break;
  case 6:
    // MFVRSAVE
    O << ", 256"; 
    return;
    break;
  case 7:
    // MTFSF
    printOperand(MI, 2, O); 
    return;
    break;
  case 8:
    // STBU, STBU8, STFDU, STFSU, STHU, STHU8, STWU
    printSymbolLo(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // STDU
    printS16X4ImmOperand(MI, 2, O); 
    O << '('; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 20) & 15) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // BCC
    printPredicateOperand(MI, 0, O, "reg"); 
    O << ", "; 
    printBranchOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // CRSET, CRUNSET, V_SET0
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // LA, LHAU8
    printSymbolLo(MI, 2, O); 
    O << '('; 
    break;
  case 4:
    // LBZ, LBZ8, LFD, LFS, LHA, LHA8, LHZ, LHZ8, LWZ, LWZ8, STB, STB8, STFD,...
    printMemRegImm(MI, 1, O); 
    return;
    break;
  case 5:
    // LBZU, LBZU8, LFDU, LFSU, LHAU, LHZU, LHZU8, LWZU, LWZU8
    printMemRegImm(MI, 2, O); 
    return;
    break;
  case 6:
    // LBZX, LBZX8, LDARX, LDX, LFDX, LFSX, LHAX, LHAX8, LHBRX, LHZX, LHZX8, ...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 7:
    // LD, LWA, STD, STD_32
    printMemRegImmShifted(MI, 1, O); 
    return;
    break;
  case 8:
    // LDU
    printMemRegImmShifted(MI, 2, O); 
    return;
    break;
  case 9:
    // LI, LI8
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 10:
    // LIS, LIS8
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 11:
    // MFOCRF
    printcrbitm(MI, 1, O); 
    return;
    break;
  case 12:
    // RLDIMI, RLWIMI, VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 13:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, ADDI, ADDI8, ADDIC, ADDIC8, ADDI...
    O << ", "; 
    break;
  case 1:
    // ADDME, ADDME8, ADDZE, ADDZE8, CNTLZD, CNTLZW, EXTSB, EXTSB8, EXTSH, EX...
    return;
    break;
  case 2:
    // LA
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 3:
    // LHAU8
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // RLDIMI
    printU6ImmOperand(MI, 3, O); 
    O << ", "; 
    printU6ImmOperand(MI, 4, O); 
    return;
    break;
  case 5:
    // RLWIMI
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    O << ", "; 
    printU5ImmOperand(MI, 5, O); 
    return;
    break;
  case 6:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTH, VSPLTW
    printU5ImmOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, CMPDI, CMPWI, MULLI, SUBFIC, SUBFI...
    printS16ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ADDIS, ADDIS8
    printSymbolHi(MI, 2, O); 
    return;
    break;
  case 3:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // RLDICL, RLDICR, SRADI
    printU6ImmOperand(MI, 2, O); 
    break;
  case 5:
    // RLWINM, RLWINM8, RLWINMo, SRAWI
    printU5ImmOperand(MI, 2, O); 
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 13) & 1) {
    // FMADD, FMADDS, FMSUB, FMSUBS, FNMADD, FNMADDS, FNMSUB, FNMSUBS, FSELD,...
    O << ", "; 
  } else {
    // ADD4, ADD8, ADDC, ADDC8, ADDE, ADDE8, AND, AND8, ANDC, ANDC8, CMPD, CM...
    return;
  }

  switch (MI->getOpcode()) {
  case PPC::FMADD:
  case PPC::FMADDS:
  case PPC::FMSUB:
  case PPC::FMSUBS:
  case PPC::FNMADD:
  case PPC::FNMADDS:
  case PPC::FNMSUB:
  case PPC::FNMSUBS:
  case PPC::FSELD:
  case PPC::FSELS:
  case PPC::RLDCL:
  case PPC::RLDICL:
  case PPC::RLDICR:
  case PPC::VMADDFP:
  case PPC::VMHADDSHS:
  case PPC::VMHRADDSHS:
  case PPC::VMLADDUHM:
  case PPC::VMSUMMBM:
  case PPC::VMSUMSHM:
  case PPC::VMSUMSHS:
  case PPC::VMSUMUBM:
  case PPC::VMSUMUHM:
  case PPC::VMSUMUHS:
  case PPC::VNMSUBFP:
  case PPC::VPERM:
  case PPC::VSEL:
  case PPC::VSLDOI:
    switch (MI->getOpcode()) {
    case PPC::FMADD: 
    case PPC::FMADDS: 
    case PPC::FMSUB: 
    case PPC::FMSUBS: 
    case PPC::FNMADD: 
    case PPC::FNMADDS: 
    case PPC::FNMSUB: 
    case PPC::FNMSUBS: 
    case PPC::FSELD: 
    case PPC::FSELS: 
    case PPC::VMADDFP: 
    case PPC::VMHADDSHS: 
    case PPC::VMHRADDSHS: 
    case PPC::VMLADDUHM: 
    case PPC::VMSUMMBM: 
    case PPC::VMSUMSHM: 
    case PPC::VMSUMSHS: 
    case PPC::VMSUMUBM: 
    case PPC::VMSUMUHM: 
    case PPC::VMSUMUHS: 
    case PPC::VNMSUBFP: 
    case PPC::VPERM: 
    case PPC::VSEL: printOperand(MI, 3, O); break;
    case PPC::RLDCL: 
    case PPC::RLDICL: 
    case PPC::RLDICR: printU6ImmOperand(MI, 3, O); break;
    case PPC::VSLDOI: printU5ImmOperand(MI, 3, O); break;
    }
    return;
    break;
  case PPC::RLWINM:
  case PPC::RLWINM8:
  case PPC::RLWINMo:
  case PPC::RLWNM:
    printU5ImmOperand(MI, 3, O); 
    O << ", "; 
    printU5ImmOperand(MI, 4, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 176 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ 'f', '1', '0', 0,
  /* 22 */ 'r', '1', '0', 0,
  /* 26 */ 'v', '1', '0', 0,
  /* 30 */ 'f', '2', '0', 0,
  /* 34 */ 'r', '2', '0', 0,
  /* 38 */ 'v', '2', '0', 0,
  /* 42 */ 'f', '3', '0', 0,
  /* 46 */ 'r', '3', '0', 0,
  /* 50 */ 'v', '3', '0', 0,
  /* 54 */ 'f', '0', 0,
  /* 57 */ 'c', 'r', '0', 0,
  /* 61 */ 'v', '0', 0,
  /* 64 */ 'f', '1', '1', 0,
  /* 68 */ 'r', '1', '1', 0,
  /* 72 */ 'v', '1', '1', 0,
  /* 76 */ 'f', '2', '1', 0,
  /* 80 */ 'r', '2', '1', 0,
  /* 84 */ 'v', '2', '1', 0,
  /* 88 */ 'f', '3', '1', 0,
  /* 92 */ 'r', '3', '1', 0,
  /* 96 */ 'v', '3', '1', 0,
  /* 100 */ 'f', '1', 0,
  /* 103 */ 'c', 'r', '1', 0,
  /* 107 */ 'v', '1', 0,
  /* 110 */ 'f', '1', '2', 0,
  /* 114 */ 'r', '1', '2', 0,
  /* 118 */ 'v', '1', '2', 0,
  /* 122 */ 'f', '2', '2', 0,
  /* 126 */ 'r', '2', '2', 0,
  /* 130 */ 'v', '2', '2', 0,
  /* 134 */ 'f', '2', 0,
  /* 137 */ 'c', 'r', '2', 0,
  /* 141 */ 'v', '2', 0,
  /* 144 */ 'f', '1', '3', 0,
  /* 148 */ 'r', '1', '3', 0,
  /* 152 */ 'v', '1', '3', 0,
  /* 156 */ 'f', '2', '3', 0,
  /* 160 */ 'r', '2', '3', 0,
  /* 164 */ 'v', '2', '3', 0,
  /* 168 */ 'f', '3', 0,
  /* 171 */ 'c', 'r', '3', 0,
  /* 175 */ 'v', '3', 0,
  /* 178 */ 'f', '1', '4', 0,
  /* 182 */ 'r', '1', '4', 0,
  /* 186 */ 'v', '1', '4', 0,
  /* 190 */ 'f', '2', '4', 0,
  /* 194 */ 'r', '2', '4', 0,
  /* 198 */ 'v', '2', '4', 0,
  /* 202 */ 'f', '4', 0,
  /* 205 */ 'c', 'r', '4', 0,
  /* 209 */ 'v', '4', 0,
  /* 212 */ 'f', '1', '5', 0,
  /* 216 */ 'r', '1', '5', 0,
  /* 220 */ 'v', '1', '5', 0,
  /* 224 */ 'f', '2', '5', 0,
  /* 228 */ 'r', '2', '5', 0,
  /* 232 */ 'v', '2', '5', 0,
  /* 236 */ 'f', '5', 0,
  /* 239 */ 'c', 'r', '5', 0,
  /* 243 */ 'v', '5', 0,
  /* 246 */ 'f', '1', '6', 0,
  /* 250 */ 'r', '1', '6', 0,
  /* 254 */ 'v', '1', '6', 0,
  /* 258 */ 'f', '2', '6', 0,
  /* 262 */ 'r', '2', '6', 0,
  /* 266 */ 'v', '2', '6', 0,
  /* 270 */ 'f', '6', 0,
  /* 273 */ 'c', 'r', '6', 0,
  /* 277 */ 'v', '6', 0,
  /* 280 */ 'f', '1', '7', 0,
  /* 284 */ 'r', '1', '7', 0,
  /* 288 */ 'v', '1', '7', 0,
  /* 292 */ 'f', '2', '7', 0,
  /* 296 */ 'r', '2', '7', 0,
  /* 300 */ 'v', '2', '7', 0,
  /* 304 */ 'f', '7', 0,
  /* 307 */ 'c', 'r', '7', 0,
  /* 311 */ 'v', '7', 0,
  /* 314 */ 'f', '1', '8', 0,
  /* 318 */ 'r', '1', '8', 0,
  /* 322 */ 'v', '1', '8', 0,
  /* 326 */ 'f', '2', '8', 0,
  /* 330 */ 'r', '2', '8', 0,
  /* 334 */ 'v', '2', '8', 0,
  /* 338 */ 'f', '8', 0,
  /* 341 */ 'r', '8', 0,
  /* 344 */ 'v', '8', 0,
  /* 347 */ 'f', '1', '9', 0,
  /* 351 */ 'r', '1', '9', 0,
  /* 355 */ 'v', '1', '9', 0,
  /* 359 */ 'f', '2', '9', 0,
  /* 363 */ 'r', '2', '9', 0,
  /* 367 */ 'v', '2', '9', 0,
  /* 371 */ 'f', '9', 0,
  /* 374 */ 'r', '9', 0,
  /* 377 */ 'v', '9', 0,
  /* 380 */ 'c', 'a', 0,
  /* 383 */ 'V', 'R', 's', 'a', 'v', 'e', 0,
  /* 390 */ 'l', 'r', 0,
  /* 393 */ 'c', 't', 'r', 0,
  };

  static const unsigned RegAsmOffset[] = {
    380, 57, 112, 66, 20, 146, 103, 248, 214, 180, 282, 137, 19, 349, 
    316, 65, 171, 179, 145, 111, 213, 205, 315, 281, 247, 348, 239, 123, 
    77, 31, 157, 273, 259, 225, 191, 293, 307, 43, 360, 327, 89, 393, 
    393, 54, 100, 134, 168, 202, 236, 270, 304, 338, 371, 18, 64, 110, 
    144, 178, 212, 246, 280, 314, 347, 30, 76, 122, 156, 190, 224, 258, 
    292, 326, 359, 42, 88, 390, 390, 58, 104, 138, 172, 206, 240, 274, 
    308, 341, 374, 22, 68, 114, 148, 182, 216, 250, 284, 318, 351, 34, 
    80, 126, 160, 194, 228, 262, 296, 330, 363, 46, 92, 0, 61, 107, 
    141, 175, 209, 243, 277, 311, 344, 377, 26, 72, 118, 152, 186, 220, 
    254, 288, 322, 355, 38, 84, 130, 164, 198, 232, 266, 300, 334, 367, 
    50, 96, 383, 58, 104, 138, 172, 206, 240, 274, 308, 341, 374, 22, 
    68, 114, 148, 182, 216, 250, 284, 318, 351, 34, 80, 126, 160, 194, 
    228, 262, 296, 330, 363, 46, 92, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
