//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register Enum Values
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass MBlazeMCRegisterClasses[];

namespace MBlaze {
enum {
  NoRegister,
  CARRY = 1,
  R0 = 2,
  R1 = 3,
  R2 = 4,
  R3 = 5,
  R4 = 6,
  R5 = 7,
  R6 = 8,
  R7 = 9,
  R8 = 10,
  R9 = 11,
  R10 = 12,
  R11 = 13,
  R12 = 14,
  R13 = 15,
  R14 = 16,
  R15 = 17,
  R16 = 18,
  R17 = 19,
  R18 = 20,
  R19 = 21,
  R20 = 22,
  R21 = 23,
  R22 = 24,
  R23 = 25,
  R24 = 26,
  R25 = 27,
  R26 = 28,
  R27 = 29,
  R28 = 30,
  R29 = 31,
  R30 = 32,
  R31 = 33,
  RBTR = 34,
  REAR = 35,
  REDR = 36,
  RESR = 37,
  RFSR = 38,
  RMSR = 39,
  RPC = 40,
  RPID = 41,
  RPVR0 = 42,
  RPVR1 = 43,
  RPVR2 = 44,
  RPVR3 = 45,
  RPVR4 = 46,
  RPVR5 = 47,
  RPVR6 = 48,
  RPVR7 = 49,
  RPVR8 = 50,
  RPVR9 = 51,
  RPVR10 = 52,
  RPVR11 = 53,
  RTLBHI = 54,
  RTLBLO = 55,
  RTLBSX = 56,
  RTLBX = 57,
  RZPR = 58,
  NUM_TARGET_REGS 	// 59
};
}

// Register classes
namespace MBlaze {
enum {
  GPRRegClassID = 0,
  SPRRegClassID = 1,
  CRCRegClassID = 2
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// MC Register Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const uint16_t MBlazeRegLists[] = {
  /* 0 */ MBlaze::CARRY, 0,
  /* 2 */ MBlaze::R0, 0,
  /* 4 */ MBlaze::R1, 0,
  /* 6 */ MBlaze::R2, 0,
  /* 8 */ MBlaze::R3, 0,
  /* 10 */ MBlaze::R4, 0,
  /* 12 */ MBlaze::R5, 0,
  /* 14 */ MBlaze::R6, 0,
  /* 16 */ MBlaze::R7, 0,
  /* 18 */ MBlaze::R8, 0,
  /* 20 */ MBlaze::R9, 0,
  /* 22 */ MBlaze::R10, 0,
  /* 24 */ MBlaze::R11, 0,
  /* 26 */ MBlaze::R12, 0,
  /* 28 */ MBlaze::R13, 0,
  /* 30 */ MBlaze::R14, 0,
  /* 32 */ MBlaze::R15, 0,
  /* 34 */ MBlaze::R16, 0,
  /* 36 */ MBlaze::R17, 0,
  /* 38 */ MBlaze::R18, 0,
  /* 40 */ MBlaze::R19, 0,
  /* 42 */ MBlaze::R20, 0,
  /* 44 */ MBlaze::R21, 0,
  /* 46 */ MBlaze::R22, 0,
  /* 48 */ MBlaze::R23, 0,
  /* 50 */ MBlaze::R24, 0,
  /* 52 */ MBlaze::R25, 0,
  /* 54 */ MBlaze::R26, 0,
  /* 56 */ MBlaze::R27, 0,
  /* 58 */ MBlaze::R28, 0,
  /* 60 */ MBlaze::R29, 0,
  /* 62 */ MBlaze::R30, 0,
  /* 64 */ MBlaze::R31, 0,
  /* 66 */ MBlaze::RBTR, 0,
  /* 68 */ MBlaze::REAR, 0,
  /* 70 */ MBlaze::REDR, 0,
  /* 72 */ MBlaze::RESR, 0,
  /* 74 */ MBlaze::RFSR, 0,
  /* 76 */ MBlaze::RMSR, 0,
  /* 78 */ MBlaze::RPC, 0,
  /* 80 */ MBlaze::RPID, 0,
  /* 82 */ MBlaze::RPVR0, 0,
  /* 84 */ MBlaze::RPVR1, 0,
  /* 86 */ MBlaze::RPVR2, 0,
  /* 88 */ MBlaze::RPVR3, 0,
  /* 90 */ MBlaze::RPVR4, 0,
  /* 92 */ MBlaze::RPVR5, 0,
  /* 94 */ MBlaze::RPVR6, 0,
  /* 96 */ MBlaze::RPVR7, 0,
  /* 98 */ MBlaze::RPVR8, 0,
  /* 100 */ MBlaze::RPVR9, 0,
  /* 102 */ MBlaze::RPVR10, 0,
  /* 104 */ MBlaze::RPVR11, 0,
  /* 106 */ MBlaze::RTLBHI, 0,
  /* 108 */ MBlaze::RTLBLO, 0,
  /* 110 */ MBlaze::RTLBSX, 0,
  /* 112 */ MBlaze::RTLBX, 0,
  /* 114 */ MBlaze::RZPR, 0,
};

extern const MCRegisterDesc MBlazeRegDesc[] = { // Descriptors
  { "NOREG", 0, 0, 0 },
  { "CARRY", 0, 1, 1 },
  { "R0", 2, 1, 1 },
  { "R1", 4, 1, 1 },
  { "R2", 6, 1, 1 },
  { "R3", 8, 1, 1 },
  { "R4", 10, 1, 1 },
  { "R5", 12, 1, 1 },
  { "R6", 14, 1, 1 },
  { "R7", 16, 1, 1 },
  { "R8", 18, 1, 1 },
  { "R9", 20, 1, 1 },
  { "R10", 22, 1, 1 },
  { "R11", 24, 1, 1 },
  { "R12", 26, 1, 1 },
  { "R13", 28, 1, 1 },
  { "R14", 30, 1, 1 },
  { "R15", 32, 1, 1 },
  { "R16", 34, 1, 1 },
  { "R17", 36, 1, 1 },
  { "R18", 38, 1, 1 },
  { "R19", 40, 1, 1 },
  { "R20", 42, 1, 1 },
  { "R21", 44, 1, 1 },
  { "R22", 46, 1, 1 },
  { "R23", 48, 1, 1 },
  { "R24", 50, 1, 1 },
  { "R25", 52, 1, 1 },
  { "R26", 54, 1, 1 },
  { "R27", 56, 1, 1 },
  { "R28", 58, 1, 1 },
  { "R29", 60, 1, 1 },
  { "R30", 62, 1, 1 },
  { "R31", 64, 1, 1 },
  { "RBTR", 66, 1, 1 },
  { "REAR", 68, 1, 1 },
  { "REDR", 70, 1, 1 },
  { "RESR", 72, 1, 1 },
  { "RFSR", 74, 1, 1 },
  { "RMSR", 76, 1, 1 },
  { "RPC", 78, 1, 1 },
  { "RPID", 80, 1, 1 },
  { "RPVR0", 82, 1, 1 },
  { "RPVR1", 84, 1, 1 },
  { "RPVR2", 86, 1, 1 },
  { "RPVR3", 88, 1, 1 },
  { "RPVR4", 90, 1, 1 },
  { "RPVR5", 92, 1, 1 },
  { "RPVR6", 94, 1, 1 },
  { "RPVR7", 96, 1, 1 },
  { "RPVR8", 98, 1, 1 },
  { "RPVR9", 100, 1, 1 },
  { "RPVR10", 102, 1, 1 },
  { "RPVR11", 104, 1, 1 },
  { "RTLBHI", 106, 1, 1 },
  { "RTLBLO", 108, 1, 1 },
  { "RTLBSX", 110, 1, 1 },
  { "RTLBX", 112, 1, 1 },
  { "RZPR", 114, 1, 1 },
};

namespace {     // Register classes...
  // GPR Register Class...
  const uint16_t GPR[] = {
    MBlaze::R0, MBlaze::R1, MBlaze::R2, MBlaze::R3, MBlaze::R4, MBlaze::R5, MBlaze::R6, MBlaze::R7, MBlaze::R8, MBlaze::R9, MBlaze::R10, MBlaze::R11, MBlaze::R12, MBlaze::R13, MBlaze::R14, MBlaze::R15, MBlaze::R16, MBlaze::R17, MBlaze::R18, MBlaze::R19, MBlaze::R20, MBlaze::R21, MBlaze::R22, MBlaze::R23, MBlaze::R24, MBlaze::R25, MBlaze::R26, MBlaze::R27, MBlaze::R28, MBlaze::R29, MBlaze::R30, MBlaze::R31, 
  };

  // GPR Bit set.
  const uint8_t GPRBits[] = {
    0xfc, 0xff, 0xff, 0xff, 0x03, 
  };

  // SPR Register Class...
  const uint16_t SPR[] = {
    MBlaze::RPC, MBlaze::RMSR, MBlaze::REAR, MBlaze::RESR, MBlaze::RFSR, MBlaze::RBTR, MBlaze::REDR, MBlaze::RPID, MBlaze::RZPR, MBlaze::RTLBX, MBlaze::RTLBLO, MBlaze::RTLBHI, MBlaze::RPVR0, MBlaze::RPVR1, MBlaze::RPVR2, MBlaze::RPVR3, MBlaze::RPVR4, MBlaze::RPVR5, MBlaze::RPVR6, MBlaze::RPVR7, MBlaze::RPVR8, MBlaze::RPVR9, MBlaze::RPVR10, MBlaze::RPVR11, 
  };

  // SPR Bit set.
  const uint8_t SPRBits[] = {
    0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x06, 
  };

  // CRC Register Class...
  const uint16_t CRC[] = {
    MBlaze::CARRY, 
  };

  // CRC Bit set.
  const uint8_t CRCBits[] = {
    0x02, 
  };

}

extern const MCRegisterClass MBlazeMCRegisterClasses[] = {
  { "GPR", GPR, GPRBits, 32, sizeof(GPRBits), MBlaze::GPRRegClassID, 4, 4, 1, 1 },
  { "SPR", SPR, SPRBits, 24, sizeof(SPRBits), MBlaze::SPRRegClassID, 4, 4, 1, 0 },
  { "CRC", CRC, CRCBits, 1, sizeof(CRCBits), MBlaze::CRCRegClassID, 4, 4, -1, 1 },
};

// MBlaze Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeDwarfFlavour0Dwarf2L[] = {
  { 0U, MBlaze::R0 },
  { 1U, MBlaze::R1 },
  { 2U, MBlaze::R2 },
  { 3U, MBlaze::R3 },
  { 4U, MBlaze::R4 },
  { 5U, MBlaze::R5 },
  { 6U, MBlaze::R6 },
  { 7U, MBlaze::R7 },
  { 8U, MBlaze::R8 },
  { 9U, MBlaze::R9 },
  { 10U, MBlaze::R10 },
  { 11U, MBlaze::R11 },
  { 12U, MBlaze::R12 },
  { 13U, MBlaze::R13 },
  { 14U, MBlaze::R14 },
  { 15U, MBlaze::R15 },
  { 16U, MBlaze::R16 },
  { 17U, MBlaze::R17 },
  { 18U, MBlaze::R18 },
  { 19U, MBlaze::R19 },
  { 20U, MBlaze::R20 },
  { 21U, MBlaze::R21 },
  { 22U, MBlaze::R22 },
  { 23U, MBlaze::R23 },
  { 24U, MBlaze::R24 },
  { 25U, MBlaze::R25 },
  { 26U, MBlaze::R26 },
  { 27U, MBlaze::R27 },
  { 28U, MBlaze::R28 },
  { 29U, MBlaze::R29 },
  { 30U, MBlaze::R30 },
  { 31U, MBlaze::R31 },
  { 32U, MBlaze::RPC },
  { 33U, MBlaze::RMSR },
  { 34U, MBlaze::REAR },
  { 35U, MBlaze::RESR },
  { 36U, MBlaze::RFSR },
  { 37U, MBlaze::RBTR },
  { 38U, MBlaze::REDR },
  { 39U, MBlaze::RPID },
  { 40U, MBlaze::RZPR },
  { 41U, MBlaze::RTLBX },
  { 42U, MBlaze::RTLBLO },
  { 43U, MBlaze::RTLBHI },
  { 44U, MBlaze::RTLBSX },
  { 45U, MBlaze::RPVR0 },
  { 46U, MBlaze::RPVR1 },
  { 47U, MBlaze::RPVR2 },
  { 48U, MBlaze::RPVR3 },
  { 49U, MBlaze::RPVR4 },
  { 50U, MBlaze::RPVR5 },
  { 51U, MBlaze::RPVR6 },
  { 52U, MBlaze::RPVR7 },
  { 53U, MBlaze::RPVR8 },
  { 54U, MBlaze::RPVR9 },
  { 55U, MBlaze::RPVR10 },
  { 56U, MBlaze::RPVR11 },
};
extern const unsigned MBlazeDwarfFlavour0Dwarf2LSize = sizeof(MBlazeDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeEHFlavour0Dwarf2L[] = {
  { 0U, MBlaze::R0 },
  { 1U, MBlaze::R1 },
  { 2U, MBlaze::R2 },
  { 3U, MBlaze::R3 },
  { 4U, MBlaze::R4 },
  { 5U, MBlaze::R5 },
  { 6U, MBlaze::R6 },
  { 7U, MBlaze::R7 },
  { 8U, MBlaze::R8 },
  { 9U, MBlaze::R9 },
  { 10U, MBlaze::R10 },
  { 11U, MBlaze::R11 },
  { 12U, MBlaze::R12 },
  { 13U, MBlaze::R13 },
  { 14U, MBlaze::R14 },
  { 15U, MBlaze::R15 },
  { 16U, MBlaze::R16 },
  { 17U, MBlaze::R17 },
  { 18U, MBlaze::R18 },
  { 19U, MBlaze::R19 },
  { 20U, MBlaze::R20 },
  { 21U, MBlaze::R21 },
  { 22U, MBlaze::R22 },
  { 23U, MBlaze::R23 },
  { 24U, MBlaze::R24 },
  { 25U, MBlaze::R25 },
  { 26U, MBlaze::R26 },
  { 27U, MBlaze::R27 },
  { 28U, MBlaze::R28 },
  { 29U, MBlaze::R29 },
  { 30U, MBlaze::R30 },
  { 31U, MBlaze::R31 },
  { 32U, MBlaze::RPC },
  { 33U, MBlaze::RMSR },
  { 34U, MBlaze::REAR },
  { 35U, MBlaze::RESR },
  { 36U, MBlaze::RFSR },
  { 37U, MBlaze::RBTR },
  { 38U, MBlaze::REDR },
  { 39U, MBlaze::RPID },
  { 40U, MBlaze::RZPR },
  { 41U, MBlaze::RTLBX },
  { 42U, MBlaze::RTLBLO },
  { 43U, MBlaze::RTLBHI },
  { 44U, MBlaze::RTLBSX },
  { 45U, MBlaze::RPVR0 },
  { 46U, MBlaze::RPVR1 },
  { 47U, MBlaze::RPVR2 },
  { 48U, MBlaze::RPVR3 },
  { 49U, MBlaze::RPVR4 },
  { 50U, MBlaze::RPVR5 },
  { 51U, MBlaze::RPVR6 },
  { 52U, MBlaze::RPVR7 },
  { 53U, MBlaze::RPVR8 },
  { 54U, MBlaze::RPVR9 },
  { 55U, MBlaze::RPVR10 },
  { 56U, MBlaze::RPVR11 },
};
extern const unsigned MBlazeEHFlavour0Dwarf2LSize = sizeof(MBlazeEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeDwarfFlavour0L2Dwarf[] = {
  { MBlaze::R0, 0U },
  { MBlaze::R1, 1U },
  { MBlaze::R2, 2U },
  { MBlaze::R3, 3U },
  { MBlaze::R4, 4U },
  { MBlaze::R5, 5U },
  { MBlaze::R6, 6U },
  { MBlaze::R7, 7U },
  { MBlaze::R8, 8U },
  { MBlaze::R9, 9U },
  { MBlaze::R10, 10U },
  { MBlaze::R11, 11U },
  { MBlaze::R12, 12U },
  { MBlaze::R13, 13U },
  { MBlaze::R14, 14U },
  { MBlaze::R15, 15U },
  { MBlaze::R16, 16U },
  { MBlaze::R17, 17U },
  { MBlaze::R18, 18U },
  { MBlaze::R19, 19U },
  { MBlaze::R20, 20U },
  { MBlaze::R21, 21U },
  { MBlaze::R22, 22U },
  { MBlaze::R23, 23U },
  { MBlaze::R24, 24U },
  { MBlaze::R25, 25U },
  { MBlaze::R26, 26U },
  { MBlaze::R27, 27U },
  { MBlaze::R28, 28U },
  { MBlaze::R29, 29U },
  { MBlaze::R30, 30U },
  { MBlaze::R31, 31U },
  { MBlaze::RBTR, 37U },
  { MBlaze::REAR, 34U },
  { MBlaze::REDR, 38U },
  { MBlaze::RESR, 35U },
  { MBlaze::RFSR, 36U },
  { MBlaze::RMSR, 33U },
  { MBlaze::RPC, 32U },
  { MBlaze::RPID, 39U },
  { MBlaze::RPVR0, 45U },
  { MBlaze::RPVR1, 46U },
  { MBlaze::RPVR2, 47U },
  { MBlaze::RPVR3, 48U },
  { MBlaze::RPVR4, 49U },
  { MBlaze::RPVR5, 50U },
  { MBlaze::RPVR6, 51U },
  { MBlaze::RPVR7, 52U },
  { MBlaze::RPVR8, 53U },
  { MBlaze::RPVR9, 54U },
  { MBlaze::RPVR10, 55U },
  { MBlaze::RPVR11, 56U },
  { MBlaze::RTLBHI, 43U },
  { MBlaze::RTLBLO, 42U },
  { MBlaze::RTLBSX, 44U },
  { MBlaze::RTLBX, 41U },
  { MBlaze::RZPR, 40U },
};
extern const unsigned MBlazeDwarfFlavour0L2DwarfSize = sizeof(MBlazeDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeEHFlavour0L2Dwarf[] = {
  { MBlaze::R0, 0U },
  { MBlaze::R1, 1U },
  { MBlaze::R2, 2U },
  { MBlaze::R3, 3U },
  { MBlaze::R4, 4U },
  { MBlaze::R5, 5U },
  { MBlaze::R6, 6U },
  { MBlaze::R7, 7U },
  { MBlaze::R8, 8U },
  { MBlaze::R9, 9U },
  { MBlaze::R10, 10U },
  { MBlaze::R11, 11U },
  { MBlaze::R12, 12U },
  { MBlaze::R13, 13U },
  { MBlaze::R14, 14U },
  { MBlaze::R15, 15U },
  { MBlaze::R16, 16U },
  { MBlaze::R17, 17U },
  { MBlaze::R18, 18U },
  { MBlaze::R19, 19U },
  { MBlaze::R20, 20U },
  { MBlaze::R21, 21U },
  { MBlaze::R22, 22U },
  { MBlaze::R23, 23U },
  { MBlaze::R24, 24U },
  { MBlaze::R25, 25U },
  { MBlaze::R26, 26U },
  { MBlaze::R27, 27U },
  { MBlaze::R28, 28U },
  { MBlaze::R29, 29U },
  { MBlaze::R30, 30U },
  { MBlaze::R31, 31U },
  { MBlaze::RBTR, 37U },
  { MBlaze::REAR, 34U },
  { MBlaze::REDR, 38U },
  { MBlaze::RESR, 35U },
  { MBlaze::RFSR, 36U },
  { MBlaze::RMSR, 33U },
  { MBlaze::RPC, 32U },
  { MBlaze::RPID, 39U },
  { MBlaze::RPVR0, 45U },
  { MBlaze::RPVR1, 46U },
  { MBlaze::RPVR2, 47U },
  { MBlaze::RPVR3, 48U },
  { MBlaze::RPVR4, 49U },
  { MBlaze::RPVR5, 50U },
  { MBlaze::RPVR6, 51U },
  { MBlaze::RPVR7, 52U },
  { MBlaze::RPVR8, 53U },
  { MBlaze::RPVR9, 54U },
  { MBlaze::RPVR10, 55U },
  { MBlaze::RPVR11, 56U },
  { MBlaze::RTLBHI, 43U },
  { MBlaze::RTLBLO, 42U },
  { MBlaze::RTLBSX, 44U },
  { MBlaze::RTLBX, 41U },
  { MBlaze::RZPR, 40U },
};
extern const unsigned MBlazeEHFlavour0L2DwarfSize = sizeof(MBlazeEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

static inline void InitMBlazeMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0) {
  RI->InitMCRegisterInfo(MBlazeRegDesc, 59, RA, MBlazeMCRegisterClasses, 3, MBlazeRegLists, NULL, 0);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(MBlazeDwarfFlavour0Dwarf2L, MBlazeDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(MBlazeEHFlavour0Dwarf2L, MBlazeEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(MBlazeDwarfFlavour0L2Dwarf, MBlazeDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(MBlazeEHFlavour0L2Dwarf, MBlazeEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Register Information Header Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct MBlazeGenRegisterInfo : public TargetRegisterInfo {
  explicit MBlazeGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  unsigned composeSubRegIndices(unsigned, unsigned) const;
  const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  const TargetRegisterClass *getMatchingSuperRegClass(const TargetRegisterClass*, const TargetRegisterClass*, unsigned) const;
  const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  unsigned getNumRegPressureSets() const;
  unsigned getRegPressureSetLimit(unsigned Idx) const;
  const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
};

namespace MBlaze { // Register classes
  extern const TargetRegisterClass GPRRegClass;
  static const TargetRegisterClass * const GPRRegisterClass = &GPRRegClass;
  extern const TargetRegisterClass SPRRegClass;
  static const TargetRegisterClass * const SPRRegisterClass = &SPRRegClass;
  extern const TargetRegisterClass CRCRegClass;
  static const TargetRegisterClass * const CRCRegisterClass = &CRCRegClass;
} // end of namespace MBlaze

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Target Register and Register Classes Information
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass MBlazeMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::Other,
  /* 2 */ MVT::i32, MVT::f32, MVT::Other,
};

static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t GPRSubclassMask[] = {
  0x00000001, 
};

static const uint32_t SPRSubclassMask[] = {
  0x00000002, 
};

static const uint32_t CRCSubclassMask[] = {
  0x00000004, 
};

namespace MBlaze {   // Register class instances
  extern const TargetRegisterClass GPRRegClass = {
    &MBlazeMCRegisterClasses[GPRRegClassID],
    VTLists + 2,
    GPRSubclassMask,
    NullRegClasses,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass SPRRegClass = {
    &MBlazeMCRegisterClasses[SPRRegClassID],
    VTLists + 0,
    SPRSubclassMask,
    NullRegClasses,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass CRCRegClass = {
    &MBlazeMCRegisterClasses[CRCRegClassID],
    VTLists + 0,
    CRCSubclassMask,
    NullRegClasses,
    NullRegClasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &MBlaze::GPRRegClass,
    &MBlaze::SPRRegClass,
    &MBlaze::CRCRegClass,
  };
}

static const TargetRegisterInfoDesc MBlazeRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
};

static const char *const MBlazeSubRegIndexTable[] = { "" };


unsigned MBlazeGenRegisterInfo::composeSubRegIndices(unsigned IdxA, unsigned IdxB) const {
  switch (IdxA) {
  default:
    return IdxB;
  }
}

const TargetRegisterClass *MBlazeGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  assert(Idx == 0 && "Target has no sub-registers");
  return RC;
}

const TargetRegisterClass *MBlazeGenRegisterInfo::getMatchingSuperRegClass(const TargetRegisterClass *A, const TargetRegisterClass *B, unsigned Idx) const {
  llvm_unreachable("Target has no sub-registers");
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &MBlazeGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// GPR
    {0, 0},  	// SPR
    {1, 1},  	// CRC
    {0, 0} };
  return RCWeightTable[RC->getID()];
}


// Get the number of dimensions of register pressure.
unsigned MBlazeGenRegisterInfo::getNumRegPressureSets() const {
  return 2;
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned MBlazeGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    32,  	// 0: GPR
    1,  	// 1: CRC
    0 };
  return PressureLimitTable[Idx];
}

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* MBlazeGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const int RCSetsTable[] = {
    0,  -1,  	// GPR
    -1,  	// SPR
    1,  -1,  	// CRC
    -1 };
  static const unsigned RCSetStartTable[] = {
    0,2,3,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc MBlazeRegDesc[];
extern const uint16_t MBlazeRegLists[];
// MBlaze Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeDwarfFlavour0Dwarf2L[];
extern const unsigned MBlazeDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeEHFlavour0Dwarf2L[];
extern const unsigned MBlazeEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeDwarfFlavour0L2Dwarf[];
extern const unsigned MBlazeDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair MBlazeEHFlavour0L2Dwarf[];
extern const unsigned MBlazeEHFlavour0L2DwarfSize;

MBlazeGenRegisterInfo::
MBlazeGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour)
  : TargetRegisterInfo(MBlazeRegInfoDesc, RegisterClasses, RegisterClasses+3,
             MBlazeSubRegIndexTable) {
  InitMCRegisterInfo(MBlazeRegDesc, 59, RA,
                     MBlazeMCRegisterClasses, 3,
                     MBlazeRegLists,
                     NULL, 0);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(MBlazeDwarfFlavour0Dwarf2L, MBlazeDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(MBlazeEHFlavour0Dwarf2L, MBlazeEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(MBlazeDwarfFlavour0L2Dwarf, MBlazeDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(MBlazeEHFlavour0L2Dwarf, MBlazeEHFlavour0L2DwarfSize, true);
    break;
  }
}



} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

