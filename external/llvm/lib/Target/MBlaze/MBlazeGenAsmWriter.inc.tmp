//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MBlazeInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2737U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2730U,	// BUNDLE
    1073741994U,	// ADD
    1073742390U,	// ADDC
    1073742599U,	// ADDI
    1073742995U,	// ADDIC
    1073743281U,	// ADDIK
    1073743281U,	// ADDIK32
    1073743534U,	// ADDIKC
    1073742742U,	// ADDK
    1073743006U,	// ADDKC
    1610615276U,	// ADJCALLSTACKDOWN
    2147486207U,	// ADJCALLSTACKUP
    1207960547U,	// AGET
    1140851980U,	// AGETD
    1073742005U,	// AND
    1107297042U,	// ANDI
    1073742786U,	// ANDN
    1107297691U,	// ANDNI
    1207960613U,	// APUT
    1140852035U,	// APUTD
    1140851045U,	// BEQ
    1140851375U,	// BEQD
    1140851540U,	// BEQI
    1140851936U,	// BEQID
    1140850891U,	// BGE
    1140851298U,	// BGED
    1140851485U,	// BGEI
    1140851892U,	// BGEID
    1140851144U,	// BGT
    1140851408U,	// BGTD
    1140851562U,	// BGTI
    1140851947U,	// BGTID
    1140850902U,	// BLE
    1140851309U,	// BLED
    1140851496U,	// BLEI
    1140851903U,	// BLEID
    1140851155U,	// BLT
    1140851419U,	// BLTD
    1140851573U,	// BLTI
    1140851958U,	// BLTID
    1140850913U,	// BNE
    1140851320U,	// BNED
    1140851507U,	// BNEI
    1140851914U,	// BNEID
    1610612807U,	// BR
    1610612851U,	// BRA
    1610613313U,	// BRAD
    1610613500U,	// BRAI
    1610613929U,	// BRAID
    1140851969U,	// BRALD
    1140852409U,	// BRALID
    1610612928U,	// BRD
    1610612994U,	// BRI
    1610613390U,	// BRID
    1140850990U,	// BRK
    1140851518U,	// BRKI
    1140851364U,	// BRLD
    1140851925U,	// BRLID
    1140851925U,	// BRLID32
    1073742753U,	// BSLL
    1073743237U,	// BSLLI
    1073742368U,	// BSRA
    1073743215U,	// BSRAI
    1073742764U,	// BSRL
    1073743248U,	// BSRLI
    1207961020U,	// CAGET
    1140852420U,	// CAGETD
    1207961141U,	// CAPUT
    1140852530U,	// CAPUTD
    2850U,	// CAS32
    1207960558U,	// CGET
    1140851991U,	// CGETD
    1140852835U,	// CLZ
    1073742170U,	// CMP
    1073742929U,	// CMPU
    1207960624U,	// CPUT
    1140852046U,	// CPUTD
    2712U,	// DMEMBAR
    1207961031U,	// EAGET
    1140852431U,	// EAGETD
    1207961523U,	// ECAGET
    1140852854U,	// ECAGETD
    1207961064U,	// ECGET
    1140852464U,	// ECGETD
    1207960569U,	// EGET
    1140852002U,	// EGETD
    1073742423U,	// FADD
    1073744188U,	// FCMP_EQ
    1073744144U,	// FCMP_GE
    1073744254U,	// FCMP_GT
    1073744155U,	// FCMP_LE
    1073744265U,	// FCMP_LT
    1073744166U,	// FCMP_NE
    1073744177U,	// FCMP_UN
    1073742940U,	// FDIV
    1140851738U,	// FINT
    1140851166U,	// FLT
    1073742775U,	// FMUL
    1073742093U,	// FORI
    1342178429U,	// FRSUB
    1140852266U,	// FSQRT
    1207959997U,	// GET
    1140851397U,	// GETD
    1342178407U,	// IDIV
    1342178946U,	// IDIVU
    2703U,	// IDMEMBAR
    2721U,	// IMEMBAR
    1610613071U,	// IMM
    2769U,	// LAA32
    2791U,	// LAD32
    2813U,	// LAN32
    2893U,	// LAO32
    2747U,	// LAS32
    2914U,	// LAX32
    1476395508U,	// LBU
    1476395904U,	// LBUI
    1476395981U,	// LBUR
    1476395519U,	// LHU
    1476395915U,	// LHUI
    1476395992U,	// LHUR
    1476395101U,	// LW
    1476395009U,	// LWF
    1476395055U,	// LWFI
    1476395288U,	// LWI
    1476395409U,	// LWR
    1476395530U,	// LWX
    2876U,	// MEMBARRIER
    1140851111U,	// MFS
    1140852648U,	// MSRCLR
    1140852769U,	// MSRSET
    1140851122U,	// MTS
    1073742148U,	// MUL
    1073742577U,	// MULH
    1073743960U,	// MULHSU
    1073743479U,	// MULHU
    1073742665U,	// MULI
    1207961042U,	// NAGET
    1140852442U,	// NAGETD
    1207961152U,	// NAPUT
    1140852541U,	// NAPUTD
    1207961534U,	// NCAGET
    1140852865U,	// NCAGETD
    1207961644U,	// NCAPUT
    1140852964U,	// NCAPUTD
    1207961075U,	// NCGET
    1140852475U,	// NCGETD
    1207961174U,	// NCPUT
    1140852563U,	// NCPUTD
    1207961556U,	// NEAGET
    1140852887U,	// NEAGETD
    1207961927U,	// NECAGET
    1140853151U,	// NECAGETD
    1207961589U,	// NECGET
    1140852920U,	// NECGETD
    1207961097U,	// NEGET
    1140852497U,	// NEGETD
    1207960580U,	// NGET
    1140852013U,	// NGETD
    1941U,	// NOP
    1207960635U,	// NPUT
    1140852057U,	// NPUTD
    1073741906U,	// OR
    1107296525U,	// ORI
    1107296525U,	// ORI32
    1073743743U,	// PCMPBF
    1073743773U,	// PCMPEQ
    1073743732U,	// PCMPNE
    1207960041U,	// PUT
    1140851430U,	// PUTD
    1342177835U,	// RSUB
    1342178440U,	// RSUBC
    1342178682U,	// RSUBI
    1342178968U,	// RSUBIC
    1342179210U,	// RSUBIK
    1342179435U,	// RSUBIKC
    1342178726U,	// RSUBK
    1342178979U,	// RSUBKC
    1140851276U,	// RTBD
    1140851331U,	// RTED
    1140851353U,	// RTID
    1140851386U,	// RTSD
    1476395033U,	// SB
    1476395244U,	// SBI
    1476395376U,	// SBR
    1140852365U,	// SEXT16
    1140851826U,	// SEXT8
    1476395044U,	// SH
    1476395255U,	// SHI
    1476395387U,	// SHR
    1140850814U,	// SRA
    1140850847U,	// SRC
    1140851001U,	// SRL
    1476395112U,	// SW
    1476395021U,	// SWF
    1476395067U,	// SWFI
    1476395299U,	// SWI
    2836U,	// SWP32
    1476395420U,	// SWR
    1476395541U,	// SWX
    2648U,	// Select_CC
    2627U,	// Select_FCC
    2686U,	// ShiftL
    2609U,	// ShiftRA
    2668U,	// ShiftRL
    1207961053U,	// TAGET
    1140852453U,	// TAGETD
    3221227083U,	// TAPUT
    1610614600U,	// TAPUTD
    1207961545U,	// TCAGET
    1140852876U,	// TCAGETD
    3221227575U,	// TCAPUT
    1610615023U,	// TCAPUTD
    1207961086U,	// TCGET
    1140852486U,	// TCGETD
    3221227105U,	// TCPUT
    1610614622U,	// TCPUTD
    1207961567U,	// TEAGET
    1140852898U,	// TEAGETD
    1207961938U,	// TECAGET
    1140853162U,	// TECAGETD
    1207961600U,	// TECGET
    1140852931U,	// TECGETD
    1207961108U,	// TEGET
    1140852508U,	// TEGETD
    1207960591U,	// TGET
    1140852024U,	// TGETD
    1207961578U,	// TNAGET
    1140852909U,	// TNAGETD
    3221227586U,	// TNAPUT
    1610615034U,	// TNAPUTD
    1207961949U,	// TNCAGET
    1140853173U,	// TNCAGETD
    3221227924U,	// TNCAPUT
    1610615254U,	// TNCAPUTD
    1207961611U,	// TNCGET
    1140852942U,	// TNCGETD
    3221227597U,	// TNCPUT
    1610615045U,	// TNCPUTD
    1207961960U,	// TNEAGET
    1140853184U,	// TNEAGETD
    1207962081U,	// TNECAGET
    1140853264U,	// TNECAGETD
    1207961971U,	// TNECGET
    1140853195U,	// TNECGETD
    1207961622U,	// TNEGET
    1140852953U,	// TNEGETD
    1207961119U,	// TNGET
    1140852519U,	// TNGETD
    3221227116U,	// TNPUT
    1610614633U,	// TNPUTD
    3221226566U,	// TPUT
    1610614116U,	// TPUTD
    1140850825U,	// WDC
    1140853286U,	// WDCC
    1140853275U,	// WDCF
    1140850836U,	// WIC
    1073742214U,	// XOR
    1107297119U,	// XORI
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'w', 32, 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 12 */ 's', 'w', 32, 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 24 */ 's', 'b', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 35 */ 's', 'h', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 46 */ 'l', 'w', 'i', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 58 */ 's', 'w', 'i', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 70 */ 'b', 'r', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 81 */ 'o', 'r', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 92 */ 'l', 'w', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 103 */ 's', 'w', 32, 32, 32, 32, 32, 32, 32, 32, 0,
  /* 114 */ 'b', 'r', 'a', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 125 */ 's', 'r', 'a', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 136 */ 'w', 'd', 'c', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 147 */ 'w', 'i', 'c', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 158 */ 's', 'r', 'c', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 169 */ 'a', 'd', 'd', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 180 */ 'a', 'n', 'd', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 191 */ 'b', 'r', 'd', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 202 */ 'b', 'g', 'e', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 213 */ 'b', 'l', 'e', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 224 */ 'b', 'n', 'e', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 235 */ 's', 'b', 'i', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 246 */ 's', 'h', 'i', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 257 */ 'b', 'r', 'i', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 268 */ 'o', 'r', 'i', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 279 */ 'l', 'w', 'i', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 290 */ 's', 'w', 'i', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 301 */ 'b', 'r', 'k', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 312 */ 's', 'r', 'l', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 323 */ 'm', 'u', 'l', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 334 */ 'i', 'm', 'm', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 345 */ 'c', 'm', 'p', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 356 */ 'b', 'e', 'q', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 367 */ 's', 'b', 'r', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 378 */ 's', 'h', 'r', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 389 */ 'x', 'o', 'r', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 400 */ 'l', 'w', 'r', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 411 */ 's', 'w', 'r', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 422 */ 'm', 'f', 's', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 433 */ 'm', 't', 's', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 444 */ 'g', 'e', 't', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 455 */ 'b', 'g', 't', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 466 */ 'b', 'l', 't', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 477 */ 'f', 'l', 't', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 488 */ 'p', 'u', 't', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 499 */ 'l', 'b', 'u', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 510 */ 'l', 'h', 'u', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 521 */ 'l', 'w', 'x', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 532 */ 's', 'w', 'x', 32, 32, 32, 32, 32, 32, 32, 0,
  /* 543 */ 'b', 's', 'r', 'a', 32, 32, 32, 32, 32, 32, 0,
  /* 554 */ 'r', 's', 'u', 'b', 32, 32, 32, 32, 32, 32, 0,
  /* 565 */ 'a', 'd', 'd', 'c', 32, 32, 32, 32, 32, 32, 0,
  /* 576 */ 'b', 'r', 'a', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 587 */ 'r', 't', 'b', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 598 */ 'f', 'a', 'd', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 609 */ 'b', 'g', 'e', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 620 */ 'b', 'l', 'e', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 631 */ 'b', 'n', 'e', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 642 */ 'r', 't', 'e', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 653 */ 'b', 'r', 'i', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 664 */ 'r', 't', 'i', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 675 */ 'b', 'r', 'l', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 686 */ 'b', 'e', 'q', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 697 */ 'r', 't', 's', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 708 */ 'g', 'e', 't', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 719 */ 'b', 'g', 't', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 730 */ 'b', 'l', 't', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 741 */ 'p', 'u', 't', 'd', 32, 32, 32, 32, 32, 32, 0,
  /* 752 */ 'm', 'u', 'l', 'h', 32, 32, 32, 32, 32, 32, 0,
  /* 763 */ 'b', 'r', 'a', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 774 */ 'a', 'd', 'd', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 785 */ 'a', 'n', 'd', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 796 */ 'b', 'g', 'e', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 807 */ 'b', 'l', 'e', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 818 */ 'b', 'n', 'e', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 829 */ 'b', 'r', 'k', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 840 */ 'm', 'u', 'l', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 851 */ 'b', 'e', 'q', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 862 */ 'x', 'o', 'r', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 873 */ 'b', 'g', 't', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 884 */ 'b', 'l', 't', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 895 */ 'l', 'b', 'u', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 906 */ 'l', 'h', 'u', 'i', 32, 32, 32, 32, 32, 32, 0,
  /* 917 */ 'a', 'd', 'd', 'k', 32, 32, 32, 32, 32, 32, 0,
  /* 928 */ 'b', 's', 'l', 'l', 32, 32, 32, 32, 32, 32, 0,
  /* 939 */ 'b', 's', 'r', 'l', 32, 32, 32, 32, 32, 32, 0,
  /* 950 */ 'f', 'm', 'u', 'l', 32, 32, 32, 32, 32, 32, 0,
  /* 961 */ 'a', 'n', 'd', 'n', 32, 32, 32, 32, 32, 32, 0,
  /* 972 */ 'l', 'b', 'u', 'r', 32, 32, 32, 32, 32, 32, 0,
  /* 983 */ 'l', 'h', 'u', 'r', 32, 32, 32, 32, 32, 32, 0,
  /* 994 */ 'a', 'g', 'e', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1005 */ 'c', 'g', 'e', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1016 */ 'e', 'g', 'e', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1027 */ 'n', 'g', 'e', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1038 */ 't', 'g', 'e', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1049 */ 'f', 'i', 'n', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1060 */ 'a', 'p', 'u', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1071 */ 'c', 'p', 'u', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1082 */ 'n', 'p', 'u', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1093 */ 't', 'p', 'u', 't', 32, 32, 32, 32, 32, 32, 0,
  /* 1104 */ 'c', 'm', 'p', 'u', 32, 32, 32, 32, 32, 32, 0,
  /* 1115 */ 'f', 'd', 'i', 'v', 32, 32, 32, 32, 32, 32, 0,
  /* 1126 */ 'i', 'd', 'i', 'v', 32, 32, 32, 32, 32, 32, 0,
  /* 1137 */ 's', 'e', 'x', 't', '8', 32, 32, 32, 32, 32, 0,
  /* 1148 */ 'f', 'r', 's', 'u', 'b', 32, 32, 32, 32, 32, 0,
  /* 1159 */ 'r', 's', 'u', 'b', 'c', 32, 32, 32, 32, 32, 0,
  /* 1170 */ 'a', 'd', 'd', 'i', 'c', 32, 32, 32, 32, 32, 0,
  /* 1181 */ 'a', 'd', 'd', 'k', 'c', 32, 32, 32, 32, 32, 0,
  /* 1192 */ 'b', 'r', 'a', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1203 */ 'b', 'g', 'e', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1214 */ 'b', 'l', 'e', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1225 */ 'b', 'n', 'e', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1236 */ 'b', 'r', 'l', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1247 */ 'b', 'e', 'q', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1258 */ 'b', 'g', 't', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1269 */ 'b', 'l', 't', 'i', 'd', 32, 32, 32, 32, 32, 0,
  /* 1280 */ 'b', 'r', 'a', 'l', 'd', 32, 32, 32, 32, 32, 0,
  /* 1291 */ 'a', 'g', 'e', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1302 */ 'c', 'g', 'e', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1313 */ 'e', 'g', 'e', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1324 */ 'n', 'g', 'e', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1335 */ 't', 'g', 'e', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1346 */ 'a', 'p', 'u', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1357 */ 'c', 'p', 'u', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1368 */ 'n', 'p', 'u', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1379 */ 't', 'p', 'u', 't', 'd', 32, 32, 32, 32, 32, 0,
  /* 1390 */ 'b', 's', 'r', 'a', 'i', 32, 32, 32, 32, 32, 0,
  /* 1401 */ 'r', 's', 'u', 'b', 'i', 32, 32, 32, 32, 32, 0,
  /* 1412 */ 'b', 's', 'l', 'l', 'i', 32, 32, 32, 32, 32, 0,
  /* 1423 */ 'b', 's', 'r', 'l', 'i', 32, 32, 32, 32, 32, 0,
  /* 1434 */ 'a', 'n', 'd', 'n', 'i', 32, 32, 32, 32, 32, 0,
  /* 1445 */ 'r', 's', 'u', 'b', 'k', 32, 32, 32, 32, 32, 0,
  /* 1456 */ 'a', 'd', 'd', 'i', 'k', 32, 32, 32, 32, 32, 0,
  /* 1467 */ 'c', 'a', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1478 */ 'e', 'a', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1489 */ 'n', 'a', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1500 */ 't', 'a', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1511 */ 'e', 'c', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1522 */ 'n', 'c', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1533 */ 't', 'c', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1544 */ 'n', 'e', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1555 */ 't', 'e', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1566 */ 't', 'n', 'g', 'e', 't', 32, 32, 32, 32, 32, 0,
  /* 1577 */ 'f', 's', 'q', 'r', 't', 32, 32, 32, 32, 32, 0,
  /* 1588 */ 'c', 'a', 'p', 'u', 't', 32, 32, 32, 32, 32, 0,
  /* 1599 */ 'n', 'a', 'p', 'u', 't', 32, 32, 32, 32, 32, 0,
  /* 1610 */ 't', 'a', 'p', 'u', 't', 32, 32, 32, 32, 32, 0,
  /* 1621 */ 'n', 'c', 'p', 'u', 't', 32, 32, 32, 32, 32, 0,
  /* 1632 */ 't', 'c', 'p', 'u', 't', 32, 32, 32, 32, 32, 0,
  /* 1643 */ 't', 'n', 'p', 'u', 't', 32, 32, 32, 32, 32, 0,
  /* 1654 */ 'm', 'u', 'l', 'h', 'u', 32, 32, 32, 32, 32, 0,
  /* 1665 */ 'i', 'd', 'i', 'v', 'u', 32, 32, 32, 32, 32, 0,
  /* 1676 */ 's', 'e', 'x', 't', '1', '6', 32, 32, 32, 32, 0,
  /* 1687 */ 'r', 's', 'u', 'b', 'i', 'c', 32, 32, 32, 32, 0,
  /* 1698 */ 'r', 's', 'u', 'b', 'k', 'c', 32, 32, 32, 32, 0,
  /* 1709 */ 'a', 'd', 'd', 'i', 'k', 'c', 32, 32, 32, 32, 0,
  /* 1720 */ 'b', 'r', 'a', 'l', 'i', 'd', 32, 32, 32, 32, 0,
  /* 1731 */ 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1742 */ 'e', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1753 */ 'n', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1764 */ 't', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1775 */ 'e', 'c', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1786 */ 'n', 'c', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1797 */ 't', 'c', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1808 */ 'n', 'e', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1819 */ 't', 'e', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1830 */ 't', 'n', 'g', 'e', 't', 'd', 32, 32, 32, 32, 0,
  /* 1841 */ 'c', 'a', 'p', 'u', 't', 'd', 32, 32, 32, 32, 0,
  /* 1852 */ 'n', 'a', 'p', 'u', 't', 'd', 32, 32, 32, 32, 0,
  /* 1863 */ 't', 'a', 'p', 'u', 't', 'd', 32, 32, 32, 32, 0,
  /* 1874 */ 'n', 'c', 'p', 'u', 't', 'd', 32, 32, 32, 32, 0,
  /* 1885 */ 't', 'c', 'p', 'u', 't', 'd', 32, 32, 32, 32, 0,
  /* 1896 */ 't', 'n', 'p', 'u', 't', 'd', 32, 32, 32, 32, 0,
  /* 1907 */ 'p', 'c', 'm', 'p', 'n', 'e', 32, 32, 32, 32, 0,
  /* 1918 */ 'p', 'c', 'm', 'p', 'b', 'f', 32, 32, 32, 32, 0,
  /* 1929 */ 'r', 's', 'u', 'b', 'i', 'k', 32, 32, 32, 32, 0,
  /* 1940 */ 'n', 'o', 'p', 32, 32, 32, 32, 0,
  /* 1948 */ 'p', 'c', 'm', 'p', 'e', 'q', 32, 32, 32, 32, 0,
  /* 1959 */ 'm', 's', 'r', 'c', 'l', 'r', 32, 32, 32, 32, 0,
  /* 1970 */ 'e', 'c', 'a', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 1981 */ 'n', 'c', 'a', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 1992 */ 't', 'c', 'a', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2003 */ 'n', 'e', 'a', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2014 */ 't', 'e', 'a', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2025 */ 't', 'n', 'a', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2036 */ 'n', 'e', 'c', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2047 */ 't', 'e', 'c', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2058 */ 't', 'n', 'c', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2069 */ 't', 'n', 'e', 'g', 'e', 't', 32, 32, 32, 32, 0,
  /* 2080 */ 'm', 's', 'r', 's', 'e', 't', 32, 32, 32, 32, 0,
  /* 2091 */ 'n', 'c', 'a', 'p', 'u', 't', 32, 32, 32, 32, 0,
  /* 2102 */ 't', 'c', 'a', 'p', 'u', 't', 32, 32, 32, 32, 0,
  /* 2113 */ 't', 'n', 'a', 'p', 'u', 't', 32, 32, 32, 32, 0,
  /* 2124 */ 't', 'n', 'c', 'p', 'u', 't', 32, 32, 32, 32, 0,
  /* 2135 */ 'm', 'u', 'l', 'h', 's', 'u', 32, 32, 32, 32, 0,
  /* 2146 */ 'c', 'l', 'z', 32, 32, 32, 32, 0,
  /* 2154 */ 'r', 's', 'u', 'b', 'i', 'k', 'c', 32, 32, 32, 0,
  /* 2165 */ 'e', 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2176 */ 'n', 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2187 */ 't', 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2198 */ 'n', 'e', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2209 */ 't', 'e', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2220 */ 't', 'n', 'a', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2231 */ 'n', 'e', 'c', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2242 */ 't', 'e', 'c', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2253 */ 't', 'n', 'c', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2264 */ 't', 'n', 'e', 'g', 'e', 't', 'd', 32, 32, 32, 0,
  /* 2275 */ 'n', 'c', 'a', 'p', 'u', 't', 'd', 32, 32, 32, 0,
  /* 2286 */ 't', 'c', 'a', 'p', 'u', 't', 'd', 32, 32, 32, 0,
  /* 2297 */ 't', 'n', 'a', 'p', 'u', 't', 'd', 32, 32, 32, 0,
  /* 2308 */ 't', 'n', 'c', 'p', 'u', 't', 'd', 32, 32, 32, 0,
  /* 2319 */ 'f', 'c', 'm', 'p', '.', 'g', 'e', 32, 32, 32, 0,
  /* 2330 */ 'f', 'c', 'm', 'p', '.', 'l', 'e', 32, 32, 32, 0,
  /* 2341 */ 'f', 'c', 'm', 'p', '.', 'n', 'e', 32, 32, 32, 0,
  /* 2352 */ 'f', 'c', 'm', 'p', '.', 'u', 'n', 32, 32, 32, 0,
  /* 2363 */ 'f', 'c', 'm', 'p', '.', 'e', 'q', 32, 32, 32, 0,
  /* 2374 */ 'n', 'e', 'c', 'a', 'g', 'e', 't', 32, 32, 32, 0,
  /* 2385 */ 't', 'e', 'c', 'a', 'g', 'e', 't', 32, 32, 32, 0,
  /* 2396 */ 't', 'n', 'c', 'a', 'g', 'e', 't', 32, 32, 32, 0,
  /* 2407 */ 't', 'n', 'e', 'a', 'g', 'e', 't', 32, 32, 32, 0,
  /* 2418 */ 't', 'n', 'e', 'c', 'g', 'e', 't', 32, 32, 32, 0,
  /* 2429 */ 'f', 'c', 'm', 'p', '.', 'g', 't', 32, 32, 32, 0,
  /* 2440 */ 'f', 'c', 'm', 'p', '.', 'l', 't', 32, 32, 32, 0,
  /* 2451 */ 't', 'n', 'c', 'a', 'p', 'u', 't', 32, 32, 32, 0,
  /* 2462 */ 'n', 'e', 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 0,
  /* 2473 */ 't', 'e', 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 0,
  /* 2484 */ 't', 'n', 'c', 'a', 'g', 'e', 't', 'd', 32, 32, 0,
  /* 2495 */ 't', 'n', 'e', 'a', 'g', 'e', 't', 'd', 32, 32, 0,
  /* 2506 */ 't', 'n', 'e', 'c', 'g', 'e', 't', 'd', 32, 32, 0,
  /* 2517 */ 't', 'n', 'c', 'a', 'p', 'u', 't', 'd', 32, 32, 0,
  /* 2528 */ 't', 'n', 'e', 'c', 'a', 'g', 'e', 't', 32, 32, 0,
  /* 2539 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 2558 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2575 */ 't', 'n', 'e', 'c', 'a', 'g', 'e', 't', 'd', 32, 0,
  /* 2586 */ 'w', 'd', 'c', '.', 'f', 'l', 'u', 's', 'h', 32, 0,
  /* 2597 */ 'w', 'd', 'c', '.', 'c', 'l', 'e', 'a', 'r', 32, 0,
  /* 2608 */ ';', 32, 'S', 'h', 'i', 'f', 't', 'R', 'A', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2626 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2647 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2667 */ ';', 32, 'S', 'h', 'i', 'f', 't', 'R', 'L', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2685 */ ';', 32, 'S', 'h', 'i', 'f', 't', 'L', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 2702 */ 'm', 'b', 'a', 'r', 32, 32, 32, '0', 0,
  /* 2711 */ 'm', 'b', 'a', 'r', 32, 32, 32, '1', 0,
  /* 2720 */ 'm', 'b', 'a', 'r', 32, 32, 32, '2', 0,
  /* 2729 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2736 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2746 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'l', 'o', 'a', 'd', 32, 'a', 'n', 'd', 32, 's', 'u', 'b', 0,
  /* 2768 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'l', 'o', 'a', 'd', 32, 'a', 'n', 'd', 32, 'a', 'd', 'd', 0,
  /* 2790 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'l', 'o', 'a', 'd', 32, 'a', 'n', 'd', 32, 'a', 'n', 'd', 0,
  /* 2812 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'l', 'o', 'a', 'd', 32, 'a', 'n', 'd', 32, 'n', 'a', 'n', 'd', 0,
  /* 2835 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 's', 'w', 'a', 'p', 0,
  /* 2849 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'c', 'o', 'm', 'p', 'a', 'r', 'e', 32, 'a', 'n', 'd', 32, 's', 'w', 'a', 'p', 0,
  /* 2875 */ '#', 32, 'm', 'e', 'm', 'o', 'r', 'y', 32, 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 2892 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'l', 'o', 'a', 'd', 32, 'a', 'n', 'd', 32, 'o', 'r', 0,
  /* 2913 */ '#', 32, 'a', 't', 'o', 'm', 'i', 'c', 32, 'l', 'o', 'a', 'd', 32, 'a', 'n', 'd', 32, 'x', 'o', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 30) & 3) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, CAS32, DMEMBAR, IDMEMBAR, IMEMBAR, LAA32, LAD32, LA...
    return;
    break;
  case 1:
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIK32, ADDIKC, ADDK, ADDKC, ADJCALLST...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKUP
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 3:
    // TAPUT, TCAPUT, TCPUT, TNAPUT, TNCAPUT, TNCPUT, TNPUT, TPUT
    printFSLImm(MI, 0, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 29) & 1) {
    // ADJCALLSTACKDOWN, BR, BRA, BRAD, BRAI, BRAID, BRD, BRI, BRID, IMM, TAP...
    return;
  } else {
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIK32, ADDIKC, ADDK, ADDKC, AGET, AGE...
    O << ", "; 
  }


  // Fragment 2 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 27) & 3) {
  default:   // unreachable.
  case 0:
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIK32, ADDIKC, ADDK, ADDKC, AGETD, AN...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // AGET, APUT, CAGET, CAPUT, CGET, CPUT, EAGET, ECAGET, ECGET, EGET, GET,...
    printFSLImm(MI, 1, O); 
    return;
    break;
  case 2:
    // FRSUB, IDIV, IDIVU, RSUB, RSUBC, RSUBI, RSUBIC, RSUBIK, RSUBIKC, RSUBK...
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 3:
    // LBU, LBUI, LBUR, LHU, LHUI, LHUR, LW, LWF, LWFI, LWI, LWR, LWX, SB, SB...
    printMemOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 26) & 1) {
    // AGETD, APUTD, BEQ, BEQD, BEQI, BEQID, BGE, BGED, BGEI, BGEID, BGT, BGT...
    return;
  } else {
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIK32, ADDIKC, ADDK, ADDKC, AND, ANDI...
    O << ", "; 
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 25) & 1) {
    // ANDI, ANDNI, ORI, ORI32, XORI
    printUnsignedImm(MI, 2, O); 
    return;
  } else {
    // ADD, ADDC, ADDI, ADDIC, ADDIK, ADDIK32, ADDIKC, ADDK, ADDKC, AND, ANDN...
    printOperand(MI, 2, O); 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MBlazeInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 59 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'r', 'p', 'v', 'r', '1', '0', 0,
  /* 7 */ 'r', '2', '0', 0,
  /* 11 */ 'r', '3', '0', 0,
  /* 15 */ 'r', 'p', 'v', 'r', '0', 0,
  /* 21 */ 'r', 'p', 'v', 'r', '1', '1', 0,
  /* 28 */ 'r', '2', '1', 0,
  /* 32 */ 'r', '3', '1', 0,
  /* 36 */ 'r', 'p', 'v', 'r', '1', 0,
  /* 42 */ 'r', '1', '2', 0,
  /* 46 */ 'r', '2', '2', 0,
  /* 50 */ 'r', 'p', 'v', 'r', '2', 0,
  /* 56 */ 'r', '1', '3', 0,
  /* 60 */ 'r', '2', '3', 0,
  /* 64 */ 'r', 'p', 'v', 'r', '3', 0,
  /* 70 */ 'r', '1', '4', 0,
  /* 74 */ 'r', '2', '4', 0,
  /* 78 */ 'r', 'p', 'v', 'r', '4', 0,
  /* 84 */ 'r', '1', '5', 0,
  /* 88 */ 'r', '2', '5', 0,
  /* 92 */ 'r', 'p', 'v', 'r', '5', 0,
  /* 98 */ 'r', '1', '6', 0,
  /* 102 */ 'r', '2', '6', 0,
  /* 106 */ 'r', 'p', 'v', 'r', '6', 0,
  /* 112 */ 'r', '1', '7', 0,
  /* 116 */ 'r', '2', '7', 0,
  /* 120 */ 'r', 'p', 'v', 'r', '7', 0,
  /* 126 */ 'r', '1', '8', 0,
  /* 130 */ 'r', '2', '8', 0,
  /* 134 */ 'r', 'p', 'v', 'r', '8', 0,
  /* 140 */ 'r', '1', '9', 0,
  /* 144 */ 'r', '2', '9', 0,
  /* 148 */ 'r', 'p', 'v', 'r', '9', 0,
  /* 154 */ 'r', 'm', 's', 'r', '[', 'c', ']', 0,
  /* 162 */ 'r', 'p', 'c', 0,
  /* 166 */ 'r', 'p', 'i', 'd', 0,
  /* 171 */ 'r', 't', 'l', 'b', 'h', 'i', 0,
  /* 178 */ 'r', 't', 'l', 'b', 'l', 'o', 0,
  /* 185 */ 'r', 'e', 'a', 'r', 0,
  /* 190 */ 'r', 'e', 'd', 'r', 0,
  /* 195 */ 'r', 'z', 'p', 'r', 0,
  /* 200 */ 'r', 'e', 's', 'r', 0,
  /* 205 */ 'r', 'f', 's', 'r', 0,
  /* 210 */ 'r', 'm', 's', 'r', 0,
  /* 215 */ 'r', 'b', 't', 'r', 0,
  /* 220 */ 'r', 't', 'l', 'b', 'x', 0,
  /* 226 */ 'r', 't', 'l', 'b', 's', 'x', 0,
  };

  static const unsigned RegAsmOffset[] = {
    154, 18, 39, 53, 67, 81, 95, 109, 123, 137, 151, 3, 24, 42, 
    56, 70, 84, 98, 112, 126, 140, 7, 28, 46, 60, 74, 88, 102, 
    116, 130, 144, 11, 32, 215, 185, 190, 200, 205, 210, 162, 166, 15, 
    36, 50, 64, 78, 92, 106, 120, 134, 148, 0, 21, 171, 178, 226, 
    220, 195, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MBlazeInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
