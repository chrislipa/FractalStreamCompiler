//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    563U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    556U,	// BUNDLE
    0U,	// ABS
    134218579U,	// ADCri
    134218579U,	// ADCrr
    268436307U,	// ADCrsi
    402654035U,	// ADCrsr
    0U,	// ADDSri
    0U,	// ADDSrr
    0U,	// ADDSrsi
    0U,	// ADDSrsr
    134218640U,	// ADDri
    134218640U,	// ADDrr
    268436368U,	// ADDrsi
    402654096U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    536872489U,	// ADR
    0U,	// ANDCCri
    0U,	// ANDCCrr
    0U,	// ANDCCrsi
    0U,	// ANDCCrsr
    134218699U,	// ANDri
    134218699U,	// ANDrr
    268436427U,	// ANDrsi
    402654155U,	// ANDrsr
    136316503U,	// ASRi
    136316503U,	// ASRr
    0U,	// ATOMADD6432
    0U,	// ATOMAND6432
    0U,	// ATOMCMPXCHG6432
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATOMNAND6432
    0U,	// ATOMOR6432
    0U,	// ATOMSUB6432
    0U,	// ATOMSWAP6432
    0U,	// ATOMXOR6432
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    671089499U,	// BFC
    805307524U,	// BFI
    134218592U,	// BICri
    134218592U,	// BICrr
    268436320U,	// BICrsi
    402654048U,	// BICrsr
    939525932U,	// BKPT
    1077936259U,	// BL
    1077936306U,	// BLX
    939526188U,	// BLX_pred
    1077936306U,	// BLXi
    939525337U,	// BL_pred
    0U,	// BMOVPCB_CALL
    0U,	// BMOVPCRX_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    1077936302U,	// BX
    939525274U,	// BXJ
    0U,	// BX_CALL
    1214253025U,	// BX_RET
    939526113U,	// BX_pred
    939524755U,	// Bcc
    1342211568U,	// CDP
    1484849178U,	// CDP2
    2070U,	// CLREX
    536873041U,	// CLZ
    536872342U,	// CMNzri
    536872342U,	// CMNzrr
    671090070U,	// CMNzrsi
    805307798U,	// CMNzrsr
    536872442U,	// CMPri
    536872442U,	// CMPrr
    671090170U,	// CMPrsi
    805307898U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    1077936279U,	// CPS1p
    1610712737U,	// CPS2p
    1610712737U,	// CPS3p
    939525153U,	// DBG
    1744830537U,	// DMB
    1744830542U,	// DSB
    0U,	// EORCCri
    0U,	// EORCCrr
    0U,	// EORCCrsi
    0U,	// EORCCrsr
    134219333U,	// EORri
    134219333U,	// EORrr
    268437061U,	// EORrsi
    402654789U,	// EORrsr
    547489693U,	// FCONSTD
    549586845U,	// FCONSTS
    1222641317U,	// FMSTAT
    1744830547U,	// ISB
    1881311002U,	// ITasm
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_dispatchsetup_nofp
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    1493368949U,	// LDC2L_OFFSET
    1493401717U,	// LDC2L_OPTION
    1493401717U,	// LDC2L_POST
    1493368949U,	// LDC2L_PRE
    1493368833U,	// LDC2_OFFSET
    1493401601U,	// LDC2_OPTION
    1493401601U,	// LDC2_POST
    1493368833U,	// LDC2_PRE
    805340386U,	// LDCL_OFFSET
    805340386U,	// LDCL_OPTION
    805340386U,	// LDCL_POST
    805340386U,	// LDCL_PRE
    805339991U,	// LDC_OFFSET
    805339991U,	// LDC_OPTION
    805339991U,	// LDC_POST
    805339991U,	// LDC_PRE
    939524674U,	// LDMDA
    537133634U,	// LDMDA_UPD
    939524796U,	// LDMDB
    537133756U,	// LDMDB_UPD
    939525477U,	// LDMIA
    0U,	// LDMIA_RET
    537134437U,	// LDMIA_UPD
    939524815U,	// LDMIB
    537133775U,	// LDMIB_UPD
    2013267687U,	// LDRBT_POST_IMM
    2013267687U,	// LDRBT_POST_REG
    2013266656U,	// LDRB_POST_IMM
    2013266656U,	// LDRB_POST_REG
    805307104U,	// LDRB_PRE_IMM
    2013266656U,	// LDRB_PRE_REG
    671089376U,	// LDRBi12
    805307104U,	// LDRBrs
    2013266895U,	// LDRD
    1342178255U,	// LDRD_POST
    1342178255U,	// LDRD_PRE
    536872976U,	// LDREX
    536871745U,	// LDREXB
    671089637U,	// LDREXD
    536872054U,	// LDREXH
    805307473U,	// LDRH
    805308165U,	// LDRHTi
    2013267717U,	// LDRHTr
    2013267025U,	// LDRH_POST
    2013267025U,	// LDRH_PRE
    805307114U,	// LDRSB
    805308147U,	// LDRSBTi
    2013267699U,	// LDRSBTr
    2013266666U,	// LDRSB_POST
    2013266666U,	// LDRSB_PRE
    805307483U,	// LDRSH
    805308177U,	// LDRSHTi
    2013267729U,	// LDRSHTr
    2013267035U,	// LDRSH_POST
    2013267035U,	// LDRSH_PRE
    2013267761U,	// LDRT_POST_IMM
    2013267761U,	// LDRT_POST_REG
    2013267502U,	// LDR_POST_IMM
    2013267502U,	// LDR_POST_REG
    805307950U,	// LDR_PRE_IMM
    2013267502U,	// LDR_PRE_REG
    671090222U,	// LDRcp
    671090222U,	// LDRi12
    805307950U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    136316228U,	// LSLi
    136316228U,	// LSLr
    136316510U,	// LSRi
    136316510U,	// LSRr
    1342211621U,	// MCR
    1485078560U,	// MCR2
    2013300301U,	// MCRR
    1485078566U,	// MCRR2
    268436074U,	// MLA
    0U,	// MLAv5
    805308036U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    1226835870U,	// MOVPCLR
    0U,	// MOVPCRX
    671090535U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_dyn
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    2147485598U,	// MOVi
    536872883U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    2147485598U,	// MOVr
    2147485598U,	// MOVr_TC
    134219678U,	// MOVsi
    268437406U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    1342505832U,	// MRC
    2281701383U,	// MRC2
    2013299564U,	// MRRC
    1485078541U,	// MRRC2
    939525798U,	// MRS
    939525798U,	// MRSsys
    537232995U,	// MSR
    537232995U,	// MSRi
    134219088U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    2147485146U,	// MVNi
    2147485146U,	// MVNr
    134219226U,	// MVNsi
    268436954U,	// MVNsr
    1212155390U,	// NOP
    0U,	// ORRCCri
    0U,	// ORRCCrr
    0U,	// ORRCCrsi
    0U,	// ORRCCrsr
    134219347U,	// ORRri
    134219347U,	// ORRrr
    268437075U,	// ORRrsi
    402654803U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    805308114U,	// PKHBT
    805307127U,	// PKHTB
    2415919272U,	// PLDWi12
    2550137000U,	// PLDWrs
    2415919203U,	// PLDi12
    2550136931U,	// PLDrs
    2415919216U,	// PLIi12
    2550136944U,	// PLIrs
    671089576U,	// QADD
    671089075U,	// QADD16
    671089178U,	// QADD8
    671090753U,	// QASX
    671089550U,	// QDADD
    671089436U,	// QDSUB
    671090640U,	// QSAX
    671089449U,	// QSUB
    671089037U,	// QSUB16
    671089139U,	// QSUB8
    536872728U,	// RBIT
    536872838U,	// REV
    536871383U,	// REV16
    536872038U,	// REVSH
    1077936173U,	// RFEDA
    1094713389U,	// RFEDA_UPD
    1077936187U,	// RFEDB
    1094713403U,	// RFEDB_UPD
    1077936180U,	// RFEIA
    1094713396U,	// RFEIA_UPD
    1077936194U,	// RFEIB
    1094713410U,	// RFEIB_UPD
    136316489U,	// RORi
    136316489U,	// RORr
    0U,	// RRX
    2149582896U,	// RRXi
    0U,	// RSBSri
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    134218476U,	// RSBri
    134218476U,	// RSBrr
    268436204U,	// RSBrsi
    402653932U,	// RSBrsr
    134218609U,	// RSCri
    134218609U,	// RSCrr
    268436337U,	// RSCrsi
    402654065U,	// RSCrsr
    671089082U,	// SADD16
    671089184U,	// SADD8
    671090758U,	// SASX
    134218575U,	// SBCri
    134218575U,	// SBCrr
    268436303U,	// SBCrsi
    402654031U,	// SBCrsr
    805308450U,	// SBFX
    671089919U,	// SEL
    2684354664U,	// SETEND
    1212155786U,	// SEV
    671089058U,	// SHADD16
    671089163U,	// SHADD8
    671090740U,	// SHASX
    671090627U,	// SHSAX
    671089020U,	// SHSUB16
    671089124U,	// SHSUB8
    939524964U,	// SMC
    805307035U,	// SMLABB
    805308107U,	// SMLABT
    805307261U,	// SMLAD
    805308388U,	// SMLADX
    268436677U,	// SMLAL
    805307042U,	// SMLALBB
    805308120U,	// SMLALBT
    805307314U,	// SMLALD
    805308402U,	// SMLALDX
    805307133U,	// SMLALTB
    805308237U,	// SMLALTT
    0U,	// SMLALv5
    805307120U,	// SMLATB
    805308230U,	// SMLATT
    805307187U,	// SMLAWB
    805308268U,	// SMLAWT
    805307353U,	// SMLSD
    805308418U,	// SMLSDX
    805307331U,	// SMLSLD
    805308410U,	// SMLSLDX
    805306984U,	// SMMLA
    805307934U,	// SMMLAR
    805308034U,	// SMMLS
    805307995U,	// SMMLSR
    671089998U,	// SMMUL
    671090237U,	// SMMULR
    671089539U,	// SMUAD
    671090667U,	// SMUADX
    671089322U,	// SMULBB
    671090400U,	// SMULBT
    268436777U,	// SMULL
    0U,	// SMULLv5
    671089413U,	// SMULTB
    671090517U,	// SMULTT
    671089466U,	// SMULWB
    671090547U,	// SMULWT
    671089631U,	// SMUSD
    671090697U,	// SMUSDX
    1077936370U,	// SRSDA
    1077936322U,	// SRSDA_UPD
    1077936392U,	// SRSDB
    1077936346U,	// SRSDB_UPD
    1077936381U,	// SRSIA
    1077936334U,	// SRSIA_UPD
    1077936403U,	// SRSIB
    1077936358U,	// SRSIB_UPD
    805308097U,	// SSAT
    671089096U,	// SSAT16
    671090645U,	// SSAX
    671089044U,	// SSUB16
    671089145U,	// SSUB8
    1493368956U,	// STC2L_OFFSET
    1493401724U,	// STC2L_OPTION
    1493401724U,	// STC2L_POST
    1493368956U,	// STC2L_PRE
    1493368852U,	// STC2_OFFSET
    1493401620U,	// STC2_OPTION
    1493401620U,	// STC2_POST
    1493368852U,	// STC2_PRE
    805340391U,	// STCL_OFFSET
    805340391U,	// STCL_OPTION
    805340391U,	// STCL_POST
    805340391U,	// STCL_PRE
    805340021U,	// STC_OFFSET
    805340021U,	// STC_OPTION
    805340021U,	// STC_POST
    805340021U,	// STC_PRE
    939524680U,	// STMDA
    537133640U,	// STMDA_UPD
    939524803U,	// STMDB
    537133763U,	// STMDB_UPD
    939525481U,	// STMIA
    537134441U,	// STMIA_UPD
    939524821U,	// STMIB
    537133781U,	// STMIB_UPD
    2013529837U,	// STRBT_POST_IMM
    2013529837U,	// STRBT_POST_REG
    2013528805U,	// STRB_POST_IMM
    2013528805U,	// STRB_POST_REG
    805569253U,	// STRB_PRE_IMM
    2013528805U,	// STRB_PRE_REG
    671089381U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    805307109U,	// STRBrs
    2013266900U,	// STRD
    1342440404U,	// STRD_POST
    1342440404U,	// STRD_PRE
    671090716U,	// STREX
    671089480U,	// STREXB
    805307372U,	// STREXD
    671089789U,	// STREXH
    805307478U,	// STRH
    805570315U,	// STRHTi
    2013529867U,	// STRHTr
    2013529174U,	// STRH_POST
    2013529174U,	// STRH_PRE
    0U,	// STRH_preidx
    2013529916U,	// STRT_POST_IMM
    2013529916U,	// STRT_POST_REG
    2013529704U,	// STR_POST_IMM
    2013529704U,	// STR_POST_REG
    805570152U,	// STR_PRE_IMM
    2013529704U,	// STR_PRE_REG
    671090280U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    805308008U,	// STRrs
    0U,	// SUBSri
    0U,	// SUBSrr
    0U,	// SUBSrsi
    0U,	// SUBSrsr
    134218526U,	// SUBri
    134218526U,	// SUBrr
    268436254U,	// SUBrsi
    402653982U,	// SUBrsr
    939524985U,	// SVC
    671090188U,	// SWP
    671089371U,	// SWPB
    805307023U,	// SXTAB
    805306718U,	// SXTAB16
    805307440U,	// SXTAH
    671089426U,	// SXTB
    671089006U,	// SXTB16
    671089772U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPr
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    536872474U,	// TEQri
    536872474U,	// TEQrr
    671090202U,	// TEQrsi
    805307930U,	// TEQrsr
    0U,	// TPsoft
    1515U,	// TRAP
    536872770U,	// TSTri
    536872770U,	// TSTrr
    671090498U,	// TSTrsi
    805308226U,	// TSTrsr
    671089089U,	// UADD16
    671089190U,	// UADD8
    671090763U,	// UASX
    805308455U,	// UBFX
    671089066U,	// UHADD16
    671089170U,	// UHADD8
    671090746U,	// UHASX
    671090633U,	// UHSAX
    671089028U,	// UHSUB16
    671089131U,	// UHSUB8
    805307562U,	// UMAAL
    0U,	// UMAALv5
    268436683U,	// UMLAL
    0U,	// UMLALv5
    268436783U,	// UMULL
    0U,	// UMULLv5
    671089074U,	// UQADD16
    671089177U,	// UQADD8
    671090752U,	// UQASX
    671090639U,	// UQSAX
    671089036U,	// UQSUB16
    671089138U,	// UQSUB8
    671089157U,	// USAD8
    805306845U,	// USADA8
    805308102U,	// USAT
    671089103U,	// USAT16
    671090650U,	// USAX
    671089051U,	// USUB16
    671089151U,	// USUB8
    805307029U,	// UXTAB
    805306726U,	// UXTAB16
    805307446U,	// UXTAH
    671089431U,	// UXTB
    671089013U,	// UXTB16
    671089777U,	// UXTH
    828671152U,	// VABALsv2i64
    830768304U,	// VABALsv4i32
    832865456U,	// VABALsv8i16
    834962608U,	// VABALuv2i64
    837059760U,	// VABALuv4i32
    839156912U,	// VABALuv8i16
    832864829U,	// VABAsv16i8
    828670525U,	// VABAsv2i32
    830767677U,	// VABAsv4i16
    828670525U,	// VABAsv4i32
    830767677U,	// VABAsv8i16
    832864829U,	// VABAsv8i8
    839156285U,	// VABAuv16i8
    834961981U,	// VABAuv2i32
    837059133U,	// VABAuv4i16
    834961981U,	// VABAuv4i32
    837059133U,	// VABAuv8i16
    839156285U,	// VABAuv8i8
    694420716U,	// VABDLsv2i64
    696517868U,	// VABDLsv4i32
    698615020U,	// VABDLsv8i16
    700712172U,	// VABDLuv2i64
    702809324U,	// VABDLuv4i32
    704906476U,	// VABDLuv8i16
    683803529U,	// VABDfd
    683803529U,	// VABDfq
    698614665U,	// VABDsv16i8
    694420361U,	// VABDsv2i32
    696517513U,	// VABDsv4i16
    694420361U,	// VABDsv4i32
    696517513U,	// VABDsv8i16
    698614665U,	// VABDsv8i8
    704906121U,	// VABDuv16i8
    700711817U,	// VABDuv2i32
    702808969U,	// VABDuv4i16
    700711817U,	// VABDuv4i32
    702808969U,	// VABDuv8i16
    704906121U,	// VABDuv8i8
    547489400U,	// VABSD
    549586552U,	// VABSS
    549586552U,	// VABSfd
    549586552U,	// VABSfq
    564397688U,	// VABSv16i8
    560203384U,	// VABSv2i32
    562300536U,	// VABSv4i16
    560203384U,	// VABSv4i32
    562300536U,	// VABSv8i16
    564397688U,	// VABSv8i8
    683803639U,	// VACGEd
    683803639U,	// VACGEq
    683804410U,	// VACGTd
    683804410U,	// VACGTq
    681706413U,	// VADDD
    707003780U,	// VADDHNv2i32
    709100932U,	// VADDHNv4i16
    711198084U,	// VADDHNv8i8
    694420729U,	// VADDLsv2i64
    696517881U,	// VADDLsv4i32
    698615033U,	// VADDLsv8i16
    700712185U,	// VADDLuv2i64
    702809337U,	// VADDLuv4i32
    704906489U,	// VADDLuv8i16
    683803565U,	// VADDS
    694421416U,	// VADDWsv2i64
    696518568U,	// VADDWsv4i32
    698615720U,	// VADDWsv8i16
    700712872U,	// VADDWuv2i64
    702810024U,	// VADDWuv4i32
    704907176U,	// VADDWuv8i16
    683803565U,	// VADDfd
    683803565U,	// VADDfq
    713294765U,	// VADDv16i8
    707003309U,	// VADDv1i64
    709100461U,	// VADDv2i32
    707003309U,	// VADDv2i64
    711197613U,	// VADDv4i16
    709100461U,	// VADDv4i32
    711197613U,	// VADDv8i16
    713294765U,	// VADDv8i8
    671089610U,	// VANDd
    671089610U,	// VANDq
    671089503U,	// VBICd
    709231455U,	// VBICiv2i32
    711328607U,	// VBICiv4i16
    709231455U,	// VBICiv4i32
    711328607U,	// VBICiv8i16
    671089503U,	// VBICq
    805307420U,	// VBIFd
    805307420U,	// VBIFq
    805308189U,	// VBITd
    805308189U,	// VBITq
    805307707U,	// VBSLd
    805307707U,	// VBSLq
    683804181U,	// VCEQfd
    683804181U,	// VCEQfq
    713295381U,	// VCEQv16i8
    709101077U,	// VCEQv2i32
    711198229U,	// VCEQv4i16
    709101077U,	// VCEQv4i32
    711198229U,	// VCEQv8i16
    713295381U,	// VCEQv8i8
    579077653U,	// VCEQzv16i8
    549586453U,	// VCEQzv2f32
    574883349U,	// VCEQzv2i32
    549586453U,	// VCEQzv4f32
    576980501U,	// VCEQzv4i16
    574883349U,	// VCEQzv4i32
    576980501U,	// VCEQzv8i16
    579077653U,	// VCEQzv8i8
    683803645U,	// VCGEfd
    683803645U,	// VCGEfq
    698614781U,	// VCGEsv16i8
    694420477U,	// VCGEsv2i32
    696517629U,	// VCGEsv4i16
    694420477U,	// VCGEsv4i32
    696517629U,	// VCGEsv8i16
    698614781U,	// VCGEsv8i8
    704906237U,	// VCGEuv16i8
    700711933U,	// VCGEuv2i32
    702809085U,	// VCGEuv4i16
    700711933U,	// VCGEuv4i32
    702809085U,	// VCGEuv8i16
    704906237U,	// VCGEuv8i8
    564397053U,	// VCGEzv16i8
    549585917U,	// VCGEzv2f32
    560202749U,	// VCGEzv2i32
    549585917U,	// VCGEzv4f32
    562299901U,	// VCGEzv4i16
    560202749U,	// VCGEzv4i32
    562299901U,	// VCGEzv8i16
    564397053U,	// VCGEzv8i8
    683804416U,	// VCGTfd
    683804416U,	// VCGTfq
    698615552U,	// VCGTsv16i8
    694421248U,	// VCGTsv2i32
    696518400U,	// VCGTsv4i16
    694421248U,	// VCGTsv4i32
    696518400U,	// VCGTsv8i16
    698615552U,	// VCGTsv8i8
    704907008U,	// VCGTuv16i8
    700712704U,	// VCGTuv2i32
    702809856U,	// VCGTuv4i16
    700712704U,	// VCGTuv4i32
    702809856U,	// VCGTuv8i16
    704907008U,	// VCGTuv8i8
    564397824U,	// VCGTzv16i8
    549586688U,	// VCGTzv2f32
    560203520U,	// VCGTzv2i32
    549586688U,	// VCGTzv4f32
    562300672U,	// VCGTzv4i16
    560203520U,	// VCGTzv4i32
    562300672U,	// VCGTzv8i16
    564397824U,	// VCGTzv8i8
    564397058U,	// VCLEzv16i8
    549585922U,	// VCLEzv2f32
    560202754U,	// VCLEzv2i32
    549585922U,	// VCLEzv4f32
    562299906U,	// VCLEzv4i16
    560202754U,	// VCLEzv4i32
    562299906U,	// VCLEzv8i16
    564397058U,	// VCLEzv8i8
    564397693U,	// VCLSv16i8
    560203389U,	// VCLSv2i32
    562300541U,	// VCLSv4i16
    560203389U,	// VCLSv4i32
    562300541U,	// VCLSv8i16
    564397693U,	// VCLSv8i8
    564397858U,	// VCLTzv16i8
    549586722U,	// VCLTzv2f32
    560203554U,	// VCLTzv2i32
    549586722U,	// VCLTzv4f32
    562300706U,	// VCLTzv4i16
    560203554U,	// VCLTzv4i32
    562300706U,	// VCLTzv8i16
    564397858U,	// VCLTzv8i8
    579078224U,	// VCLZv16i8
    574883920U,	// VCLZv2i32
    576981072U,	// VCLZv4i16
    574883920U,	// VCLZv4i32
    576981072U,	// VCLZv8i16
    579078224U,	// VCLZv8i8
    547489273U,	// VCMPD
    547488782U,	// VCMPED
    549585934U,	// VCMPES
    950436878U,	// VCMPEZD
    952534030U,	// VCMPEZS
    549586425U,	// VCMPS
    950437369U,	// VCMPZD
    952534521U,	// VCMPZS
    580912935U,	// VCNTd
    580912935U,	// VCNTq
    583009036U,	// VCVTBHS
    585106188U,	// VCVTBSH
    587204450U,	// VCVTDS
    589301602U,	// VCVTSD
    583010140U,	// VCVTTHS
    585107292U,	// VCVTTSH
    583010146U,	// VCVTf2h
    591857506U,	// VCVTf2sd
    591857506U,	// VCVTf2sq
    593954658U,	// VCVTf2ud
    593954658U,	// VCVTf2uq
    725747554U,	// VCVTf2xsd
    725747554U,	// VCVTf2xsq
    727844706U,	// VCVTf2xud
    727844706U,	// VCVTf2xuq
    585107298U,	// VCVTh2f
    596051810U,	// VCVTs2fd
    596051810U,	// VCVTs2fq
    598148962U,	// VCVTu2fd
    598148962U,	// VCVTu2fq
    729941858U,	// VCVTxs2fd
    729941858U,	// VCVTxs2fq
    732039010U,	// VCVTxu2fd
    732039010U,	// VCVTxu2fq
    681707416U,	// VDIVD
    683804568U,	// VDIVS
    599787014U,	// VDUP16d
    599787014U,	// VDUP16q
    601884166U,	// VDUP32d
    601884166U,	// VDUP32q
    580912646U,	// VDUP8d
    580912646U,	// VDUP8q
    734004742U,	// VDUPLN16d
    734004742U,	// VDUPLN16q
    736101894U,	// VDUPLN32d
    736101894U,	// VDUPLN32q
    715130374U,	// VDUPLN8d
    715130374U,	// VDUPLN8q
    0U,	// VDUPfdf
    0U,	// VDUPfqf
    671090244U,	// VEORd
    671090244U,	// VEORq
    868222842U,	// VEXTd16
    870319994U,	// VEXTd32
    849348474U,	// VEXTd8
    868222842U,	// VEXTq16
    870319994U,	// VEXTq32
    872417146U,	// VEXTq64
    849348474U,	// VEXTq8
    815923833U,	// VFMAD
    818020985U,	// VFMAS
    818020985U,	// VFMAfd
    818020985U,	// VFMAfq
    815924883U,	// VFMSD
    818022035U,	// VFMSS
    818022035U,	// VFMSfd
    818022035U,	// VFMSfq
    815923838U,	// VFNMAD
    818020990U,	// VFNMAS
    815924888U,	// VFNMSD
    818022040U,	// VFNMSS
    736102301U,	// VGETLNi32
    696518557U,	// VGETLNs16
    698615709U,	// VGETLNs8
    702810013U,	// VGETLNu16
    704907165U,	// VGETLNu8
    698614683U,	// VHADDsv16i8
    694420379U,	// VHADDsv2i32
    696517531U,	// VHADDsv4i16
    694420379U,	// VHADDsv4i32
    696517531U,	// VHADDsv8i16
    698614683U,	// VHADDsv8i8
    704906139U,	// VHADDuv16i8
    700711835U,	// VHADDuv2i32
    702808987U,	// VHADDuv4i16
    700711835U,	// VHADDuv4i32
    702808987U,	// VHADDuv8i16
    704906139U,	// VHADDuv8i8
    698614562U,	// VHSUBsv16i8
    694420258U,	// VHSUBsv2i32
    696517410U,	// VHSUBsv4i16
    694420258U,	// VHSUBsv4i32
    696517410U,	// VHSUBsv8i16
    698614562U,	// VHSUBsv8i8
    704906018U,	// VHSUBuv16i8
    700711714U,	// VHSUBuv2i32
    702808866U,	// VHSUBuv4i16
    700711714U,	// VHSUBuv4i32
    702808866U,	// VHSUBuv8i16
    704906018U,	// VHSUBuv8i8
    734495006U,	// VLD1DUPd16
    868712734U,	// VLD1DUPd16wb_fixed
    2076672286U,	// VLD1DUPd16wb_register
    736592158U,	// VLD1DUPd32
    870809886U,	// VLD1DUPd32wb_fixed
    2078769438U,	// VLD1DUPd32wb_register
    715620638U,	// VLD1DUPd8
    849838366U,	// VLD1DUPd8wb_fixed
    2057797918U,	// VLD1DUPd8wb_register
    734527774U,	// VLD1DUPq16
    868745502U,	// VLD1DUPq16wb_fixed
    2076705054U,	// VLD1DUPq16wb_register
    736624926U,	// VLD1DUPq32
    870842654U,	// VLD1DUPq32wb_fixed
    2078802206U,	// VLD1DUPq32wb_register
    715653406U,	// VLD1DUPq8
    849871134U,	// VLD1DUPq8wb_fixed
    2057830686U,	// VLD1DUPq8wb_register
    2082472222U,	// VLD1LNd16
    2887778590U,	// VLD1LNd16_UPD
    2084569374U,	// VLD1LNd32
    2889875742U,	// VLD1LNd32_UPD
    2086666526U,	// VLD1LNd8
    2891972894U,	// VLD1LNd8_UPD
    868221214U,	// VLD1LNdAsm_16
    870318366U,	// VLD1LNdAsm_32
    849346846U,	// VLD1LNdAsm_8
    868221214U,	// VLD1LNdWB_fixed_Asm_16
    870318366U,	// VLD1LNdWB_fixed_Asm_32
    849346846U,	// VLD1LNdWB_fixed_Asm_8
    2076180766U,	// VLD1LNdWB_register_Asm_16
    2078277918U,	// VLD1LNdWB_register_Asm_32
    2057306398U,	// VLD1LNdWB_register_Asm_8
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    734560542U,	// VLD1d16
    734593310U,	// VLD1d16Q
    868811038U,	// VLD1d16Qwb_fixed
    2076770590U,	// VLD1d16Qwb_register
    734626078U,	// VLD1d16T
    868843806U,	// VLD1d16Twb_fixed
    2076803358U,	// VLD1d16Twb_register
    868778270U,	// VLD1d16wb_fixed
    2076737822U,	// VLD1d16wb_register
    736657694U,	// VLD1d32
    736690462U,	// VLD1d32Q
    870908190U,	// VLD1d32Qwb_fixed
    2078867742U,	// VLD1d32Qwb_register
    736723230U,	// VLD1d32T
    870940958U,	// VLD1d32Twb_fixed
    2078900510U,	// VLD1d32Twb_register
    870875422U,	// VLD1d32wb_fixed
    2078834974U,	// VLD1d32wb_register
    738754846U,	// VLD1d64
    738787614U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    873005342U,	// VLD1d64Qwb_fixed
    2080964894U,	// VLD1d64Qwb_register
    738820382U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    873038110U,	// VLD1d64Twb_fixed
    2080997662U,	// VLD1d64Twb_register
    872972574U,	// VLD1d64wb_fixed
    2080932126U,	// VLD1d64wb_register
    715686174U,	// VLD1d8
    715718942U,	// VLD1d8Q
    849936670U,	// VLD1d8Qwb_fixed
    2057896222U,	// VLD1d8Qwb_register
    715751710U,	// VLD1d8T
    849969438U,	// VLD1d8Twb_fixed
    2057928990U,	// VLD1d8Twb_register
    849903902U,	// VLD1d8wb_fixed
    2057863454U,	// VLD1d8wb_register
    734658846U,	// VLD1q16
    868876574U,	// VLD1q16wb_fixed
    2076836126U,	// VLD1q16wb_register
    736755998U,	// VLD1q32
    870973726U,	// VLD1q32wb_fixed
    2078933278U,	// VLD1q32wb_register
    738853150U,	// VLD1q64
    873070878U,	// VLD1q64wb_fixed
    2081030430U,	// VLD1q64wb_register
    715784478U,	// VLD1q8
    850002206U,	// VLD1q8wb_fixed
    2057961758U,	// VLD1q8wb_register
    734527801U,	// VLD2DUPd16
    868745529U,	// VLD2DUPd16wb_fixed
    2076705081U,	// VLD2DUPd16wb_register
    734691641U,	// VLD2DUPd16x2
    868909369U,	// VLD2DUPd16x2wb_fixed
    2076868921U,	// VLD2DUPd16x2wb_register
    736624953U,	// VLD2DUPd32
    870842681U,	// VLD2DUPd32wb_fixed
    2078802233U,	// VLD2DUPd32wb_register
    736788793U,	// VLD2DUPd32x2
    871006521U,	// VLD2DUPd32x2wb_fixed
    2078966073U,	// VLD2DUPd32x2wb_register
    715653433U,	// VLD2DUPd8
    849871161U,	// VLD2DUPd8wb_fixed
    2057830713U,	// VLD2DUPd8wb_register
    715817273U,	// VLD2DUPd8x2
    850035001U,	// VLD2DUPd8x2wb_fixed
    2057994553U,	// VLD2DUPd8x2wb_register
    2887778617U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    3021996345U,	// VLD2LNd16_UPD
    2889875769U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    3024093497U,	// VLD2LNd32_UPD
    2891972921U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    3026190649U,	// VLD2LNd8_UPD
    868221241U,	// VLD2LNdAsm_16
    870318393U,	// VLD2LNdAsm_32
    849346873U,	// VLD2LNdAsm_8
    868221241U,	// VLD2LNdWB_fixed_Asm_16
    870318393U,	// VLD2LNdWB_fixed_Asm_32
    849346873U,	// VLD2LNdWB_fixed_Asm_8
    2076180793U,	// VLD2LNdWB_register_Asm_16
    2078277945U,	// VLD2LNdWB_register_Asm_32
    2057306425U,	// VLD2LNdWB_register_Asm_8
    2887778617U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    3021996345U,	// VLD2LNq16_UPD
    2889875769U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    3024093497U,	// VLD2LNq32_UPD
    868221241U,	// VLD2LNqAsm_16
    870318393U,	// VLD2LNqAsm_32
    868221241U,	// VLD2LNqWB_fixed_Asm_16
    870318393U,	// VLD2LNqWB_fixed_Asm_32
    2076180793U,	// VLD2LNqWB_register_Asm_16
    2078277945U,	// VLD2LNqWB_register_Asm_32
    734724409U,	// VLD2b16
    868942137U,	// VLD2b16wb_fixed
    2076901689U,	// VLD2b16wb_register
    736821561U,	// VLD2b32
    871039289U,	// VLD2b32wb_fixed
    2078998841U,	// VLD2b32wb_register
    715850041U,	// VLD2b8
    850067769U,	// VLD2b8wb_fixed
    2058027321U,	// VLD2b8wb_register
    734658873U,	// VLD2d16
    868876601U,	// VLD2d16wb_fixed
    2076836153U,	// VLD2d16wb_register
    736756025U,	// VLD2d32
    870973753U,	// VLD2d32wb_fixed
    2078933305U,	// VLD2d32wb_register
    715784505U,	// VLD2d8
    850002233U,	// VLD2d8wb_fixed
    2057961785U,	// VLD2d8wb_register
    734593337U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16PseudoWB_fixed
    0U,	// VLD2q16PseudoWB_register
    868811065U,	// VLD2q16wb_fixed
    2076770617U,	// VLD2q16wb_register
    736690489U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32PseudoWB_fixed
    0U,	// VLD2q32PseudoWB_register
    870908217U,	// VLD2q32wb_fixed
    2078867769U,	// VLD2q32wb_register
    715718969U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8PseudoWB_fixed
    0U,	// VLD2q8PseudoWB_register
    849936697U,	// VLD2q8wb_fixed
    2057896249U,	// VLD2q8wb_register
    2082472259U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    2887778627U,	// VLD3DUPd16_UPD
    2084569411U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    2889875779U,	// VLD3DUPd32_UPD
    2086666563U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    2891972931U,	// VLD3DUPd8_UPD
    734757187U,	// VLD3DUPdAsm_16
    736854339U,	// VLD3DUPdAsm_32
    715882819U,	// VLD3DUPdAsm_8
    734757187U,	// VLD3DUPdWB_fixed_Asm_16
    736854339U,	// VLD3DUPdWB_fixed_Asm_32
    715882819U,	// VLD3DUPdWB_fixed_Asm_8
    868974915U,	// VLD3DUPdWB_register_Asm_16
    871072067U,	// VLD3DUPdWB_register_Asm_32
    850100547U,	// VLD3DUPdWB_register_Asm_8
    2082472259U,	// VLD3DUPq16
    2887778627U,	// VLD3DUPq16_UPD
    2084569411U,	// VLD3DUPq32
    2889875779U,	// VLD3DUPq32_UPD
    2086666563U,	// VLD3DUPq8
    2891972931U,	// VLD3DUPq8_UPD
    734789955U,	// VLD3DUPqAsm_16
    736887107U,	// VLD3DUPqAsm_32
    715915587U,	// VLD3DUPqAsm_8
    734789955U,	// VLD3DUPqWB_fixed_Asm_16
    736887107U,	// VLD3DUPqWB_fixed_Asm_32
    715915587U,	// VLD3DUPqWB_fixed_Asm_8
    869007683U,	// VLD3DUPqWB_register_Asm_16
    871104835U,	// VLD3DUPqWB_register_Asm_32
    850133315U,	// VLD3DUPqWB_register_Asm_8
    3021996355U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    3156214083U,	// VLD3LNd16_UPD
    3024093507U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    3158311235U,	// VLD3LNd32_UPD
    3026190659U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    3160408387U,	// VLD3LNd8_UPD
    868221251U,	// VLD3LNdAsm_16
    870318403U,	// VLD3LNdAsm_32
    849346883U,	// VLD3LNdAsm_8
    868221251U,	// VLD3LNdWB_fixed_Asm_16
    870318403U,	// VLD3LNdWB_fixed_Asm_32
    849346883U,	// VLD3LNdWB_fixed_Asm_8
    2076180803U,	// VLD3LNdWB_register_Asm_16
    2078277955U,	// VLD3LNdWB_register_Asm_32
    2057306435U,	// VLD3LNdWB_register_Asm_8
    3021996355U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    3156214083U,	// VLD3LNq16_UPD
    3024093507U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    3158311235U,	// VLD3LNq32_UPD
    868221251U,	// VLD3LNqAsm_16
    870318403U,	// VLD3LNqAsm_32
    868221251U,	// VLD3LNqWB_fixed_Asm_16
    870318403U,	// VLD3LNqWB_fixed_Asm_32
    2076180803U,	// VLD3LNqWB_register_Asm_16
    2078277955U,	// VLD3LNqWB_register_Asm_32
    2082472259U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    2887778627U,	// VLD3d16_UPD
    2084569411U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    2889875779U,	// VLD3d32_UPD
    2086666563U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    2891972931U,	// VLD3d8_UPD
    734626115U,	// VLD3dAsm_16
    736723267U,	// VLD3dAsm_32
    715751747U,	// VLD3dAsm_8
    734626115U,	// VLD3dWB_fixed_Asm_16
    736723267U,	// VLD3dWB_fixed_Asm_32
    715751747U,	// VLD3dWB_fixed_Asm_8
    868843843U,	// VLD3dWB_register_Asm_16
    870940995U,	// VLD3dWB_register_Asm_32
    849969475U,	// VLD3dWB_register_Asm_8
    2082472259U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    2887778627U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    2084569411U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    2889875779U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    2086666563U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    2891972931U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    734822723U,	// VLD3qAsm_16
    736919875U,	// VLD3qAsm_32
    715948355U,	// VLD3qAsm_8
    734822723U,	// VLD3qWB_fixed_Asm_16
    736919875U,	// VLD3qWB_fixed_Asm_32
    715948355U,	// VLD3qWB_fixed_Asm_8
    869040451U,	// VLD3qWB_register_Asm_16
    871137603U,	// VLD3qWB_register_Asm_32
    850166083U,	// VLD3qWB_register_Asm_8
    1411383636U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    3290431828U,	// VLD4DUPd16_UPD
    1413480788U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    3292528980U,	// VLD4DUPd32_UPD
    1415577940U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    3294626132U,	// VLD4DUPd8_UPD
    734855508U,	// VLD4DUPdAsm_16
    736952660U,	// VLD4DUPdAsm_32
    715981140U,	// VLD4DUPdAsm_8
    734855508U,	// VLD4DUPdWB_fixed_Asm_16
    736952660U,	// VLD4DUPdWB_fixed_Asm_32
    715981140U,	// VLD4DUPdWB_fixed_Asm_8
    869073236U,	// VLD4DUPdWB_register_Asm_16
    871170388U,	// VLD4DUPdWB_register_Asm_32
    850198868U,	// VLD4DUPdWB_register_Asm_8
    1411383636U,	// VLD4DUPq16
    3290431828U,	// VLD4DUPq16_UPD
    1413480788U,	// VLD4DUPq32
    3292528980U,	// VLD4DUPq32_UPD
    1415577940U,	// VLD4DUPq8
    3294626132U,	// VLD4DUPq8_UPD
    734888276U,	// VLD4DUPqAsm_16
    736985428U,	// VLD4DUPqAsm_32
    716013908U,	// VLD4DUPqAsm_8
    734888276U,	// VLD4DUPqWB_fixed_Asm_16
    736985428U,	// VLD4DUPqWB_fixed_Asm_32
    716013908U,	// VLD4DUPqWB_fixed_Asm_8
    869106004U,	// VLD4DUPqWB_register_Asm_16
    871203156U,	// VLD4DUPqWB_register_Asm_32
    850231636U,	// VLD4DUPqWB_register_Asm_8
    3156214100U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    3424649556U,	// VLD4LNd16_UPD
    3158311252U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    3426746708U,	// VLD4LNd32_UPD
    3160408404U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    3428843860U,	// VLD4LNd8_UPD
    868221268U,	// VLD4LNdAsm_16
    870318420U,	// VLD4LNdAsm_32
    849346900U,	// VLD4LNdAsm_8
    868221268U,	// VLD4LNdWB_fixed_Asm_16
    870318420U,	// VLD4LNdWB_fixed_Asm_32
    849346900U,	// VLD4LNdWB_fixed_Asm_8
    2076180820U,	// VLD4LNdWB_register_Asm_16
    2078277972U,	// VLD4LNdWB_register_Asm_32
    2057306452U,	// VLD4LNdWB_register_Asm_8
    3156214100U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    3424649556U,	// VLD4LNq16_UPD
    3158311252U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    3426746708U,	// VLD4LNq32_UPD
    868221268U,	// VLD4LNqAsm_16
    870318420U,	// VLD4LNqAsm_32
    868221268U,	// VLD4LNqWB_fixed_Asm_16
    870318420U,	// VLD4LNqWB_fixed_Asm_32
    2076180820U,	// VLD4LNqWB_register_Asm_16
    2078277972U,	// VLD4LNqWB_register_Asm_32
    1411383636U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    3290431828U,	// VLD4d16_UPD
    1413480788U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    3292528980U,	// VLD4d32_UPD
    1415577940U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    3294626132U,	// VLD4d8_UPD
    734593364U,	// VLD4dAsm_16
    736690516U,	// VLD4dAsm_32
    715718996U,	// VLD4dAsm_8
    734593364U,	// VLD4dWB_fixed_Asm_16
    736690516U,	// VLD4dWB_fixed_Asm_32
    715718996U,	// VLD4dWB_fixed_Asm_8
    868811092U,	// VLD4dWB_register_Asm_16
    870908244U,	// VLD4dWB_register_Asm_32
    849936724U,	// VLD4dWB_register_Asm_8
    1411383636U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    3290431828U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    1413480788U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    3292528980U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    1415577940U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    3294626132U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    734921044U,	// VLD4qAsm_16
    737018196U,	// VLD4qAsm_32
    716046676U,	// VLD4qAsm_8
    734921044U,	// VLD4qWB_fixed_Asm_16
    737018196U,	// VLD4qWB_fixed_Asm_32
    716046676U,	// VLD4qWB_fixed_Asm_8
    869138772U,	// VLD4qWB_register_Asm_16
    871235924U,	// VLD4qWB_register_Asm_32
    850264404U,	// VLD4qWB_register_Asm_8
    537133755U,	// VLDMDDB_UPD
    939524692U,	// VLDMDIA
    537133652U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    537133755U,	// VLDMSDB_UPD
    939524692U,	// VLDMSIA
    537133652U,	// VLDMSIA_UPD
    671090221U,	// VLDRD
    671090221U,	// VLDRS
    683804606U,	// VMAXfd
    683804606U,	// VMAXfq
    698615742U,	// VMAXsv16i8
    694421438U,	// VMAXsv2i32
    696518590U,	// VMAXsv4i16
    694421438U,	// VMAXsv4i32
    696518590U,	// VMAXsv8i16
    698615742U,	// VMAXsv8i8
    704907198U,	// VMAXuv16i8
    700712894U,	// VMAXuv2i32
    702810046U,	// VMAXuv4i16
    700712894U,	// VMAXuv4i32
    702810046U,	// VMAXuv8i16
    704907198U,	// VMAXuv8i8
    683804049U,	// VMINfd
    683804049U,	// VMINfq
    698615185U,	// VMINsv16i8
    694420881U,	// VMINsv2i32
    696518033U,	// VMINsv4i16
    694420881U,	// VMINsv4i32
    696518033U,	// VMINsv8i16
    698615185U,	// VMINsv8i8
    704906641U,	// VMINuv16i8
    700712337U,	// VMINuv2i32
    702809489U,	// VMINuv4i16
    700712337U,	// VMINuv4i32
    702809489U,	// VMINuv8i16
    704906641U,	// VMINuv8i8
    815923828U,	// VMLAD
    2036630737U,	// VMLALslsv2i32
    2038727889U,	// VMLALslsv4i16
    2042922193U,	// VMLALsluv2i32
    2045019345U,	// VMLALsluv4i16
    828671185U,	// VMLALsv2i64
    830768337U,	// VMLALsv4i32
    832865489U,	// VMLALsv8i16
    834962641U,	// VMLALuv2i64
    837059793U,	// VMLALuv4i32
    839156945U,	// VMLALuv8i16
    818020980U,	// VMLAS
    818020980U,	// VMLAfd
    818020980U,	// VMLAfq
    2025980532U,	// VMLAslfd
    2025980532U,	// VMLAslfq
    2051310196U,	// VMLAslv2i32
    2053407348U,	// VMLAslv4i16
    2051310196U,	// VMLAslv4i32
    2053407348U,	// VMLAslv8i16
    847544948U,	// VMLAv16i8
    843350644U,	// VMLAv2i32
    845447796U,	// VMLAv4i16
    843350644U,	// VMLAv4i32
    845447796U,	// VMLAv8i16
    847544948U,	// VMLAv8i8
    815924878U,	// VMLSD
    2036630856U,	// VMLSLslsv2i32
    2038728008U,	// VMLSLslsv4i16
    2042922312U,	// VMLSLsluv2i32
    2045019464U,	// VMLSLsluv4i16
    828671304U,	// VMLSLsv2i64
    830768456U,	// VMLSLsv4i32
    832865608U,	// VMLSLsv8i16
    834962760U,	// VMLSLuv2i64
    837059912U,	// VMLSLuv4i32
    839157064U,	// VMLSLuv8i16
    818022030U,	// VMLSS
    818022030U,	// VMLSfd
    818022030U,	// VMLSfq
    2025981582U,	// VMLSslfd
    2025981582U,	// VMLSslfq
    2051311246U,	// VMLSslv2i32
    2053408398U,	// VMLSslv4i16
    2051311246U,	// VMLSslv4i32
    2053408398U,	// VMLSslv8i16
    847545998U,	// VMLSv16i8
    843351694U,	// VMLSv2i32
    845448846U,	// VMLSv4i16
    843351694U,	// VMLSv4i32
    845448846U,	// VMLSv8i16
    847545998U,	// VMLSv8i8
    547489693U,	// VMOVD
    671090589U,	// VMOVDRR
    0U,	// VMOVDcc
    560203103U,	// VMOVLsv2i64
    562300255U,	// VMOVLsv4i32
    564397407U,	// VMOVLsv8i16
    566494559U,	// VMOVLuv2i64
    568591711U,	// VMOVLuv4i32
    570688863U,	// VMOVLuv8i16
    572786149U,	// VMOVNv2i32
    574883301U,	// VMOVNv4i16
    576980453U,	// VMOVNv8i8
    671090589U,	// VMOVRRD
    805308317U,	// VMOVRRS
    536872861U,	// VMOVRS
    549586845U,	// VMOVS
    536872861U,	// VMOVSR
    805308317U,	// VMOVSRR
    0U,	// VMOVScc
    579209117U,	// VMOVv16i8
    572917661U,	// VMOVv1i64
    549586845U,	// VMOVv2f32
    575014813U,	// VMOVv2i32
    572917661U,	// VMOVv2i64
    549586845U,	// VMOVv4f32
    577111965U,	// VMOVv4i16
    575014813U,	// VMOVv4i32
    577111965U,	// VMOVv8i16
    579209117U,	// VMOVv8i8
    939525797U,	// VMRS
    939525797U,	// VMRS_FPEXC
    939525797U,	// VMRS_FPSID
    939525797U,	// VMRS_MVFR0
    939525797U,	// VMRS_MVFR1
    1015023202U,	// VMSR
    1017120354U,	// VMSR_FPEXC
    1019217506U,	// VMSR_FPSID
    681706842U,	// VMULD
    752878901U,	// VMULLp
    828638517U,	// VMULLslsv2i32
    830735669U,	// VMULLslsv4i16
    834929973U,	// VMULLsluv2i32
    837027125U,	// VMULLsluv4i16
    694420789U,	// VMULLsv2i64
    696517941U,	// VMULLsv4i32
    698615093U,	// VMULLsv8i16
    700712245U,	// VMULLuv2i64
    702809397U,	// VMULLuv4i32
    704906549U,	// VMULLuv8i16
    683803994U,	// VMULS
    683803994U,	// VMULfd
    683803994U,	// VMULfq
    752878938U,	// VMULpd
    752878938U,	// VMULpq
    818021722U,	// VMULslfd
    818021722U,	// VMULslfq
    843318618U,	// VMULslv2i32
    845415770U,	// VMULslv4i16
    843318618U,	// VMULslv4i32
    845415770U,	// VMULslv8i16
    713295194U,	// VMULv16i8
    709100890U,	// VMULv2i32
    711198042U,	// VMULv4i16
    709100890U,	// VMULv4i32
    711198042U,	// VMULv8i16
    713295194U,	// VMULv8i8
    536872409U,	// VMVNd
    536872409U,	// VMVNq
    575014361U,	// VMVNv2i32
    577111513U,	// VMVNv4i16
    575014361U,	// VMVNv4i32
    577111513U,	// VMVNv8i16
    547488811U,	// VNEGD
    549585963U,	// VNEGS
    549585963U,	// VNEGf32q
    549585963U,	// VNEGfd
    562299947U,	// VNEGs16d
    562299947U,	// VNEGs16q
    560202795U,	// VNEGs32d
    560202795U,	// VNEGs32q
    564397099U,	// VNEGs8d
    564397099U,	// VNEGs8q
    815923822U,	// VNMLAD
    818020974U,	// VNMLAS
    815924872U,	// VNMLSD
    818022024U,	// VNMLSS
    681706836U,	// VNMULD
    683803988U,	// VNMULS
    671090102U,	// VORNd
    671090102U,	// VORNq
    671090258U,	// VORRd
    709232210U,	// VORRiv2i32
    711329362U,	// VORRiv4i16
    709232210U,	// VORRiv4i32
    711329362U,	// VORRiv8i16
    671090258U,	// VORRq
    698647734U,	// VPADALsv16i8
    694453430U,	// VPADALsv2i32
    696550582U,	// VPADALsv4i16
    694453430U,	// VPADALsv4i32
    696550582U,	// VPADALsv8i16
    698647734U,	// VPADALsv8i8
    704939190U,	// VPADALuv16i8
    700744886U,	// VPADALuv2i32
    702842038U,	// VPADALuv4i16
    700744886U,	// VPADALuv4i32
    702842038U,	// VPADALuv8i16
    704939190U,	// VPADALuv8i8
    564397298U,	// VPADDLsv16i8
    560202994U,	// VPADDLsv2i32
    562300146U,	// VPADDLsv4i16
    560202994U,	// VPADDLsv4i32
    562300146U,	// VPADDLsv8i16
    564397298U,	// VPADDLsv8i8
    570688754U,	// VPADDLuv16i8
    566494450U,	// VPADDLuv2i32
    568591602U,	// VPADDLuv4i16
    566494450U,	// VPADDLuv4i32
    568591602U,	// VPADDLuv8i16
    570688754U,	// VPADDLuv8i8
    683803553U,	// VPADDf
    711197601U,	// VPADDi16
    709100449U,	// VPADDi32
    713294753U,	// VPADDi8
    683804600U,	// VPMAXf
    696518584U,	// VPMAXs16
    694421432U,	// VPMAXs32
    698615736U,	// VPMAXs8
    702810040U,	// VPMAXu16
    700712888U,	// VPMAXu32
    704907192U,	// VPMAXu8
    683804043U,	// VPMINf
    696518027U,	// VPMINs16
    694420875U,	// VPMINs32
    698615179U,	// VPMINs8
    702809483U,	// VPMINu16
    700712331U,	// VPMINu32
    704906635U,	// VPMINu8
    564397682U,	// VQABSv16i8
    560203378U,	// VQABSv2i32
    562300530U,	// VQABSv4i16
    560203378U,	// VQABSv4i32
    562300530U,	// VQABSv8i16
    564397682U,	// VQABSv8i8
    698614695U,	// VQADDsv16i8
    755237799U,	// VQADDsv1i64
    694420391U,	// VQADDsv2i32
    755237799U,	// VQADDsv2i64
    696517543U,	// VQADDsv4i16
    694420391U,	// VQADDsv4i32
    696517543U,	// VQADDsv8i16
    698614695U,	// VQADDsv8i8
    704906151U,	// VQADDuv16i8
    757334951U,	// VQADDuv1i64
    700711847U,	// VQADDuv2i32
    757334951U,	// VQADDuv2i64
    702808999U,	// VQADDuv4i16
    700711847U,	// VQADDuv4i32
    702808999U,	// VQADDuv8i16
    704906151U,	// VQADDuv8i8
    2036630717U,	// VQDMLALslv2i32
    2038727869U,	// VQDMLALslv4i16
    828671165U,	// VQDMLALv2i64
    830768317U,	// VQDMLALv4i32
    2036630848U,	// VQDMLSLslv2i32
    2038728000U,	// VQDMLSLslv4i16
    828671296U,	// VQDMLSLv2i64
    830768448U,	// VQDMLSLv4i32
    828638272U,	// VQDMULHslv2i32
    830735424U,	// VQDMULHslv4i16
    828638272U,	// VQDMULHslv4i32
    830735424U,	// VQDMULHslv8i16
    694420544U,	// VQDMULHv2i32
    696517696U,	// VQDMULHv4i16
    694420544U,	// VQDMULHv4i32
    696517696U,	// VQDMULHv8i16
    828638497U,	// VQDMULLslv2i32
    830735649U,	// VQDMULLslv4i16
    694420769U,	// VQDMULLv2i64
    696517921U,	// VQDMULLv4i32
    621020625U,	// VQMOVNsuv2i32
    560203217U,	// VQMOVNsuv4i16
    562300369U,	// VQMOVNsuv8i8
    621020638U,	// VQMOVNsv2i32
    560203230U,	// VQMOVNsv4i16
    562300382U,	// VQMOVNsv8i8
    623117790U,	// VQMOVNuv2i32
    566494686U,	// VQMOVNuv4i16
    568591838U,	// VQMOVNuv8i8
    564397093U,	// VQNEGv16i8
    560202789U,	// VQNEGv2i32
    562299941U,	// VQNEGv4i16
    560202789U,	// VQNEGv4i32
    562299941U,	// VQNEGv8i16
    564397093U,	// VQNEGv8i8
    828638280U,	// VQRDMULHslv2i32
    830735432U,	// VQRDMULHslv4i16
    828638280U,	// VQRDMULHslv4i32
    830735432U,	// VQRDMULHslv8i16
    694420552U,	// VQRDMULHv2i32
    696517704U,	// VQRDMULHv4i16
    694420552U,	// VQRDMULHv4i32
    696517704U,	// VQRDMULHv8i16
    698615049U,	// VQRSHLsv16i8
    755238153U,	// VQRSHLsv1i64
    694420745U,	// VQRSHLsv2i32
    755238153U,	// VQRSHLsv2i64
    696517897U,	// VQRSHLsv4i16
    694420745U,	// VQRSHLsv4i32
    696517897U,	// VQRSHLsv8i16
    698615049U,	// VQRSHLsv8i8
    704906505U,	// VQRSHLuv16i8
    757335305U,	// VQRSHLuv1i64
    700712201U,	// VQRSHLuv2i32
    757335305U,	// VQRSHLuv2i64
    702809353U,	// VQRSHLuv4i16
    700712201U,	// VQRSHLuv4i32
    702809353U,	// VQRSHLuv8i16
    704906505U,	// VQRSHLuv8i8
    755238305U,	// VQRSHRNsv2i32
    694420897U,	// VQRSHRNsv4i16
    696518049U,	// VQRSHRNsv8i8
    757335457U,	// VQRSHRNuv2i32
    700712353U,	// VQRSHRNuv4i16
    702809505U,	// VQRSHRNuv8i8
    755238344U,	// VQRSHRUNv2i32
    694420936U,	// VQRSHRUNv4i16
    696518088U,	// VQRSHRUNv8i8
    698615043U,	// VQSHLsiv16i8
    755238147U,	// VQSHLsiv1i64
    694420739U,	// VQSHLsiv2i32
    755238147U,	// VQSHLsiv2i64
    696517891U,	// VQSHLsiv4i16
    694420739U,	// VQSHLsiv4i32
    696517891U,	// VQSHLsiv8i16
    698615043U,	// VQSHLsiv8i8
    698615679U,	// VQSHLsuv16i8
    755238783U,	// VQSHLsuv1i64
    694421375U,	// VQSHLsuv2i32
    755238783U,	// VQSHLsuv2i64
    696518527U,	// VQSHLsuv4i16
    694421375U,	// VQSHLsuv4i32
    696518527U,	// VQSHLsuv8i16
    698615679U,	// VQSHLsuv8i8
    698615043U,	// VQSHLsv16i8
    755238147U,	// VQSHLsv1i64
    694420739U,	// VQSHLsv2i32
    755238147U,	// VQSHLsv2i64
    696517891U,	// VQSHLsv4i16
    694420739U,	// VQSHLsv4i32
    696517891U,	// VQSHLsv8i16
    698615043U,	// VQSHLsv8i8
    704906499U,	// VQSHLuiv16i8
    757335299U,	// VQSHLuiv1i64
    700712195U,	// VQSHLuiv2i32
    757335299U,	// VQSHLuiv2i64
    702809347U,	// VQSHLuiv4i16
    700712195U,	// VQSHLuiv4i32
    702809347U,	// VQSHLuiv8i16
    704906499U,	// VQSHLuiv8i8
    704906499U,	// VQSHLuv16i8
    757335299U,	// VQSHLuv1i64
    700712195U,	// VQSHLuv2i32
    757335299U,	// VQSHLuv2i64
    702809347U,	// VQSHLuv4i16
    700712195U,	// VQSHLuv4i32
    702809347U,	// VQSHLuv8i16
    704906499U,	// VQSHLuv8i8
    755238298U,	// VQSHRNsv2i32
    694420890U,	// VQSHRNsv4i16
    696518042U,	// VQSHRNsv8i8
    757335450U,	// VQSHRNuv2i32
    700712346U,	// VQSHRNuv4i16
    702809498U,	// VQSHRNuv8i8
    755238336U,	// VQSHRUNv2i32
    694420928U,	// VQSHRUNv4i16
    696518080U,	// VQSHRUNv8i8
    698614568U,	// VQSUBsv16i8
    755237672U,	// VQSUBsv1i64
    694420264U,	// VQSUBsv2i32
    755237672U,	// VQSUBsv2i64
    696517416U,	// VQSUBsv4i16
    694420264U,	// VQSUBsv4i32
    696517416U,	// VQSUBsv8i16
    698614568U,	// VQSUBsv8i8
    704906024U,	// VQSUBuv16i8
    757334824U,	// VQSUBuv1i64
    700711720U,	// VQSUBuv2i32
    757334824U,	// VQSUBuv2i64
    702808872U,	// VQSUBuv4i16
    700711720U,	// VQSUBuv4i32
    702808872U,	// VQSUBuv8i16
    704906024U,	// VQSUBuv8i8
    707003772U,	// VRADDHNv2i32
    709100924U,	// VRADDHNv4i16
    711198076U,	// VRADDHNv8i8
    566494215U,	// VRECPEd
    549585927U,	// VRECPEfd
    549585927U,	// VRECPEfq
    566494215U,	// VRECPEq
    683804318U,	// VRECPSfd
    683804318U,	// VRECPSfq
    580911574U,	// VREV16d8
    580911574U,	// VREV16q8
    599785768U,	// VREV32d16
    580911400U,	// VREV32d8
    599785768U,	// VREV32q16
    580911400U,	// VREV32q8
    599785805U,	// VREV64d16
    601882957U,	// VREV64d32
    580911437U,	// VREV64d8
    599785805U,	// VREV64q16
    601882957U,	// VREV64q32
    580911437U,	// VREV64q8
    698614676U,	// VRHADDsv16i8
    694420372U,	// VRHADDsv2i32
    696517524U,	// VRHADDsv4i16
    694420372U,	// VRHADDsv4i32
    696517524U,	// VRHADDsv8i16
    698614676U,	// VRHADDsv8i8
    704906132U,	// VRHADDuv16i8
    700711828U,	// VRHADDuv2i32
    702808980U,	// VRHADDuv4i16
    700711828U,	// VRHADDuv4i32
    702808980U,	// VRHADDuv8i16
    704906132U,	// VRHADDuv8i8
    698615056U,	// VRSHLsv16i8
    755238160U,	// VRSHLsv1i64
    694420752U,	// VRSHLsv2i32
    755238160U,	// VRSHLsv2i64
    696517904U,	// VRSHLsv4i16
    694420752U,	// VRSHLsv4i32
    696517904U,	// VRSHLsv8i16
    698615056U,	// VRSHLsv8i8
    704906512U,	// VRSHLuv16i8
    757335312U,	// VRSHLuv1i64
    700712208U,	// VRSHLuv2i32
    757335312U,	// VRSHLuv2i64
    702809360U,	// VRSHLuv4i16
    700712208U,	// VRSHLuv4i32
    702809360U,	// VRSHLuv8i16
    704906512U,	// VRSHLuv8i8
    707003817U,	// VRSHRNv2i32
    709100969U,	// VRSHRNv4i16
    711198121U,	// VRSHRNv8i8
    698615346U,	// VRSHRsv16i8
    755238450U,	// VRSHRsv1i64
    694421042U,	// VRSHRsv2i32
    755238450U,	// VRSHRsv2i64
    696518194U,	// VRSHRsv4i16
    694421042U,	// VRSHRsv4i32
    696518194U,	// VRSHRsv8i16
    698615346U,	// VRSHRsv8i8
    704906802U,	// VRSHRuv16i8
    757335602U,	// VRSHRuv1i64
    700712498U,	// VRSHRuv2i32
    757335602U,	// VRSHRuv2i64
    702809650U,	// VRSHRuv4i16
    700712498U,	// VRSHRuv4i32
    702809650U,	// VRSHRuv8i16
    704906802U,	// VRSHRuv8i8
    566494228U,	// VRSQRTEd
    549585940U,	// VRSQRTEfd
    549585940U,	// VRSQRTEfq
    566494228U,	// VRSQRTEq
    683804340U,	// VRSQRTSfd
    683804340U,	// VRSQRTSfq
    832864900U,	// VRSRAsv16i8
    889488004U,	// VRSRAsv1i64
    828670596U,	// VRSRAsv2i32
    889488004U,	// VRSRAsv2i64
    830767748U,	// VRSRAsv4i16
    828670596U,	// VRSRAsv4i32
    830767748U,	// VRSRAsv8i16
    832864900U,	// VRSRAsv8i8
    839156356U,	// VRSRAuv16i8
    891585156U,	// VRSRAuv1i64
    834962052U,	// VRSRAuv2i32
    891585156U,	// VRSRAuv2i64
    837059204U,	// VRSRAuv4i16
    834962052U,	// VRSRAuv4i32
    837059204U,	// VRSRAuv8i16
    839156356U,	// VRSRAuv8i8
    707003757U,	// VRSUBHNv2i32
    709100909U,	// VRSUBHNv4i16
    711198061U,	// VRSUBHNv8i8
    868222877U,	// VSETLNi16
    870320029U,	// VSETLNi32
    849348509U,	// VSETLNi8
    711197979U,	// VSHLLi16
    709100827U,	// VSHLLi32
    713295131U,	// VSHLLi8
    694420763U,	// VSHLLsv2i64
    696517915U,	// VSHLLsv4i32
    698615067U,	// VSHLLsv8i16
    700712219U,	// VSHLLuv2i64
    702809371U,	// VSHLLuv4i32
    704906523U,	// VSHLLuv8i16
    713295126U,	// VSHLiv16i8
    707003670U,	// VSHLiv1i64
    709100822U,	// VSHLiv2i32
    707003670U,	// VSHLiv2i64
    711197974U,	// VSHLiv4i16
    709100822U,	// VSHLiv4i32
    711197974U,	// VSHLiv8i16
    713295126U,	// VSHLiv8i8
    698615062U,	// VSHLsv16i8
    755238166U,	// VSHLsv1i64
    694420758U,	// VSHLsv2i32
    755238166U,	// VSHLsv2i64
    696517910U,	// VSHLsv4i16
    694420758U,	// VSHLsv4i32
    696517910U,	// VSHLsv8i16
    698615062U,	// VSHLsv8i8
    704906518U,	// VSHLuv16i8
    757335318U,	// VSHLuv1i64
    700712214U,	// VSHLuv2i32
    757335318U,	// VSHLuv2i64
    702809366U,	// VSHLuv4i16
    700712214U,	// VSHLuv4i32
    702809366U,	// VSHLuv8i16
    704906518U,	// VSHLuv8i8
    707003824U,	// VSHRNv2i32
    709100976U,	// VSHRNv4i16
    711198128U,	// VSHRNv8i8
    698615352U,	// VSHRsv16i8
    755238456U,	// VSHRsv1i64
    694421048U,	// VSHRsv2i32
    755238456U,	// VSHRsv2i64
    696518200U,	// VSHRsv4i16
    694421048U,	// VSHRsv4i32
    696518200U,	// VSHRsv8i16
    698615352U,	// VSHRsv8i8
    704906808U,	// VSHRuv16i8
    757335608U,	// VSHRuv1i64
    700712504U,	// VSHRuv2i32
    757335608U,	// VSHRuv2i64
    702809656U,	// VSHRuv4i16
    700712504U,	// VSHRuv4i32
    702809656U,	// VSHRuv8i16
    704906808U,	// VSHRuv8i8
    759170914U,	// VSHTOD
    761268066U,	// VSHTOS
    629606242U,	// VSITOD
    596051810U,	// VSITOS
    849347728U,	// VSLIv16i8
    872416400U,	// VSLIv1i64
    870319248U,	// VSLIv2i32
    872416400U,	// VSLIv2i64
    868222096U,	// VSLIv4i16
    870319248U,	// VSLIv4i32
    868222096U,	// VSLIv8i16
    849347728U,	// VSLIv8i8
    763496290U,	// VSLTOD
    729941858U,	// VSLTOS
    547489590U,	// VSQRTD
    549586742U,	// VSQRTS
    832864906U,	// VSRAsv16i8
    889488010U,	// VSRAsv1i64
    828670602U,	// VSRAsv2i32
    889488010U,	// VSRAsv2i64
    830767754U,	// VSRAsv4i16
    828670602U,	// VSRAsv4i32
    830767754U,	// VSRAsv8i16
    832864906U,	// VSRAsv8i8
    839156362U,	// VSRAuv16i8
    891585162U,	// VSRAuv1i64
    834962058U,	// VSRAuv2i32
    891585162U,	// VSRAuv2i64
    837059210U,	// VSRAuv4i16
    834962058U,	// VSRAuv4i32
    837059210U,	// VSRAuv8i16
    839156362U,	// VSRAuv8i8
    849347733U,	// VSRIv16i8
    872416405U,	// VSRIv1i64
    870319253U,	// VSRIv2i32
    872416405U,	// VSRIv2i64
    868222101U,	// VSRIv4i16
    870319253U,	// VSRIv4i32
    868222101U,	// VSRIv8i16
    849347733U,	// VSRIv8i8
    874807587U,	// VST1LNd16
    1412333859U,	// VST1LNd16_UPD
    876904739U,	// VST1LNd32
    1414431011U,	// VST1LNd32_UPD
    879001891U,	// VST1LNd8
    1416528163U,	// VST1LNd8_UPD
    868221219U,	// VST1LNdAsm_16
    870318371U,	// VST1LNdAsm_32
    849346851U,	// VST1LNdAsm_8
    868221219U,	// VST1LNdWB_fixed_Asm_16
    870318371U,	// VST1LNdWB_fixed_Asm_32
    849346851U,	// VST1LNdWB_fixed_Asm_8
    2076180771U,	// VST1LNdWB_register_Asm_16
    2078277923U,	// VST1LNdWB_register_Asm_32
    2057306403U,	// VST1LNdWB_register_Asm_8
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    734986531U,	// VST1d16
    735019299U,	// VST1d16Q
    869269795U,	// VST1d16Qwb_fixed
    2077262115U,	// VST1d16Qwb_register
    735117603U,	// VST1d16T
    869368099U,	// VST1d16Twb_fixed
    2077360419U,	// VST1d16Twb_register
    869433635U,	// VST1d16wb_fixed
    2077425955U,	// VST1d16wb_register
    737083683U,	// VST1d32
    737116451U,	// VST1d32Q
    871366947U,	// VST1d32Qwb_fixed
    2079359267U,	// VST1d32Qwb_register
    737214755U,	// VST1d32T
    871465251U,	// VST1d32Twb_fixed
    2079457571U,	// VST1d32Twb_register
    871530787U,	// VST1d32wb_fixed
    2079523107U,	// VST1d32wb_register
    739180835U,	// VST1d64
    739213603U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudoWB_fixed
    0U,	// VST1d64QPseudoWB_register
    873464099U,	// VST1d64Qwb_fixed
    2081456419U,	// VST1d64Qwb_register
    739311907U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudoWB_fixed
    0U,	// VST1d64TPseudoWB_register
    873562403U,	// VST1d64Twb_fixed
    2081554723U,	// VST1d64Twb_register
    873627939U,	// VST1d64wb_fixed
    2081620259U,	// VST1d64wb_register
    716112163U,	// VST1d8
    716144931U,	// VST1d8Q
    850395427U,	// VST1d8Qwb_fixed
    2058387747U,	// VST1d8Qwb_register
    716243235U,	// VST1d8T
    850493731U,	// VST1d8Twb_fixed
    2058486051U,	// VST1d8Twb_register
    850559267U,	// VST1d8wb_fixed
    2058551587U,	// VST1d8wb_register
    735281443U,	// VST1q16
    869531939U,	// VST1q16wb_fixed
    2077524259U,	// VST1q16wb_register
    737378595U,	// VST1q32
    871629091U,	// VST1q32wb_fixed
    2079621411U,	// VST1q32wb_register
    739475747U,	// VST1q64
    873726243U,	// VST1q64wb_fixed
    2081718563U,	// VST1q64wb_register
    716407075U,	// VST1q8
    850657571U,	// VST1q8wb_fixed
    2058649891U,	// VST1q8wb_register
    2082767166U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    2888728894U,	// VST2LNd16_UPD
    2084864318U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    2890826046U,	// VST2LNd32_UPD
    2086961470U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    2892923198U,	// VST2LNd8_UPD
    868221246U,	// VST2LNdAsm_16
    870318398U,	// VST2LNdAsm_32
    849346878U,	// VST2LNdAsm_8
    868221246U,	// VST2LNdWB_fixed_Asm_16
    870318398U,	// VST2LNdWB_fixed_Asm_32
    849346878U,	// VST2LNdWB_fixed_Asm_8
    2076180798U,	// VST2LNdWB_register_Asm_16
    2078277950U,	// VST2LNdWB_register_Asm_32
    2057306430U,	// VST2LNdWB_register_Asm_8
    2082767166U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    2888728894U,	// VST2LNq16_UPD
    2084864318U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    2890826046U,	// VST2LNq32_UPD
    868221246U,	// VST2LNqAsm_16
    870318398U,	// VST2LNqAsm_32
    868221246U,	// VST2LNqWB_fixed_Asm_16
    870318398U,	// VST2LNqWB_fixed_Asm_32
    2076180798U,	// VST2LNqWB_register_Asm_16
    2078277950U,	// VST2LNqWB_register_Asm_32
    735379774U,	// VST2b16
    869630270U,	// VST2b16wb_fixed
    2077622590U,	// VST2b16wb_register
    737476926U,	// VST2b32
    871727422U,	// VST2b32wb_fixed
    2079719742U,	// VST2b32wb_register
    716505406U,	// VST2b8
    850755902U,	// VST2b8wb_fixed
    2058748222U,	// VST2b8wb_register
    735281470U,	// VST2d16
    869531966U,	// VST2d16wb_fixed
    2077524286U,	// VST2d16wb_register
    737378622U,	// VST2d32
    871629118U,	// VST2d32wb_fixed
    2079621438U,	// VST2d32wb_register
    716407102U,	// VST2d8
    850657598U,	// VST2d8wb_fixed
    2058649918U,	// VST2d8wb_register
    735019326U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16PseudoWB_fixed
    0U,	// VST2q16PseudoWB_register
    869269822U,	// VST2q16wb_fixed
    2077262142U,	// VST2q16wb_register
    737116478U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32PseudoWB_fixed
    0U,	// VST2q32PseudoWB_register
    871366974U,	// VST2q32wb_fixed
    2079359294U,	// VST2q32wb_register
    716144958U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8PseudoWB_fixed
    0U,	// VST2q8PseudoWB_register
    850395454U,	// VST2q8wb_fixed
    2058387774U,	// VST2q8wb_register
    1411678536U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    3291382088U,	// VST3LNd16_UPD
    1413775688U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    3293479240U,	// VST3LNd32_UPD
    1415872840U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    3295576392U,	// VST3LNd8_UPD
    868221256U,	// VST3LNdAsm_16
    870318408U,	// VST3LNdAsm_32
    849346888U,	// VST3LNdAsm_8
    868221256U,	// VST3LNdWB_fixed_Asm_16
    870318408U,	// VST3LNdWB_fixed_Asm_32
    849346888U,	// VST3LNdWB_fixed_Asm_8
    2076180808U,	// VST3LNdWB_register_Asm_16
    2078277960U,	// VST3LNdWB_register_Asm_32
    2057306440U,	// VST3LNdWB_register_Asm_8
    1411678536U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    3291382088U,	// VST3LNq16_UPD
    1413775688U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    3293479240U,	// VST3LNq32_UPD
    868221256U,	// VST3LNqAsm_16
    870318408U,	// VST3LNqAsm_32
    868221256U,	// VST3LNqWB_fixed_Asm_16
    870318408U,	// VST3LNqWB_fixed_Asm_32
    2076180808U,	// VST3LNqWB_register_Asm_16
    2078277960U,	// VST3LNqWB_register_Asm_32
    2082767176U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    2888728904U,	// VST3d16_UPD
    2084864328U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    2890826056U,	// VST3d32_UPD
    2086961480U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    2892923208U,	// VST3d8_UPD
    734626120U,	// VST3dAsm_16
    736723272U,	// VST3dAsm_32
    715751752U,	// VST3dAsm_8
    734626120U,	// VST3dWB_fixed_Asm_16
    736723272U,	// VST3dWB_fixed_Asm_32
    715751752U,	// VST3dWB_fixed_Asm_8
    868843848U,	// VST3dWB_register_Asm_16
    870941000U,	// VST3dWB_register_Asm_32
    849969480U,	// VST3dWB_register_Asm_8
    2082767176U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    2888728904U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    2084864328U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    2890826056U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    2086961480U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    2892923208U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    734822728U,	// VST3qAsm_16
    736919880U,	// VST3qAsm_32
    715948360U,	// VST3qAsm_8
    734822728U,	// VST3qWB_fixed_Asm_16
    736919880U,	// VST3qWB_fixed_Asm_32
    715948360U,	// VST3qWB_fixed_Asm_8
    869040456U,	// VST3qWB_register_Asm_16
    871137608U,	// VST3qWB_register_Asm_32
    850166088U,	// VST3qWB_register_Asm_8
    2888073561U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    3022946649U,	// VST4LNd16_UPD
    2890170713U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    3025043801U,	// VST4LNd32_UPD
    2892267865U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    3027140953U,	// VST4LNd8_UPD
    868221273U,	// VST4LNdAsm_16
    870318425U,	// VST4LNdAsm_32
    849346905U,	// VST4LNdAsm_8
    868221273U,	// VST4LNdWB_fixed_Asm_16
    870318425U,	// VST4LNdWB_fixed_Asm_32
    849346905U,	// VST4LNdWB_fixed_Asm_8
    2076180825U,	// VST4LNdWB_register_Asm_16
    2078277977U,	// VST4LNdWB_register_Asm_32
    2057306457U,	// VST4LNdWB_register_Asm_8
    2888073561U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    3022946649U,	// VST4LNq16_UPD
    2890170713U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    3025043801U,	// VST4LNq32_UPD
    868221273U,	// VST4LNqAsm_16
    870318425U,	// VST4LNqAsm_32
    868221273U,	// VST4LNqWB_fixed_Asm_16
    870318425U,	// VST4LNqWB_fixed_Asm_32
    2076180825U,	// VST4LNqWB_register_Asm_16
    2078277977U,	// VST4LNqWB_register_Asm_32
    1411678553U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    3291382105U,	// VST4d16_UPD
    1413775705U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    3293479257U,	// VST4d32_UPD
    1415872857U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    3295576409U,	// VST4d8_UPD
    734593369U,	// VST4dAsm_16
    736690521U,	// VST4dAsm_32
    715719001U,	// VST4dAsm_8
    734593369U,	// VST4dWB_fixed_Asm_16
    736690521U,	// VST4dWB_fixed_Asm_32
    715719001U,	// VST4dWB_fixed_Asm_8
    868811097U,	// VST4dWB_register_Asm_16
    870908249U,	// VST4dWB_register_Asm_32
    849936729U,	// VST4dWB_register_Asm_8
    1411678553U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    3291382105U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    1413775705U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    3293479257U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    1415872857U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    3295576409U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    734921049U,	// VST4qAsm_16
    737018201U,	// VST4qAsm_32
    716046681U,	// VST4qAsm_8
    734921049U,	// VST4qWB_fixed_Asm_16
    737018201U,	// VST4qWB_fixed_Asm_32
    716046681U,	// VST4qWB_fixed_Asm_8
    869138777U,	// VST4qWB_register_Asm_16
    871235929U,	// VST4qWB_register_Asm_32
    850264409U,	// VST4qWB_register_Asm_8
    537133762U,	// VSTMDDB_UPD
    939524699U,	// VSTMDIA
    537133659U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    537133762U,	// VSTMSDB_UPD
    939524699U,	// VSTMSIA
    537133659U,	// VSTMSIA_UPD
    671090279U,	// VSTRD
    671090279U,	// VSTRS
    681706286U,	// VSUBD
    707003765U,	// VSUBHNv2i32
    709100917U,	// VSUBHNv4i16
    711198069U,	// VSUBHNv8i8
    694420700U,	// VSUBLsv2i64
    696517852U,	// VSUBLsv4i32
    698615004U,	// VSUBLsv8i16
    700712156U,	// VSUBLuv2i64
    702809308U,	// VSUBLuv4i32
    704906460U,	// VSUBLuv8i16
    683803438U,	// VSUBS
    694421410U,	// VSUBWsv2i64
    696518562U,	// VSUBWsv4i32
    698615714U,	// VSUBWsv8i16
    700712866U,	// VSUBWuv2i64
    702810018U,	// VSUBWuv4i32
    704907170U,	// VSUBWuv8i16
    683803438U,	// VSUBfd
    683803438U,	// VSUBfq
    713294638U,	// VSUBv16i8
    707003182U,	// VSUBv1i64
    709100334U,	// VSUBv2i32
    707003182U,	// VSUBv2i64
    711197486U,	// VSUBv4i16
    709100334U,	// VSUBv4i32
    711197486U,	// VSUBv8i16
    713294638U,	// VSUBv8i8
    805307915U,	// VSWPd
    805307915U,	// VSWPq
    715130071U,	// VTBL1
    715130071U,	// VTBL2
    715130071U,	// VTBL3
    0U,	// VTBL3Pseudo
    715130071U,	// VTBL4
    0U,	// VTBL4Pseudo
    849348575U,	// VTBX1
    849348575U,	// VTBX2
    849348575U,	// VTBX3
    0U,	// VTBX3Pseudo
    849348575U,	// VTBX4
    0U,	// VTBX4Pseudo
    765462370U,	// VTOSHD
    767559522U,	// VTOSHS
    635897452U,	// VTOSIRD
    591857260U,	// VTOSIRS
    635897698U,	// VTOSIZD
    591857506U,	// VTOSIZS
    769787746U,	// VTOSLD
    725747554U,	// VTOSLS
    771753826U,	// VTOUHD
    773850978U,	// VTOUHS
    642188908U,	// VTOUIRD
    593954412U,	// VTOUIRS
    642189154U,	// VTOUIZD
    593954658U,	// VTOUIZS
    776079202U,	// VTOULD
    727844706U,	// VTOULS
    868222395U,	// VTRNd16
    870319547U,	// VTRNd32
    849348027U,	// VTRNd8
    868222395U,	// VTRNq16
    870319547U,	// VTRNq32
    849348027U,	// VTRNq8
    715130689U,	// VTSTv16i8
    736102209U,	// VTSTv2i32
    734005057U,	// VTSTv4i16
    736102209U,	// VTSTv4i32
    734005057U,	// VTSTv8i16
    715130689U,	// VTSTv8i8
    778045282U,	// VUHTOD
    780142434U,	// VUHTOS
    648480610U,	// VUITOD
    598148962U,	// VUITOS
    782370658U,	// VULTOD
    732039010U,	// VULTOS
    868222480U,	// VUZPd16
    849348112U,	// VUZPd8
    868222480U,	// VUZPq16
    870319632U,	// VUZPq32
    849348112U,	// VUZPq8
    868222452U,	// VZIPd16
    849348084U,	// VZIPd8
    868222452U,	// VZIPq16
    870319604U,	// VZIPq32
    849348084U,	// VZIPq8
    1212154867U,	// WFE
    1212155016U,	// WFI
    1212154809U,	// YIELD
    939524674U,	// sysLDMDA
    537133634U,	// sysLDMDA_UPD
    939524796U,	// sysLDMDB
    537133756U,	// sysLDMDB_UPD
    939525477U,	// sysLDMIA
    537134437U,	// sysLDMIA_UPD
    939524815U,	// sysLDMIB
    537133775U,	// sysLDMIB_UPD
    939524680U,	// sysSTMDA
    537133640U,	// sysSTMDA_UPD
    939524803U,	// sysSTMDB
    537133763U,	// sysSTMDB_UPD
    939525481U,	// sysSTMIA
    537134441U,	// sysSTMIA_UPD
    939524821U,	// sysSTMIB
    537133781U,	// sysSTMIB_UPD
    0U,	// t2ABS
    134218579U,	// t2ADCri
    247464787U,	// t2ADCrr
    381682515U,	// t2ADCrs
    0U,	// t2ADDSri
    0U,	// t2ADDSrr
    0U,	// t2ADDSrs
    247464848U,	// t2ADDri
    671090601U,	// t2ADDri12
    247464848U,	// t2ADDrr
    381682576U,	// t2ADDrs
    650118697U,	// t2ADR
    0U,	// t2ANDCCri
    0U,	// t2ANDCCrr
    0U,	// t2ANDCCrs
    134218699U,	// t2ANDri
    247464907U,	// t2ANDrr
    381682635U,	// t2ANDrs
    247465559U,	// t2ASRri
    247465559U,	// t2ASRrr
    1052770963U,	// t2B
    671089499U,	// t2BFC
    805307524U,	// t2BFI
    134218592U,	// t2BICri
    247464800U,	// t2BICrr
    381682528U,	// t2BICrs
    0U,	// t2BMOVPCB_CALL
    0U,	// t2BR_JT
    939525274U,	// t2BXJ
    1052770963U,	// t2Bcc
    1484849178U,	// t2CDP2
    1212155926U,	// t2CLREX
    536873041U,	// t2CLZ
    650118550U,	// t2CMNzri
    650118550U,	// t2CMNzrr
    784336278U,	// t2CMNzrs
    650118650U,	// t2CMPri
    650118650U,	// t2CMPrr
    784336378U,	// t2CMPrs
    1077936279U,	// t2CPS1p
    1723958945U,	// t2CPS2p
    1723958945U,	// t2CPS3p
    939525153U,	// t2DBG
    1744830537U,	// t2DMB
    1744830542U,	// t2DSB
    0U,	// t2EORCCri
    0U,	// t2EORCCrr
    0U,	// t2EORCCrs
    134219333U,	// t2EORri
    247465541U,	// t2EORrr
    381683269U,	// t2EORrs
    1744830547U,	// t2ISB
    1879213850U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    805340318U,	// t2LDC2L_OFFSET
    805340318U,	// t2LDC2L_OPTION
    805340318U,	// t2LDC2L_POST
    805340318U,	// t2LDC2L_PRE
    805339439U,	// t2LDC2_OFFSET
    805339439U,	// t2LDC2_OPTION
    805339439U,	// t2LDC2_POST
    805339439U,	// t2LDC2_PRE
    805340386U,	// t2LDCL_OFFSET
    805340386U,	// t2LDCL_OPTION
    805340386U,	// t2LDCL_POST
    805340386U,	// t2LDCL_PRE
    805339991U,	// t2LDC_OFFSET
    805339991U,	// t2LDC_OPTION
    805339991U,	// t2LDC_POST
    805339991U,	// t2LDC_PRE
    939524796U,	// t2LDMDB
    537133756U,	// t2LDMDB_UPD
    1052771685U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    650380645U,	// t2LDMIA_UPD
    671090407U,	// t2LDRBT
    805307104U,	// t2LDRB_POST
    805307104U,	// t2LDRB_PRE
    784335584U,	// t2LDRBi12
    671089376U,	// t2LDRBi8
    650117856U,	// t2LDRBpci
    538968800U,	// t2LDRBpcrel
    918553312U,	// t2LDRBs
    2013266895U,	// t2LDRD_POST
    2013266895U,	// t2LDRD_PRE
    805307343U,	// t2LDRDi8
    671090704U,	// t2LDREX
    536871745U,	// t2LDREXB
    671089637U,	// t2LDREXD
    536872054U,	// t2LDREXH
    671090437U,	// t2LDRHT
    805307473U,	// t2LDRH_POST
    805307473U,	// t2LDRH_PRE
    784335953U,	// t2LDRHi12
    671089745U,	// t2LDRHi8
    650118225U,	// t2LDRHpci
    538969169U,	// t2LDRHpcrel
    918553681U,	// t2LDRHs
    671090419U,	// t2LDRSBT
    805307114U,	// t2LDRSB_POST
    805307114U,	// t2LDRSB_PRE
    784335594U,	// t2LDRSBi12
    671089386U,	// t2LDRSBi8
    650117866U,	// t2LDRSBpci
    538968810U,	// t2LDRSBpcrel
    918553322U,	// t2LDRSBs
    671090449U,	// t2LDRSHT
    805307483U,	// t2LDRSH_POST
    805307483U,	// t2LDRSH_PRE
    784335963U,	// t2LDRSHi12
    671089755U,	// t2LDRSHi8
    650118235U,	// t2LDRSHpci
    538969179U,	// t2LDRSHpcrel
    918553691U,	// t2LDRSHs
    671090481U,	// t2LDRT
    805307950U,	// t2LDR_POST
    805307950U,	// t2LDR_PRE
    784336430U,	// t2LDRi12
    671090222U,	// t2LDRi8
    650118702U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    538969646U,	// t2LDRpcrel
    918554158U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    247465284U,	// t2LSLri
    247465284U,	// t2LSLrr
    247465566U,	// t2LSRri
    247465566U,	// t2LSRrr
    1485078668U,	// t2MCR
    1485078560U,	// t2MCR2
    1485078673U,	// t2MCRR
    1485078566U,	// t2MCRR2
    805306986U,	// t2MLA
    805308036U,	// t2MLS
    918554199U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    671090611U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    918553924U,	// t2MOVCClsl
    918554206U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    918554185U,	// t2MOVCCror
    673187516U,	// t2MOVSsi
    807405244U,	// t2MOVSsr
    671090535U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_dyn
    0U,	// t2MOV_ga_pcrel
    2260731806U,	// t2MOVi
    536872883U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    2260731806U,	// t2MOVr
    673187742U,	// t2MOVsi
    807405470U,	// t2MOVsr
    650118826U,	// t2MOVsra_flag
    650118831U,	// t2MOVsrl_flag
    2281701464U,	// t2MRC
    2281701383U,	// t2MRC2
    1485078621U,	// t2MRRC
    1485078541U,	// t2MRRC2
    939525798U,	// t2MRS_AR
    536872614U,	// t2MRS_M
    939525798U,	// t2MRSsys_AR
    537232995U,	// t2MSR_AR
    537232995U,	// t2MSR_M
    671090000U,	// t2MUL
    671090138U,	// t2MVNCCi
    2147485146U,	// t2MVNi
    2260731354U,	// t2MVNr
    247465434U,	// t2MVNs
    1323304446U,	// t2NOP
    134219191U,	// t2ORNri
    134219191U,	// t2ORNrr
    268436919U,	// t2ORNrs
    0U,	// t2ORRCCri
    0U,	// t2ORRCCrr
    0U,	// t2ORRCCrs
    134219347U,	// t2ORRri
    247465555U,	// t2ORRrr
    381683283U,	// t2ORRrs
    805308114U,	// t2PKHBT
    805307127U,	// t2PKHTB
    538347438U,	// t2PLDWi12
    538380206U,	// t2PLDWi8
    672630702U,	// t2PLDWs
    538346431U,	// t2PLDi12
    538379199U,	// t2PLDi8
    672629695U,	// t2PLDs
    538346636U,	// t2PLIi12
    538379404U,	// t2PLIi8
    672629900U,	// t2PLIs
    671089576U,	// t2QADD
    671089075U,	// t2QADD16
    671089178U,	// t2QADD8
    671090753U,	// t2QASX
    671089550U,	// t2QDADD
    671089436U,	// t2QDSUB
    671090640U,	// t2QSAX
    671089449U,	// t2QSUB
    671089037U,	// t2QSUB16
    671089139U,	// t2QSUB8
    536872728U,	// t2RBIT
    650119046U,	// t2REV
    650117591U,	// t2REV16
    650118246U,	// t2REVSH
    939524789U,	// t2RFEDB
    939524789U,	// t2RFEDBW
    939524686U,	// t2RFEIA
    939524686U,	// t2RFEIAW
    247465545U,	// t2RORri
    247465545U,	// t2RORrr
    2147485744U,	// t2RRX
    0U,	// t2RSBSri
    0U,	// t2RSBSrs
    247464684U,	// t2RSBri
    134218476U,	// t2RSBrr
    268436204U,	// t2RSBrs
    671089082U,	// t2SADD16
    671089184U,	// t2SADD8
    671090758U,	// t2SASX
    134218575U,	// t2SBCri
    247464783U,	// t2SBCrr
    381682511U,	// t2SBCrs
    805308450U,	// t2SBFX
    671090574U,	// t2SDIV
    671089919U,	// t2SEL
    1323304842U,	// t2SEV
    671089058U,	// t2SHADD16
    671089163U,	// t2SHADD8
    671090740U,	// t2SHASX
    671090627U,	// t2SHSAX
    671089020U,	// t2SHSUB16
    671089124U,	// t2SHSUB8
    939524964U,	// t2SMC
    805307035U,	// t2SMLABB
    805308107U,	// t2SMLABT
    805307261U,	// t2SMLAD
    805308388U,	// t2SMLADX
    805307589U,	// t2SMLAL
    805307042U,	// t2SMLALBB
    805308120U,	// t2SMLALBT
    805307314U,	// t2SMLALD
    805308402U,	// t2SMLALDX
    805307133U,	// t2SMLALTB
    805308237U,	// t2SMLALTT
    805307120U,	// t2SMLATB
    805308230U,	// t2SMLATT
    805307187U,	// t2SMLAWB
    805308268U,	// t2SMLAWT
    805307353U,	// t2SMLSD
    805308418U,	// t2SMLSDX
    805307331U,	// t2SMLSLD
    805308410U,	// t2SMLSLDX
    805306984U,	// t2SMMLA
    805307934U,	// t2SMMLAR
    805308034U,	// t2SMMLS
    805307995U,	// t2SMMLSR
    671089998U,	// t2SMMUL
    671090237U,	// t2SMMULR
    671089539U,	// t2SMUAD
    671090667U,	// t2SMUADX
    671089322U,	// t2SMULBB
    671090400U,	// t2SMULBT
    805307689U,	// t2SMULL
    671089413U,	// t2SMULTB
    671090517U,	// t2SMULTT
    671089466U,	// t2SMULWB
    671090547U,	// t2SMULWT
    671089631U,	// t2SMUSD
    671090697U,	// t2SMUSDX
    1056965321U,	// t2SRSDB
    1059062473U,	// t2SRSDB_UPD
    1056965218U,	// t2SRSIA
    1059062370U,	// t2SRSIA_UPD
    805308097U,	// t2SSAT
    671089096U,	// t2SSAT16
    671090645U,	// t2SSAX
    671089044U,	// t2SSUB16
    671089145U,	// t2SSUB8
    805340324U,	// t2STC2L_OFFSET
    805340324U,	// t2STC2L_OPTION
    805340324U,	// t2STC2L_POST
    805340324U,	// t2STC2L_PRE
    805339444U,	// t2STC2_OFFSET
    805339444U,	// t2STC2_OPTION
    805339444U,	// t2STC2_POST
    805339444U,	// t2STC2_PRE
    805340391U,	// t2STCL_OFFSET
    805340391U,	// t2STCL_OPTION
    805340391U,	// t2STCL_POST
    805340391U,	// t2STCL_PRE
    805340021U,	// t2STC_OFFSET
    805340021U,	// t2STC_OPTION
    805340021U,	// t2STC_POST
    805340021U,	// t2STC_PRE
    939524803U,	// t2STMDB
    537133763U,	// t2STMDB_UPD
    1052771689U,	// t2STMIA
    650380649U,	// t2STMIA_UPD
    671090413U,	// t2STRBT
    805569253U,	// t2STRB_POST
    805569253U,	// t2STRB_PRE
    0U,	// t2STRB_preidx
    784335589U,	// t2STRBi12
    671089381U,	// t2STRBi8
    918553317U,	// t2STRBs
    2013529044U,	// t2STRD_POST
    2013529044U,	// t2STRD_PRE
    805307348U,	// t2STRDi8
    805308444U,	// t2STREX
    671089480U,	// t2STREXB
    805307372U,	// t2STREXD
    671089789U,	// t2STREXH
    671090443U,	// t2STRHT
    805569622U,	// t2STRH_POST
    805569622U,	// t2STRH_PRE
    0U,	// t2STRH_preidx
    784335958U,	// t2STRHi12
    671089750U,	// t2STRHi8
    918553686U,	// t2STRHs
    671090492U,	// t2STRT
    805570152U,	// t2STR_POST
    805570152U,	// t2STR_PRE
    0U,	// t2STR_preidx
    784336488U,	// t2STRi12
    671090280U,	// t2STRi8
    918554216U,	// t2STRs
    0U,	// t2SUBSri
    0U,	// t2SUBSrr
    0U,	// t2SUBSrs
    247464734U,	// t2SUBri
    671090595U,	// t2SUBri12
    247464734U,	// t2SUBrr
    381682462U,	// t2SUBrs
    805307023U,	// t2SXTAB
    805306718U,	// t2SXTAB16
    805307440U,	// t2SXTAH
    784335634U,	// t2SXTB
    671089006U,	// t2SXTB16
    784335980U,	// t2SXTH
    538444465U,	// t2TBB
    0U,	// t2TBB_JT
    538477628U,	// t2TBH
    0U,	// t2TBH_JT
    650118682U,	// t2TEQri
    650118682U,	// t2TEQrr
    784336410U,	// t2TEQrs
    650118978U,	// t2TSTri
    650118978U,	// t2TSTrr
    784336706U,	// t2TSTrs
    671089089U,	// t2UADD16
    671089190U,	// t2UADD8
    671090763U,	// t2UASX
    805308455U,	// t2UBFX
    671090579U,	// t2UDIV
    671089066U,	// t2UHADD16
    671089170U,	// t2UHADD8
    671090746U,	// t2UHASX
    671090633U,	// t2UHSAX
    671089028U,	// t2UHSUB16
    671089131U,	// t2UHSUB8
    805307562U,	// t2UMAAL
    805307595U,	// t2UMLAL
    805307695U,	// t2UMULL
    671089074U,	// t2UQADD16
    671089177U,	// t2UQADD8
    671090752U,	// t2UQASX
    671090639U,	// t2UQSAX
    671089036U,	// t2UQSUB16
    671089138U,	// t2UQSUB8
    671089157U,	// t2USAD8
    805306845U,	// t2USADA8
    805308102U,	// t2USAT
    671089103U,	// t2USAT16
    671090650U,	// t2USAX
    671089051U,	// t2USUB16
    671089151U,	// t2USUB8
    805307029U,	// t2UXTAB
    805306726U,	// t2UXTAB16
    805307446U,	// t2UXTAH
    784335639U,	// t2UXTB
    671089013U,	// t2UXTB16
    784335985U,	// t2UXTH
    1323303923U,	// t2WFE
    1323304072U,	// t2WFI
    1323303865U,	// t2YIELD
    3612934995U,	// tADC
    671089552U,	// tADDhirr
    3611591568U,	// tADDi3
    3612935056U,	// tADDi8
    671089552U,	// tADDrSP
    671089552U,	// tADDrSPi
    3611591568U,	// tADDrr
    671089552U,	// tADDspi
    671089552U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    536872489U,	// tADR
    3612935115U,	// tAND
    3611592279U,	// tASRri
    3612935767U,	// tASRrr
    939524755U,	// tB
    3612935008U,	// tBIC
    1077936290U,	// tBKPT
    1208255705U,	// tBL
    1208256556U,	// tBLXi
    1208256556U,	// tBLXr
    0U,	// tBRIND
    0U,	// tBR_JTr
    939526113U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    939524755U,	// tBcc
    0U,	// tBfar
    1197473980U,	// tCBNZ
    1197473975U,	// tCBZ
    1484849287U,	// tCDP
    536872342U,	// tCMNz
    536872442U,	// tCMPhir
    536872442U,	// tCMPi8
    536872442U,	// tCMPr
    1612809889U,	// tCPS
    3612935749U,	// tEOR
    0U,	// tInt_eh_sjlj_dispatchsetup
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    939525477U,	// tLDMIA
    0U,	// tLDMIA_UPD
    671089376U,	// tLDRBi
    671089376U,	// tLDRBr
    671089745U,	// tLDRHi
    671089745U,	// tLDRHr
    671089386U,	// tLDRSB
    671089755U,	// tLDRSH
    671090222U,	// tLDRi
    662701614U,	// tLDRpci
    536872494U,	// tLDRpciASM
    0U,	// tLDRpci_pic
    671090222U,	// tLDRr
    671090222U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    3611592004U,	// tLSLri
    3612935492U,	// tLSLrr
    3611592286U,	// tLSRri
    3612935774U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    1197473948U,	// tMOVSr
    3618047902U,	// tMOVi8
    536872862U,	// tMOVr
    3611592016U,	// tMUL
    3618047450U,	// tMVN
    1212155390U,	// tNOP
    3612935763U,	// tORR
    0U,	// tPICADD
    1209632258U,	// tPOP
    0U,	// tPOP_RET
    1209631841U,	// tPUSH
    536872838U,	// tREV
    536871383U,	// tREV16
    536872038U,	// tREVSH
    3612935753U,	// tROR
    3618013932U,	// tRSB
    3612934991U,	// tSBC
    2684354664U,	// tSETEND
    1212155786U,	// tSEV
    537134441U,	// tSTMIA_UPD
    671089381U,	// tSTRBi
    671089381U,	// tSTRBr
    671089750U,	// tSTRHi
    671089750U,	// tSTRHr
    671090280U,	// tSTRi
    671090280U,	// tSTRr
    671090280U,	// tSTRspi
    3611591454U,	// tSUBi3
    3612934942U,	// tSUBi8
    3611591454U,	// tSUBrr
    671089438U,	// tSUBspi
    939524985U,	// tSVC
    536871698U,	// tSXTB
    536872044U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTPsoft
    1515U,	// tTRAP
    536872770U,	// tTST
    536871703U,	// tUXTB
    536872049U,	// tUXTH
    1212154867U,	// tWFE
    1212155016U,	// tWFI
    1212154809U,	// tYIELD
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'd', 'c', '2', 9, 0,
  /* 6 */ 'm', 'r', 'c', '2', 9, 0,
  /* 12 */ 'm', 'r', 'r', 'c', '2', 9, 0,
  /* 19 */ 's', 't', 'c', '2', 9, 0,
  /* 25 */ 'c', 'd', 'p', '2', 9, 0,
  /* 31 */ 'm', 'c', 'r', '2', 9, 0,
  /* 37 */ 'm', 'c', 'r', 'r', '2', 9, 0,
  /* 44 */ 'r', 'f', 'e', 'd', 'a', 9, 0,
  /* 51 */ 'r', 'f', 'e', 'i', 'a', 9, 0,
  /* 58 */ 'r', 'f', 'e', 'd', 'b', 9, 0,
  /* 65 */ 'r', 'f', 'e', 'i', 'b', 9, 0,
  /* 72 */ 'd', 'm', 'b', 9, 0,
  /* 77 */ 'd', 's', 'b', 9, 0,
  /* 82 */ 'i', 's', 'b', 9, 0,
  /* 87 */ 'm', 'r', 'c', 9, 0,
  /* 92 */ 'm', 'r', 'r', 'c', 9, 0,
  /* 98 */ 'p', 'l', 'd', 9, 0,
  /* 103 */ 's', 'e', 't', 'e', 'n', 'd', 9, 0,
  /* 111 */ 'p', 'l', 'i', 9, 0,
  /* 116 */ 'l', 'd', 'c', '2', 'l', 9, 0,
  /* 123 */ 's', 't', 'c', '2', 'l', 9, 0,
  /* 130 */ 'b', 'l', 9, 0,
  /* 134 */ 'c', 'd', 'p', 9, 0,
  /* 139 */ 'm', 'c', 'r', 9, 0,
  /* 144 */ 'm', 'c', 'r', 'r', 9, 0,
  /* 150 */ 'c', 'p', 's', 9, 0,
  /* 155 */ 'm', 'o', 'v', 's', 9, 0,
  /* 161 */ 'b', 'k', 'p', 't', 9, 0,
  /* 167 */ 'p', 'l', 'd', 'w', 9, 0,
  /* 173 */ 'b', 'x', 9, 0,
  /* 177 */ 'b', 'l', 'x', 9, 0,
  /* 182 */ 'c', 'b', 'z', 9, 0,
  /* 187 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 193 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 205 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', '!', ',', 32, 0,
  /* 217 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 229 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', '!', ',', 32, 0,
  /* 241 */ 's', 'r', 's', 'd', 'a', 9, 's', 'p', ',', 32, 0,
  /* 252 */ 's', 'r', 's', 'i', 'a', 9, 's', 'p', ',', 32, 0,
  /* 263 */ 's', 'r', 's', 'd', 'b', 9, 's', 'p', ',', 32, 0,
  /* 274 */ 's', 'r', 's', 'i', 'b', 9, 's', 'p', ',', 32, 0,
  /* 285 */ 'v', 'l', 'd', '1', 0,
  /* 290 */ 'v', 's', 't', '1', 0,
  /* 295 */ 'v', 'r', 'e', 'v', '3', '2', 0,
  /* 302 */ 'l', 'd', 'c', '2', 0,
  /* 307 */ 's', 't', 'c', '2', 0,
  /* 312 */ 'v', 'l', 'd', '2', 0,
  /* 317 */ 'v', 's', 't', '2', 0,
  /* 322 */ 'v', 'l', 'd', '3', 0,
  /* 327 */ 'v', 's', 't', '3', 0,
  /* 332 */ 'v', 'r', 'e', 'v', '6', '4', 0,
  /* 339 */ 'v', 'l', 'd', '4', 0,
  /* 344 */ 'v', 's', 't', '4', 0,
  /* 349 */ 's', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 357 */ 'u', 'x', 't', 'a', 'b', '1', '6', 0,
  /* 365 */ 's', 'x', 't', 'b', '1', '6', 0,
  /* 372 */ 'u', 'x', 't', 'b', '1', '6', 0,
  /* 379 */ 's', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 387 */ 'u', 'h', 's', 'u', 'b', '1', '6', 0,
  /* 395 */ 'u', 'q', 's', 'u', 'b', '1', '6', 0,
  /* 403 */ 's', 's', 'u', 'b', '1', '6', 0,
  /* 410 */ 'u', 's', 'u', 'b', '1', '6', 0,
  /* 417 */ 's', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 425 */ 'u', 'h', 'a', 'd', 'd', '1', '6', 0,
  /* 433 */ 'u', 'q', 'a', 'd', 'd', '1', '6', 0,
  /* 441 */ 's', 'a', 'd', 'd', '1', '6', 0,
  /* 448 */ 'u', 'a', 'd', 'd', '1', '6', 0,
  /* 455 */ 's', 's', 'a', 't', '1', '6', 0,
  /* 462 */ 'u', 's', 'a', 't', '1', '6', 0,
  /* 469 */ 'v', 'r', 'e', 'v', '1', '6', 0,
  /* 476 */ 'u', 's', 'a', 'd', 'a', '8', 0,
  /* 483 */ 's', 'h', 's', 'u', 'b', '8', 0,
  /* 490 */ 'u', 'h', 's', 'u', 'b', '8', 0,
  /* 497 */ 'u', 'q', 's', 'u', 'b', '8', 0,
  /* 504 */ 's', 's', 'u', 'b', '8', 0,
  /* 510 */ 'u', 's', 'u', 'b', '8', 0,
  /* 516 */ 'u', 's', 'a', 'd', '8', 0,
  /* 522 */ 's', 'h', 'a', 'd', 'd', '8', 0,
  /* 529 */ 'u', 'h', 'a', 'd', 'd', '8', 0,
  /* 536 */ 'u', 'q', 'a', 'd', 'd', '8', 0,
  /* 543 */ 's', 'a', 'd', 'd', '8', 0,
  /* 549 */ 'u', 'a', 'd', 'd', '8', 0,
  /* 555 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 562 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 572 */ 'v', 'a', 'b', 'a', 0,
  /* 577 */ 'l', 'd', 'm', 'd', 'a', 0,
  /* 583 */ 's', 't', 'm', 'd', 'a', 0,
  /* 589 */ 'r', 'f', 'e', 'i', 'a', 0,
  /* 595 */ 'v', 'l', 'd', 'm', 'i', 'a', 0,
  /* 602 */ 'v', 's', 't', 'm', 'i', 'a', 0,
  /* 609 */ 's', 'r', 's', 'i', 'a', 0,
  /* 615 */ 's', 'm', 'm', 'l', 'a', 0,
  /* 621 */ 'v', 'n', 'm', 'l', 'a', 0,
  /* 627 */ 'v', 'm', 'l', 'a', 0,
  /* 632 */ 'v', 'f', 'm', 'a', 0,
  /* 637 */ 'v', 'f', 'n', 'm', 'a', 0,
  /* 643 */ 'v', 'r', 's', 'r', 'a', 0,
  /* 649 */ 'v', 's', 'r', 'a', 0,
  /* 654 */ 's', 'x', 't', 'a', 'b', 0,
  /* 660 */ 'u', 'x', 't', 'a', 'b', 0,
  /* 666 */ 's', 'm', 'l', 'a', 'b', 'b', 0,
  /* 673 */ 's', 'm', 'l', 'a', 'l', 'b', 'b', 0,
  /* 681 */ 's', 'm', 'u', 'l', 'b', 'b', 0,
  /* 688 */ 't', 'b', 'b', 0,
  /* 692 */ 'r', 'f', 'e', 'd', 'b', 0,
  /* 698 */ 'v', 'l', 'd', 'm', 'd', 'b', 0,
  /* 705 */ 'v', 's', 't', 'm', 'd', 'b', 0,
  /* 712 */ 's', 'r', 's', 'd', 'b', 0,
  /* 718 */ 'l', 'd', 'm', 'i', 'b', 0,
  /* 724 */ 's', 't', 'm', 'i', 'b', 0,
  /* 730 */ 's', 'w', 'p', 'b', 0,
  /* 735 */ 'l', 'd', 'r', 'b', 0,
  /* 740 */ 's', 't', 'r', 'b', 0,
  /* 745 */ 'l', 'd', 'r', 's', 'b', 0,
  /* 751 */ 's', 'm', 'l', 'a', 't', 'b', 0,
  /* 758 */ 'p', 'k', 'h', 't', 'b', 0,
  /* 764 */ 's', 'm', 'l', 'a', 'l', 't', 'b', 0,
  /* 772 */ 's', 'm', 'u', 'l', 't', 'b', 0,
  /* 779 */ 'v', 'c', 'v', 't', 'b', 0,
  /* 785 */ 's', 'x', 't', 'b', 0,
  /* 790 */ 'u', 'x', 't', 'b', 0,
  /* 795 */ 'q', 'd', 's', 'u', 'b', 0,
  /* 801 */ 'v', 'h', 's', 'u', 'b', 0,
  /* 807 */ 'v', 'q', 's', 'u', 'b', 0,
  /* 813 */ 'v', 's', 'u', 'b', 0,
  /* 818 */ 's', 'm', 'l', 'a', 'w', 'b', 0,
  /* 825 */ 's', 'm', 'u', 'l', 'w', 'b', 0,
  /* 832 */ 'l', 'd', 'r', 'e', 'x', 'b', 0,
  /* 839 */ 's', 't', 'r', 'e', 'x', 'b', 0,
  /* 846 */ 's', 'b', 'c', 0,
  /* 850 */ 'a', 'd', 'c', 0,
  /* 854 */ 'l', 'd', 'c', 0,
  /* 858 */ 'b', 'f', 'c', 0,
  /* 862 */ 'v', 'b', 'i', 'c', 0,
  /* 867 */ 's', 'm', 'c', 0,
  /* 871 */ 'm', 'r', 'c', 0,
  /* 875 */ 'm', 'r', 'r', 'c', 0,
  /* 880 */ 'r', 's', 'c', 0,
  /* 884 */ 's', 't', 'c', 0,
  /* 888 */ 's', 'v', 'c', 0,
  /* 892 */ 's', 'm', 'l', 'a', 'd', 0,
  /* 898 */ 's', 'm', 'u', 'a', 'd', 0,
  /* 904 */ 'v', 'a', 'b', 'd', 0,
  /* 909 */ 'q', 'd', 'a', 'd', 'd', 0,
  /* 915 */ 'v', 'r', 'h', 'a', 'd', 'd', 0,
  /* 922 */ 'v', 'h', 'a', 'd', 'd', 0,
  /* 928 */ 'v', 'p', 'a', 'd', 'd', 0,
  /* 934 */ 'v', 'q', 'a', 'd', 'd', 0,
  /* 940 */ 'v', 'a', 'd', 'd', 0,
  /* 945 */ 's', 'm', 'l', 'a', 'l', 'd', 0,
  /* 952 */ 'y', 'i', 'e', 'l', 'd', 0,
  /* 958 */ 'p', 'l', 'd', 0,
  /* 962 */ 's', 'm', 'l', 's', 'l', 'd', 0,
  /* 969 */ 'v', 'a', 'n', 'd', 0,
  /* 974 */ 'l', 'd', 'r', 'd', 0,
  /* 979 */ 's', 't', 'r', 'd', 0,
  /* 984 */ 's', 'm', 'l', 's', 'd', 0,
  /* 990 */ 's', 'm', 'u', 's', 'd', 0,
  /* 996 */ 'l', 'd', 'r', 'e', 'x', 'd', 0,
  /* 1003 */ 's', 't', 'r', 'e', 'x', 'd', 0,
  /* 1010 */ 'w', 'f', 'e', 0,
  /* 1014 */ 'v', 'a', 'c', 'g', 'e', 0,
  /* 1020 */ 'v', 'c', 'g', 'e', 0,
  /* 1025 */ 'v', 'c', 'l', 'e', 0,
  /* 1030 */ 'v', 'r', 'e', 'c', 'p', 'e', 0,
  /* 1037 */ 'v', 'c', 'm', 'p', 'e', 0,
  /* 1043 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 0,
  /* 1051 */ 'v', 'b', 'i', 'f', 0,
  /* 1056 */ 'd', 'b', 'g', 0,
  /* 1060 */ 'v', 'q', 'n', 'e', 'g', 0,
  /* 1066 */ 'v', 'n', 'e', 'g', 0,
  /* 1071 */ 's', 'x', 't', 'a', 'h', 0,
  /* 1077 */ 'u', 'x', 't', 'a', 'h', 0,
  /* 1083 */ 't', 'b', 'h', 0,
  /* 1087 */ 'v', 'q', 'd', 'm', 'u', 'l', 'h', 0,
  /* 1095 */ 'v', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 0,
  /* 1104 */ 'l', 'd', 'r', 'h', 0,
  /* 1109 */ 's', 't', 'r', 'h', 0,
  /* 1114 */ 'l', 'd', 'r', 's', 'h', 0,
  /* 1120 */ 'p', 'u', 's', 'h', 0,
  /* 1125 */ 'r', 'e', 'v', 's', 'h', 0,
  /* 1131 */ 's', 'x', 't', 'h', 0,
  /* 1136 */ 'u', 'x', 't', 'h', 0,
  /* 1141 */ 'l', 'd', 'r', 'e', 'x', 'h', 0,
  /* 1148 */ 's', 't', 'r', 'e', 'x', 'h', 0,
  /* 1155 */ 'b', 'f', 'i', 0,
  /* 1159 */ 'w', 'f', 'i', 0,
  /* 1163 */ 'p', 'l', 'i', 0,
  /* 1167 */ 'v', 's', 'l', 'i', 0,
  /* 1172 */ 'v', 's', 'r', 'i', 0,
  /* 1177 */ 'b', 'x', 'j', 0,
  /* 1181 */ 'l', 'd', 'c', '2', 'l', 0,
  /* 1187 */ 's', 't', 'c', '2', 'l', 0,
  /* 1193 */ 'u', 'm', 'a', 'a', 'l', 0,
  /* 1199 */ 'v', 'a', 'b', 'a', 'l', 0,
  /* 1205 */ 'v', 'p', 'a', 'd', 'a', 'l', 0,
  /* 1212 */ 'v', 'q', 'd', 'm', 'l', 'a', 'l', 0,
  /* 1220 */ 's', 'm', 'l', 'a', 'l', 0,
  /* 1226 */ 'u', 'm', 'l', 'a', 'l', 0,
  /* 1232 */ 'v', 'm', 'l', 'a', 'l', 0,
  /* 1238 */ 'v', 't', 'b', 'l', 0,
  /* 1243 */ 'v', 's', 'u', 'b', 'l', 0,
  /* 1249 */ 'l', 'd', 'c', 'l', 0,
  /* 1254 */ 's', 't', 'c', 'l', 0,
  /* 1259 */ 'v', 'a', 'b', 'd', 'l', 0,
  /* 1265 */ 'v', 'p', 'a', 'd', 'd', 'l', 0,
  /* 1272 */ 'v', 'a', 'd', 'd', 'l', 0,
  /* 1278 */ 's', 'e', 'l', 0,
  /* 1282 */ 'v', 'q', 's', 'h', 'l', 0,
  /* 1288 */ 'v', 'q', 'r', 's', 'h', 'l', 0,
  /* 1295 */ 'v', 'r', 's', 'h', 'l', 0,
  /* 1301 */ 'v', 's', 'h', 'l', 0,
  /* 1306 */ 'v', 's', 'h', 'l', 'l', 0,
  /* 1312 */ 'v', 'q', 'd', 'm', 'u', 'l', 'l', 0,
  /* 1320 */ 's', 'm', 'u', 'l', 'l', 0,
  /* 1326 */ 'u', 'm', 'u', 'l', 'l', 0,
  /* 1332 */ 'v', 'm', 'u', 'l', 'l', 0,
  /* 1338 */ 'v', 'b', 's', 'l', 0,
  /* 1343 */ 'v', 'q', 'd', 'm', 'l', 's', 'l', 0,
  /* 1351 */ 'v', 'm', 'l', 's', 'l', 0,
  /* 1357 */ 's', 'm', 'm', 'u', 'l', 0,
  /* 1363 */ 'v', 'n', 'm', 'u', 'l', 0,
  /* 1369 */ 'v', 'm', 'u', 'l', 0,
  /* 1374 */ 'v', 'm', 'o', 'v', 'l', 0,
  /* 1380 */ 'l', 'd', 'm', 0,
  /* 1384 */ 's', 't', 'm', 0,
  /* 1388 */ 'v', 'r', 's', 'u', 'b', 'h', 'n', 0,
  /* 1396 */ 'v', 's', 'u', 'b', 'h', 'n', 0,
  /* 1403 */ 'v', 'r', 'a', 'd', 'd', 'h', 'n', 0,
  /* 1411 */ 'v', 'a', 'd', 'd', 'h', 'n', 0,
  /* 1418 */ 'v', 'p', 'm', 'i', 'n', 0,
  /* 1424 */ 'v', 'm', 'i', 'n', 0,
  /* 1429 */ 'c', 'm', 'n', 0,
  /* 1433 */ 'v', 'q', 's', 'h', 'r', 'n', 0,
  /* 1440 */ 'v', 'q', 'r', 's', 'h', 'r', 'n', 0,
  /* 1448 */ 'v', 'r', 's', 'h', 'r', 'n', 0,
  /* 1455 */ 'v', 's', 'h', 'r', 'n', 0,
  /* 1461 */ 'v', 'o', 'r', 'n', 0,
  /* 1466 */ 'v', 't', 'r', 'n', 0,
  /* 1471 */ 'v', 'q', 's', 'h', 'r', 'u', 'n', 0,
  /* 1479 */ 'v', 'q', 'r', 's', 'h', 'r', 'u', 'n', 0,
  /* 1488 */ 'v', 'q', 'm', 'o', 'v', 'u', 'n', 0,
  /* 1496 */ 'v', 'm', 'v', 'n', 0,
  /* 1501 */ 'v', 'q', 'm', 'o', 'v', 'n', 0,
  /* 1508 */ 'v', 'm', 'o', 'v', 'n', 0,
  /* 1514 */ 't', 'r', 'a', 'p', 0,
  /* 1519 */ 'c', 'd', 'p', 0,
  /* 1523 */ 'v', 'z', 'i', 'p', 0,
  /* 1528 */ 'v', 'c', 'm', 'p', 0,
  /* 1533 */ 'n', 'o', 'p', 0,
  /* 1537 */ 'p', 'o', 'p', 0,
  /* 1541 */ 'v', 'd', 'u', 'p', 0,
  /* 1546 */ 'v', 's', 'w', 'p', 0,
  /* 1551 */ 'v', 'u', 'z', 'p', 0,
  /* 1556 */ 'v', 'c', 'e', 'q', 0,
  /* 1561 */ 't', 'e', 'q', 0,
  /* 1565 */ 's', 'm', 'm', 'l', 'a', 'r', 0,
  /* 1572 */ 'm', 'c', 'r', 0,
  /* 1576 */ 'a', 'd', 'r', 0,
  /* 1580 */ 'v', 'l', 'd', 'r', 0,
  /* 1585 */ 'v', 'r', 's', 'h', 'r', 0,
  /* 1591 */ 'v', 's', 'h', 'r', 0,
  /* 1596 */ 's', 'm', 'm', 'u', 'l', 'r', 0,
  /* 1603 */ 'v', 'e', 'o', 'r', 0,
  /* 1608 */ 'r', 'o', 'r', 0,
  /* 1612 */ 'm', 'c', 'r', 'r', 0,
  /* 1617 */ 'v', 'o', 'r', 'r', 0,
  /* 1622 */ 'a', 's', 'r', 0,
  /* 1626 */ 's', 'm', 'm', 'l', 's', 'r', 0,
  /* 1633 */ 'v', 'm', 's', 'r', 0,
  /* 1638 */ 'v', 's', 't', 'r', 0,
  /* 1643 */ 'v', 'c', 'v', 't', 'r', 0,
  /* 1649 */ 'v', 'q', 'a', 'b', 's', 0,
  /* 1655 */ 'v', 'a', 'b', 's', 0,
  /* 1660 */ 'v', 'c', 'l', 's', 0,
  /* 1665 */ 's', 'm', 'm', 'l', 's', 0,
  /* 1671 */ 'v', 'n', 'm', 'l', 's', 0,
  /* 1677 */ 'v', 'm', 'l', 's', 0,
  /* 1682 */ 'v', 'f', 'm', 's', 0,
  /* 1687 */ 'v', 'f', 'n', 'm', 's', 0,
  /* 1693 */ 'v', 'r', 'e', 'c', 'p', 's', 0,
  /* 1700 */ 'v', 'm', 'r', 's', 0,
  /* 1705 */ 'a', 's', 'r', 's', 0,
  /* 1710 */ 'l', 's', 'r', 's', 0,
  /* 1715 */ 'v', 'r', 's', 'q', 'r', 't', 's', 0,
  /* 1723 */ 'm', 'o', 'v', 's', 0,
  /* 1728 */ 's', 's', 'a', 't', 0,
  /* 1733 */ 'u', 's', 'a', 't', 0,
  /* 1738 */ 's', 'm', 'l', 'a', 'b', 't', 0,
  /* 1745 */ 'p', 'k', 'h', 'b', 't', 0,
  /* 1751 */ 's', 'm', 'l', 'a', 'l', 'b', 't', 0,
  /* 1759 */ 's', 'm', 'u', 'l', 'b', 't', 0,
  /* 1766 */ 'l', 'd', 'r', 'b', 't', 0,
  /* 1772 */ 's', 't', 'r', 'b', 't', 0,
  /* 1778 */ 'l', 'd', 'r', 's', 'b', 't', 0,
  /* 1785 */ 'v', 'a', 'c', 'g', 't', 0,
  /* 1791 */ 'v', 'c', 'g', 't', 0,
  /* 1796 */ 'l', 'd', 'r', 'h', 't', 0,
  /* 1802 */ 's', 't', 'r', 'h', 't', 0,
  /* 1808 */ 'l', 'd', 'r', 's', 'h', 't', 0,
  /* 1815 */ 'r', 'b', 'i', 't', 0,
  /* 1820 */ 'v', 'b', 'i', 't', 0,
  /* 1825 */ 'v', 'c', 'l', 't', 0,
  /* 1830 */ 'v', 'c', 'n', 't', 0,
  /* 1835 */ 'b', 'k', 'p', 't', 0,
  /* 1840 */ 'l', 'd', 'r', 't', 0,
  /* 1845 */ 'v', 's', 'q', 'r', 't', 0,
  /* 1851 */ 's', 't', 'r', 't', 0,
  /* 1856 */ 'v', 't', 's', 't', 0,
  /* 1861 */ 's', 'm', 'l', 'a', 't', 't', 0,
  /* 1868 */ 's', 'm', 'l', 'a', 'l', 't', 't', 0,
  /* 1876 */ 's', 'm', 'u', 'l', 't', 't', 0,
  /* 1883 */ 'v', 'c', 'v', 't', 't', 0,
  /* 1889 */ 'v', 'c', 'v', 't', 0,
  /* 1894 */ 'm', 'o', 'v', 't', 0,
  /* 1899 */ 's', 'm', 'l', 'a', 'w', 't', 0,
  /* 1906 */ 's', 'm', 'u', 'l', 'w', 't', 0,
  /* 1913 */ 'v', 'e', 'x', 't', 0,
  /* 1918 */ 'v', 'q', 's', 'h', 'l', 'u', 0,
  /* 1925 */ 'r', 'e', 'v', 0,
  /* 1929 */ 's', 'e', 'v', 0,
  /* 1933 */ 's', 'd', 'i', 'v', 0,
  /* 1938 */ 'u', 'd', 'i', 'v', 0,
  /* 1943 */ 'v', 'd', 'i', 'v', 0,
  /* 1948 */ 'v', 'm', 'o', 'v', 0,
  /* 1953 */ 'v', 's', 'u', 'b', 'w', 0,
  /* 1959 */ 'v', 'a', 'd', 'd', 'w', 0,
  /* 1965 */ 'p', 'l', 'd', 'w', 0,
  /* 1970 */ 'm', 'o', 'v', 'w', 0,
  /* 1975 */ 'v', 'p', 'm', 'a', 'x', 0,
  /* 1981 */ 'v', 'm', 'a', 'x', 0,
  /* 1986 */ 's', 'h', 's', 'a', 'x', 0,
  /* 1992 */ 'u', 'h', 's', 'a', 'x', 0,
  /* 1998 */ 'u', 'q', 's', 'a', 'x', 0,
  /* 2004 */ 's', 's', 'a', 'x', 0,
  /* 2009 */ 'u', 's', 'a', 'x', 0,
  /* 2014 */ 'v', 't', 'b', 'x', 0,
  /* 2019 */ 's', 'm', 'l', 'a', 'd', 'x', 0,
  /* 2026 */ 's', 'm', 'u', 'a', 'd', 'x', 0,
  /* 2033 */ 's', 'm', 'l', 'a', 'l', 'd', 'x', 0,
  /* 2041 */ 's', 'm', 'l', 's', 'l', 'd', 'x', 0,
  /* 2049 */ 's', 'm', 'l', 's', 'd', 'x', 0,
  /* 2056 */ 's', 'm', 'u', 's', 'd', 'x', 0,
  /* 2063 */ 'l', 'd', 'r', 'e', 'x', 0,
  /* 2069 */ 'c', 'l', 'r', 'e', 'x', 0,
  /* 2075 */ 's', 't', 'r', 'e', 'x', 0,
  /* 2081 */ 's', 'b', 'f', 'x', 0,
  /* 2086 */ 'u', 'b', 'f', 'x', 0,
  /* 2091 */ 'b', 'l', 'x', 0,
  /* 2095 */ 'r', 'r', 'x', 0,
  /* 2099 */ 's', 'h', 'a', 's', 'x', 0,
  /* 2105 */ 'u', 'h', 'a', 's', 'x', 0,
  /* 2111 */ 'u', 'q', 'a', 's', 'x', 0,
  /* 2117 */ 's', 'a', 's', 'x', 0,
  /* 2122 */ 'u', 'a', 's', 'x', 0,
  /* 2127 */ 'v', 'c', 'l', 'z', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, CLREX, TRAP, tTRAP
    return;
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, ASRi, ASRr, BICri, BICrr, EO...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, MLA, MOVsr, MVNsr, ORRrsi, RSB...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 3:
    // ADCrsr, ADDrsr, ANDrsr, BICrsr, EORrsr, ORRrsr, RSBrsr, RSCrsr, SBCrsr...
    printSBitModifierOperand(MI, 7, O); 
    printPredicateOperand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printSORegRegOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ADR, CLZ, CMNzri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, LDMDA_UPD, L...
    printPredicateOperand(MI, 2, O); 
    break;
  case 5:
    // BFC, CMNzrsi, CMPrsi, LDRBi12, LDREXD, LDRcp, LDRi12, MOVTi16, QADD, Q...
    printPredicateOperand(MI, 3, O); 
    break;
  case 6:
    // BFI, CMNzrsr, CMPrsr, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, L...
    printPredicateOperand(MI, 4, O); 
    break;
  case 7:
    // BKPT, BLX_pred, BL_pred, BXJ, BX_pred, Bcc, DBG, LDMDA, LDMDB, LDMIA, ...
    printPredicateOperand(MI, 1, O); 
    break;
  case 8:
    // BL, BLX, BLXi, BX, CPS1p, RFEDA, RFEDA_UPD, RFEDB, RFEDB_UPD, RFEIA, R...
    printOperand(MI, 0, O); 
    break;
  case 9:
    // BX_RET, FMSTAT, MOVPCLR, NOP, SEV, WFE, WFI, YIELD, t2CLREX, t2NOP, t2...
    printPredicateOperand(MI, 0, O); 
    break;
  case 10:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD4DUPd16, V...
    printPredicateOperand(MI, 6, O); 
    break;
  case 11:
    // CDP2, LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, ...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, O); 
    break;
  case 13:
    // DMB, DSB, ISB, t2DMB, t2DSB, t2ISB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 14:
    // ITasm, t2IT
    printThumbITMask(MI, 1, O); 
    break;
  case 15:
    // LDRBT_POST_IMM, LDRBT_POST_REG, LDRB_POST_IMM, LDRB_POST_REG, LDRB_PRE...
    printPredicateOperand(MI, 5, O); 
    break;
  case 16:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, RRXi, t2MOVi, t2MOVr, t2MVNi, t2MVNr,...
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 17:
    // MRC2, t2MRC, t2MRC2
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 18:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 19:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, O); 
    return;
    break;
  case 20:
    // SETEND, tSETEND
    printSetendOperand(MI, 0, O); 
    return;
    break;
  case 21:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD2LNd16, VLD2LNd32, VLD2...
    printPredicateOperand(MI, 7, O); 
    break;
  case 22:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 23:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 24:
    // VLD4DUPd16_UPD, VLD4DUPd32_UPD, VLD4DUPd8_UPD, VLD4DUPq16_UPD, VLD4DUP...
    printPredicateOperand(MI, 8, O); 
    break;
  case 25:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 26:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 6 bits for 62 unique commands.
  switch ((Bits >> 21) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    O << "\t"; 
    break;
  case 1:
    // ASRi, ASRr, ITasm, LSLi, LSLr, LSRi, LSRr, RORi, RORr, RRXi, t2LDRBpcr...
    O << ' '; 
    break;
  case 2:
    // BL, BLX, BLXi, BX, CPS1p, NOP, RFEDA, RFEDB, RFEIA, RFEIB, SEV, SRSDA,...
    return;
    break;
  case 3:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 4:
    // CDP2, MCR2, MCRR2, MRRC2, t2CDP2, t2MCR, t2MCR2, t2MCRR, t2MCRR2, t2MR...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 5:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VFMAD, V...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    break;
  case 6:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEd, VACGEq, VACGTd...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 7:
    // FMSTAT
    O << "\tAPSR_nzcv, fpscr"; 
    return;
    break;
  case 8:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    printCImmediate(MI, 1, O); 
    O << ", "; 
    break;
  case 9:
    // MOVPCLR
    O << "\tpc, lr"; 
    return;
    break;
  case 10:
    // RFEDA_UPD, RFEDB_UPD, RFEIA_UPD, RFEIB_UPD
    O << '!'; 
    return;
    break;
  case 11:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 13:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 14:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 15:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 17:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    O << ".i32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    O << ".i16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VLD1...
    O << ".8\t"; 
    break;
  case 22:
    // VCVTBHS, VCVTTHS, VCVTf2h
    O << ".f16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 23:
    // VCVTBSH, VCVTTSH, VCVTh2f
    O << ".f32.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 26:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 27:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 29:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 30:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VLD1DUPd16, ...
    O << ".16\t"; 
    break;
  case 31:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VEXTd32, VEXTq32, VGETLNi32, V...
    O << ".32\t"; 
    break;
  case 32:
    // VEXTq64, VLD1d64, VLD1d64Q, VLD1d64Qwb_fixed, VLD1d64Qwb_register, VLD...
    O << ".64\t"; 
    break;
  case 33:
    // VLD1LNd16, VLD1LNd16_UPD, VLD2LNd16, VLD2LNd16_UPD, VLD2LNq16, VLD2LNq...
    O << ".16\t{"; 
    break;
  case 34:
    // VLD1LNd32, VLD1LNd32_UPD, VLD2LNd32, VLD2LNd32_UPD, VLD2LNq32, VLD2LNq...
    O << ".32\t{"; 
    break;
  case 35:
    // VLD1LNd8, VLD1LNd8_UPD, VLD2LNd8, VLD2LNd8_UPD, VLD3DUPd8, VLD3DUPd8_U...
    O << ".8\t{"; 
    break;
  case 36:
    // VMSR
    O << "\tfpscr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 37:
    // VMSR_FPEXC
    O << "\tfpexc, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 38:
    // VMSR_FPSID
    O << "\tfpsid, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 39:
    // VMULLp, VMULpd, VMULpq
    O << ".p8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 40:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 41:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 42:
    // VSHTOD
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 43:
    // VSHTOS
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 44:
    // VSITOD, VSLTOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 45:
    // VTOSHD
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 46:
    // VTOSHS
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 47:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 48:
    // VTOUHD
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 49:
    // VTOUHS
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 50:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 51:
    // VUHTOD
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 52:
    // VUHTOS
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printFBits16(MI, 2, O); 
    return;
    break;
  case 53:
    // VUITOD, VULTOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 54:
    // t2ADCrr, t2ADCrs, t2ADDri, t2ADDrr, t2ADDrs, t2ADR, t2ANDrr, t2ANDrs, ...
    O << ".w\t"; 
    break;
  case 55:
    // t2NOP, t2SEV, t2WFE, t2WFI, t2YIELD
    O << ".w"; 
    return;
    break;
  case 56:
    // t2SRSDB, t2SRSIA
    O << "\tsp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 57:
    // t2SRSDB_UPD, t2SRSIA_UPD
    O << "\tsp!, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 58:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 59:
    // tCBNZ, tCBZ, tMOVSr
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 60:
    // tLDRpci
    O << ".n\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 61:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 2 encoded into 6 bits for 52 unique commands.
  switch ((Bits >> 15) & 63) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDri, ADDrr, ADDrsi, ADR, ANDri, ANDrr, ANDrsi,...
    printOperand(MI, 0, O); 
    break;
  case 1:
    // CDP, LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OP...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    break;
  case 2:
    // CDP2, t2CDP2, tCDP
    printCImmediate(MI, 2, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 3:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIFlag(MI, 1, O); 
    break;
  case 4:
    // FCONSTD, FCONSTS, VABDfd, VABDfq, VABSD, VABSS, VABSfd, VABSfq, VACGEd...
    O << ", "; 
    break;
  case 5:
    // ITasm, t2IT
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 6:
    // LDC2L_OFFSET, LDC2L_PRE, LDC2_OFFSET, LDC2_PRE, STC2L_OFFSET, STC2L_PR...
    printAddrMode5Operand(MI, 2, O); 
    break;
  case 7:
    // LDC2L_OPTION, LDC2L_POST, LDC2_OPTION, LDC2_POST, STC2L_OPTION, STC2L_...
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    break;
  case 8:
    // LDMDA_UPD, LDMDB_UPD, LDMIA_UPD, LDMIB_UPD, STMDA_UPD, STMDB_UPD, STMI...
    printOperand(MI, 1, O); 
    break;
  case 9:
    // MCR2, MCRR2, MRRC2, VABALsv2i64, VABALsv4i32, VABALsv8i16, VABALuv2i64...
    printOperand(MI, 2, O); 
    break;
  case 10:
    // MRC
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 11:
    // MSR, MSRi, t2MSR_AR, t2MSR_M
    printMSRMaskOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 14:
    // VCVTf2sd, VCVTf2sq, VCVTf2ud, VCVTf2uq, VCVTs2fd, VCVTs2fq, VCVTu2fd, ...
    return;
    break;
  case 15:
    // VLD1DUPd16, VLD1DUPd16wb_fixed, VLD1DUPd16wb_register, VLD1DUPd32, VLD...
    printVectorListOneAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VLD1DUPq16, VLD1DUPq16wb_fixed, VLD1DUPq16wb_register, VLD1DUPq32, VLD...
    printVectorListTwoAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 17:
    // VLD1d16, VLD1d16wb_fixed, VLD1d16wb_register, VLD1d32, VLD1d32wb_fixed...
    printVectorListOne(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VLD1d16Q, VLD1d16Qwb_fixed, VLD1d16Qwb_register, VLD1d32Q, VLD1d32Qwb_...
    printVectorListFour(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VLD1d16T, VLD1d16Twb_fixed, VLD1d16Twb_register, VLD1d32T, VLD1d32Twb_...
    printVectorListThree(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VLD1q16, VLD1q16wb_fixed, VLD1q16wb_register, VLD1q32, VLD1q32wb_fixed...
    printVectorListTwo(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VLD2DUPd16x2, VLD2DUPd16x2wb_fixed, VLD2DUPd16x2wb_register, VLD2DUPd3...
    printVectorListTwoSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    break;
  case 22:
    // VLD2b16, VLD2b16wb_fixed, VLD2b16wb_register, VLD2b32, VLD2b32wb_fixed...
    printVectorListTwoSpaced(MI, 0, O); 
    O << ", "; 
    break;
  case 23:
    // VLD3DUPdAsm_16, VLD3DUPdAsm_32, VLD3DUPdAsm_8, VLD3DUPdWB_fixed_Asm_16...
    printVectorListThreeAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 24:
    // VLD3DUPqAsm_16, VLD3DUPqAsm_32, VLD3DUPqAsm_8, VLD3DUPqWB_fixed_Asm_16...
    printVectorListThreeSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 25:
    // VLD3qAsm_16, VLD3qAsm_32, VLD3qAsm_8, VLD3qWB_fixed_Asm_16, VLD3qWB_fi...
    printVectorListThreeSpaced(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 26:
    // VLD4DUPdAsm_16, VLD4DUPdAsm_32, VLD4DUPdAsm_8, VLD4DUPdWB_fixed_Asm_16...
    printVectorListFourAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 27:
    // VLD4DUPqAsm_16, VLD4DUPqAsm_32, VLD4DUPqAsm_8, VLD4DUPqWB_fixed_Asm_16...
    printVectorListFourSpacedAllLanes(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 28:
    // VLD4qAsm_16, VLD4qAsm_32, VLD4qAsm_8, VLD4qWB_fixed_Asm_16, VLD4qWB_fi...
    printVectorListFourSpaced(MI, 0, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    break;
  case 29:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST2LNd16_UPD, VST2LNd32_U...
    printOperand(MI, 4, O); 
    break;
  case 30:
    // VST1d16, VST1d32, VST1d64, VST1d8
    printVectorListOne(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 31:
    // VST1d16Q, VST1d32Q, VST1d64Q, VST1d8Q, VST2q16, VST2q32, VST2q8
    printVectorListFour(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 32:
    // VST1d16Qwb_fixed, VST1d32Qwb_fixed, VST1d64Qwb_fixed, VST1d8Qwb_fixed,...
    printVectorListFour(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 33:
    // VST1d16Qwb_register, VST1d32Qwb_register, VST1d64Qwb_register, VST1d8Q...
    printVectorListFour(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 34:
    // VST1d16T, VST1d32T, VST1d64T, VST1d8T
    printVectorListThree(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 35:
    // VST1d16Twb_fixed, VST1d32Twb_fixed, VST1d64Twb_fixed, VST1d8Twb_fixed
    printVectorListThree(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 36:
    // VST1d16Twb_register, VST1d32Twb_register, VST1d64Twb_register, VST1d8T...
    printVectorListThree(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 37:
    // VST1d16wb_fixed, VST1d32wb_fixed, VST1d64wb_fixed, VST1d8wb_fixed
    printVectorListOne(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 38:
    // VST1d16wb_register, VST1d32wb_register, VST1d64wb_register, VST1d8wb_r...
    printVectorListOne(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 39:
    // VST1q16, VST1q32, VST1q64, VST1q8, VST2d16, VST2d32, VST2d8
    printVectorListTwo(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 40:
    // VST1q16wb_fixed, VST1q32wb_fixed, VST1q64wb_fixed, VST1q8wb_fixed, VST...
    printVectorListTwo(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 41:
    // VST1q16wb_register, VST1q32wb_register, VST1q64wb_register, VST1q8wb_r...
    printVectorListTwo(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 42:
    // VST2b16, VST2b32, VST2b8
    printVectorListTwoSpaced(MI, 2, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case 43:
    // VST2b16wb_fixed, VST2b32wb_fixed, VST2b8wb_fixed
    printVectorListTwoSpaced(MI, 3, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << '!'; 
    return;
    break;
  case 44:
    // VST2b16wb_register, VST2b32wb_register, VST2b8wb_register
    printVectorListTwoSpaced(MI, 4, O); 
    O << ", "; 
    printAddrMode6Operand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 45:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 46:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand(MI, 0, O); 
    return;
    break;
  case 47:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, O); 
    return;
    break;
  case 48:
    // t2TBB
    printAddrModeTBB(MI, 0, O); 
    return;
    break;
  case 49:
    // t2TBH
    printAddrModeTBH(MI, 0, O); 
    return;
    break;
  case 50:
    // tADC, tADDi8, tAND, tASRrr, tBIC, tEOR, tLSLrr, tLSRrr, tORR, tROR, tS...
    printOperand(MI, 3, O); 
    return;
    break;
  case 51:
    // tPOP, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCri:
  case ARM::ADCrr:
  case ARM::ADCrsi:
  case ARM::ADDri:
  case ARM::ADDrr:
  case ARM::ADDrsi:
  case ARM::ANDri:
  case ARM::ANDrr:
  case ARM::ANDrsi:
  case ARM::ASRi:
  case ARM::ASRr:
  case ARM::BICri:
  case ARM::BICrr:
  case ARM::BICrsi:
  case ARM::EORri:
  case ARM::EORrr:
  case ARM::EORrsi:
  case ARM::LDRD:
  case ARM::LDREXD:
  case ARM::LSLi:
  case ARM::LSLr:
  case ARM::LSRi:
  case ARM::LSRr:
  case ARM::MUL:
  case ARM::ORRri:
  case ARM::ORRrr:
  case ARM::ORRrsi:
  case ARM::QADD:
  case ARM::QADD16:
  case ARM::QADD8:
  case ARM::QASX:
  case ARM::QDADD:
  case ARM::QDSUB:
  case ARM::QSAX:
  case ARM::QSUB:
  case ARM::QSUB16:
  case ARM::QSUB8:
  case ARM::RORi:
  case ARM::RORr:
  case ARM::RSBri:
  case ARM::RSBrr:
  case ARM::RSBrsi:
  case ARM::RSCri:
  case ARM::RSCrr:
  case ARM::RSCrsi:
  case ARM::SADD16:
  case ARM::SADD8:
  case ARM::SASX:
  case ARM::SBCri:
  case ARM::SBCrr:
  case ARM::SBCrsi:
  case ARM::SEL:
  case ARM::SHADD16:
  case ARM::SHADD8:
  case ARM::SHASX:
  case ARM::SHSAX:
  case ARM::SHSUB16:
  case ARM::SHSUB8:
  case ARM::SMMUL:
  case ARM::SMMULR:
  case ARM::SMUAD:
  case ARM::SMUADX:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SMUSD:
  case ARM::SMUSDX:
  case ARM::SSAX:
  case ARM::SSUB16:
  case ARM::SSUB8:
  case ARM::STRD:
  case ARM::STREX:
  case ARM::STREXB:
  case ARM::STREXH:
  case ARM::SUBri:
  case ARM::SUBrr:
  case ARM::SUBrsi:
  case ARM::SWP:
  case ARM::SWPB:
  case ARM::UADD16:
  case ARM::UADD8:
  case ARM::UASX:
  case ARM::UHADD16:
  case ARM::UHADD8:
  case ARM::UHASX:
  case ARM::UHSAX:
  case ARM::UHSUB16:
  case ARM::UHSUB8:
  case ARM::UQADD16:
  case ARM::UQADD8:
  case ARM::UQASX:
  case ARM::UQSAX:
  case ARM::UQSUB16:
  case ARM::UQSUB8:
  case ARM::USAD8:
  case ARM::USAT16:
  case ARM::USAX:
  case ARM::USUB16:
  case ARM::USUB8:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VMOVDRR:
  case ARM::VMOVRRD:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
  case ARM::t2ADCri:
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDri:
  case ARM::t2ADDri12:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDri:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICri:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORri:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LDRDi8:
  case ARM::t2LDREXD:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORNrs:
  case ARM::t2ORRri:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2QADD:
  case ARM::t2QADD16:
  case ARM::t2QADD8:
  case ARM::t2QASX:
  case ARM::t2QDADD:
  case ARM::t2QDSUB:
  case ARM::t2QSAX:
  case ARM::t2QSUB:
  case ARM::t2QSUB16:
  case ARM::t2QSUB8:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBri:
  case ARM::t2RSBrr:
  case ARM::t2RSBrs:
  case ARM::t2SADD16:
  case ARM::t2SADD8:
  case ARM::t2SASX:
  case ARM::t2SBCri:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SDIV:
  case ARM::t2SEL:
  case ARM::t2SHADD16:
  case ARM::t2SHADD8:
  case ARM::t2SHASX:
  case ARM::t2SHSAX:
  case ARM::t2SHSUB16:
  case ARM::t2SHSUB8:
  case ARM::t2SMMUL:
  case ARM::t2SMMULR:
  case ARM::t2SMUAD:
  case ARM::t2SMUADX:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SMUSD:
  case ARM::t2SMUSDX:
  case ARM::t2SSAX:
  case ARM::t2SSUB16:
  case ARM::t2SSUB8:
  case ARM::t2STRDi8:
  case ARM::t2STREX:
  case ARM::t2STREXB:
  case ARM::t2STREXH:
  case ARM::t2SUBri:
  case ARM::t2SUBri12:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
  case ARM::t2UADD16:
  case ARM::t2UADD8:
  case ARM::t2UASX:
  case ARM::t2UDIV:
  case ARM::t2UHADD16:
  case ARM::t2UHADD8:
  case ARM::t2UHASX:
  case ARM::t2UHSAX:
  case ARM::t2UHSUB16:
  case ARM::t2UHSUB8:
  case ARM::t2UQADD16:
  case ARM::t2UQADD8:
  case ARM::t2UQASX:
  case ARM::t2UQSAX:
  case ARM::t2UQSUB16:
  case ARM::t2UQSUB8:
  case ARM::t2USAD8:
  case ARM::t2USAT16:
  case ARM::t2USAX:
  case ARM::t2USUB16:
  case ARM::t2USUB8:
  case ARM::tADDrSPi:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCri: 
    case ARM::ADCrr: 
    case ARM::ADDri: 
    case ARM::ADDrr: 
    case ARM::ANDri: 
    case ARM::ANDrr: 
    case ARM::ASRi: 
    case ARM::ASRr: 
    case ARM::BICri: 
    case ARM::BICrr: 
    case ARM::EORri: 
    case ARM::EORrr: 
    case ARM::LSLi: 
    case ARM::LSLr: 
    case ARM::LSRi: 
    case ARM::LSRr: 
    case ARM::MUL: 
    case ARM::ORRri: 
    case ARM::ORRrr: 
    case ARM::QADD: 
    case ARM::QADD16: 
    case ARM::QADD8: 
    case ARM::QASX: 
    case ARM::QDADD: 
    case ARM::QDSUB: 
    case ARM::QSAX: 
    case ARM::QSUB: 
    case ARM::QSUB16: 
    case ARM::QSUB8: 
    case ARM::RORi: 
    case ARM::RORr: 
    case ARM::RSBri: 
    case ARM::RSBrr: 
    case ARM::RSCri: 
    case ARM::RSCrr: 
    case ARM::SADD16: 
    case ARM::SADD8: 
    case ARM::SASX: 
    case ARM::SBCri: 
    case ARM::SBCrr: 
    case ARM::SEL: 
    case ARM::SHADD16: 
    case ARM::SHADD8: 
    case ARM::SHASX: 
    case ARM::SHSAX: 
    case ARM::SHSUB16: 
    case ARM::SHSUB8: 
    case ARM::SMMUL: 
    case ARM::SMMULR: 
    case ARM::SMUAD: 
    case ARM::SMUADX: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SMUSD: 
    case ARM::SMUSDX: 
    case ARM::SSAX: 
    case ARM::SSUB16: 
    case ARM::SSUB8: 
    case ARM::SUBri: 
    case ARM::SUBrr: 
    case ARM::UADD16: 
    case ARM::UADD8: 
    case ARM::UASX: 
    case ARM::UHADD16: 
    case ARM::UHADD8: 
    case ARM::UHASX: 
    case ARM::UHSAX: 
    case ARM::UHSUB16: 
    case ARM::UHSUB8: 
    case ARM::UQADD16: 
    case ARM::UQADD8: 
    case ARM::UQASX: 
    case ARM::UQSAX: 
    case ARM::UQSUB16: 
    case ARM::UQSUB8: 
    case ARM::USAD8: 
    case ARM::USAT16: 
    case ARM::USAX: 
    case ARM::USUB16: 
    case ARM::USUB8: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VMOVDRR: 
    case ARM::VMOVRRD: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: 
    case ARM::t2ADCri: 
    case ARM::t2ADCrr: 
    case ARM::t2ADDri: 
    case ARM::t2ADDri12: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDri: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRrr: 
    case ARM::t2BICri: 
    case ARM::t2BICrr: 
    case ARM::t2EORri: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRrr: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2ORRrr: 
    case ARM::t2QADD: 
    case ARM::t2QADD16: 
    case ARM::t2QADD8: 
    case ARM::t2QASX: 
    case ARM::t2QDADD: 
    case ARM::t2QDSUB: 
    case ARM::t2QSAX: 
    case ARM::t2QSUB: 
    case ARM::t2QSUB16: 
    case ARM::t2QSUB8: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBri: 
    case ARM::t2RSBrr: 
    case ARM::t2SADD16: 
    case ARM::t2SADD8: 
    case ARM::t2SASX: 
    case ARM::t2SBCri: 
    case ARM::t2SBCrr: 
    case ARM::t2SDIV: 
    case ARM::t2SEL: 
    case ARM::t2SHADD16: 
    case ARM::t2SHADD8: 
    case ARM::t2SHASX: 
    case ARM::t2SHSAX: 
    case ARM::t2SHSUB16: 
    case ARM::t2SHSUB8: 
    case ARM::t2SMMUL: 
    case ARM::t2SMMULR: 
    case ARM::t2SMUAD: 
    case ARM::t2SMUADX: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SMUSD: 
    case ARM::t2SMUSDX: 
    case ARM::t2SSAX: 
    case ARM::t2SSUB16: 
    case ARM::t2SSUB8: 
    case ARM::t2SUBri: 
    case ARM::t2SUBri12: 
    case ARM::t2SUBrr: 
    case ARM::t2UADD16: 
    case ARM::t2UADD8: 
    case ARM::t2UASX: 
    case ARM::t2UDIV: 
    case ARM::t2UHADD16: 
    case ARM::t2UHADD8: 
    case ARM::t2UHASX: 
    case ARM::t2UHSAX: 
    case ARM::t2UHSUB16: 
    case ARM::t2UHSUB8: 
    case ARM::t2UQADD16: 
    case ARM::t2UQADD8: 
    case ARM::t2UQASX: 
    case ARM::t2UQSAX: 
    case ARM::t2UQSUB16: 
    case ARM::t2UQSUB8: 
    case ARM::t2USAD8: 
    case ARM::t2USAT16: 
    case ARM::t2USAX: 
    case ARM::t2USUB16: 
    case ARM::t2USUB8: printOperand(MI, 2, O); break;
    case ARM::ADCrsi: 
    case ARM::ADDrsi: 
    case ARM::ANDrsi: 
    case ARM::BICrsi: 
    case ARM::EORrsi: 
    case ARM::ORRrsi: 
    case ARM::RSBrsi: 
    case ARM::RSCrsi: 
    case ARM::SBCrsi: 
    case ARM::SUBrsi: printSORegImmOperand(MI, 2, O); break;
    case ARM::LDRD: 
    case ARM::STRD: printAddrMode3Operand(MI, 2, O); break;
    case ARM::LDREXD: 
    case ARM::STREX: 
    case ARM::STREXB: 
    case ARM::STREXH: 
    case ARM::SWP: 
    case ARM::SWPB: 
    case ARM::t2LDREXD: 
    case ARM::t2STREXB: 
    case ARM::t2STREXH: printAddrMode7Operand(MI, 2, O); break;
    case ARM::t2ADCrs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORNrs: 
    case ARM::t2ORRrs: 
    case ARM::t2RSBrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2, O); break;
    case ARM::t2ASRri: 
    case ARM::t2LSRri: printThumbSRImm(MI, 2, O); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 2, O); break;
    case ARM::t2STREX: printT2AddrModeImm0_1020s4Operand(MI, 2, O); break;
    case ARM::tADDrSPi: printThumbS4ImmOperand(MI, 2, O); break;
    }
    return;
    break;
  case ARM::ADR:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrsi:
  case ARM::CMNzrsr:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrsi:
  case ARM::CMPrsr:
  case ARM::CPS3p:
  case ARM::LDMDA:
  case ARM::LDMDB:
  case ARM::LDMIA:
  case ARM::LDMIB:
  case ARM::LDRBi12:
  case ARM::LDRBrs:
  case ARM::LDREX:
  case ARM::LDREXB:
  case ARM::LDREXH:
  case ARM::LDRH:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::LDRcp:
  case ARM::LDRi12:
  case ARM::LDRrs:
  case ARM::MOVTi16:
  case ARM::MOVi:
  case ARM::MOVi16:
  case ARM::MOVr:
  case ARM::MOVr_TC:
  case ARM::MOVsi:
  case ARM::MOVsr:
  case ARM::MVNi:
  case ARM::MVNr:
  case ARM::MVNsi:
  case ARM::MVNsr:
  case ARM::RBIT:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::RRXi:
  case ARM::STMDA:
  case ARM::STMDB:
  case ARM::STMIA:
  case ARM::STMIB:
  case ARM::STRBi12:
  case ARM::STRBrs:
  case ARM::STRH:
  case ARM::STRi12:
  case ARM::STRrs:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrsi:
  case ARM::TEQrsr:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrsi:
  case ARM::TSTrsr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VLD1LNdAsm_16:
  case ARM::VLD1LNdAsm_32:
  case ARM::VLD1LNdAsm_8:
  case ARM::VLD2LNdAsm_16:
  case ARM::VLD2LNdAsm_32:
  case ARM::VLD2LNdAsm_8:
  case ARM::VLD2LNqAsm_16:
  case ARM::VLD2LNqAsm_32:
  case ARM::VLD3DUPdWB_register_Asm_16:
  case ARM::VLD3DUPdWB_register_Asm_32:
  case ARM::VLD3DUPdWB_register_Asm_8:
  case ARM::VLD3DUPqWB_register_Asm_16:
  case ARM::VLD3DUPqWB_register_Asm_32:
  case ARM::VLD3DUPqWB_register_Asm_8:
  case ARM::VLD3LNdAsm_16:
  case ARM::VLD3LNdAsm_32:
  case ARM::VLD3LNdAsm_8:
  case ARM::VLD3LNqAsm_16:
  case ARM::VLD3LNqAsm_32:
  case ARM::VLD3qWB_register_Asm_16:
  case ARM::VLD3qWB_register_Asm_32:
  case ARM::VLD3qWB_register_Asm_8:
  case ARM::VLD4DUPdWB_register_Asm_16:
  case ARM::VLD4DUPdWB_register_Asm_32:
  case ARM::VLD4DUPdWB_register_Asm_8:
  case ARM::VLD4DUPqWB_register_Asm_16:
  case ARM::VLD4DUPqWB_register_Asm_32:
  case ARM::VLD4DUPqWB_register_Asm_8:
  case ARM::VLD4LNdAsm_16:
  case ARM::VLD4LNdAsm_32:
  case ARM::VLD4LNdAsm_8:
  case ARM::VLD4LNqAsm_16:
  case ARM::VLD4LNqAsm_32:
  case ARM::VLD4qWB_register_Asm_16:
  case ARM::VLD4qWB_register_Asm_32:
  case ARM::VLD4qWB_register_Asm_8:
  case ARM::VLDMDIA:
  case ARM::VLDMSIA:
  case ARM::VLDRD:
  case ARM::VLDRS:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMOVRS:
  case ARM::VMOVSR:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNsv2i32:
  case ARM::VQRSHRNsv4i16:
  case ARM::VQRSHRNsv8i8:
  case ARM::VQRSHRNuv2i32:
  case ARM::VQRSHRNuv4i16:
  case ARM::VQRSHRNuv8i8:
  case ARM::VQRSHRUNv2i32:
  case ARM::VQRSHRUNv4i16:
  case ARM::VQRSHRUNv8i8:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNsv2i32:
  case ARM::VQSHRNsv4i16:
  case ARM::VQSHRNsv8i8:
  case ARM::VQSHRNuv2i32:
  case ARM::VQSHRNuv4i16:
  case ARM::VQSHRNuv8i8:
  case ARM::VQSHRUNv2i32:
  case ARM::VQSHRUNv4i16:
  case ARM::VQSHRUNv8i8:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRNv2i32:
  case ARM::VRSHRNv4i16:
  case ARM::VRSHRNv8i8:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLsv2i64:
  case ARM::VSHLLsv4i32:
  case ARM::VSHLLsv8i16:
  case ARM::VSHLLuv2i64:
  case ARM::VSHLLuv4i32:
  case ARM::VSHLLuv8i16:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRNv2i32:
  case ARM::VSHRNv4i16:
  case ARM::VSHRNv8i8:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VST1LNdAsm_16:
  case ARM::VST1LNdAsm_32:
  case ARM::VST1LNdAsm_8:
  case ARM::VST2LNdAsm_16:
  case ARM::VST2LNdAsm_32:
  case ARM::VST2LNdAsm_8:
  case ARM::VST2LNqAsm_16:
  case ARM::VST2LNqAsm_32:
  case ARM::VST3LNdAsm_16:
  case ARM::VST3LNdAsm_32:
  case ARM::VST3LNdAsm_8:
  case ARM::VST3LNqAsm_16:
  case ARM::VST3LNqAsm_32:
  case ARM::VST3qWB_register_Asm_16:
  case ARM::VST3qWB_register_Asm_32:
  case ARM::VST3qWB_register_Asm_8:
  case ARM::VST4LNdAsm_16:
  case ARM::VST4LNdAsm_32:
  case ARM::VST4LNdAsm_8:
  case ARM::VST4LNqAsm_16:
  case ARM::VST4LNqAsm_32:
  case ARM::VST4qWB_register_Asm_16:
  case ARM::VST4qWB_register_Asm_32:
  case ARM::VST4qWB_register_Asm_8:
  case ARM::VSTMDIA:
  case ARM::VSTMSIA:
  case ARM::VSTRD:
  case ARM::VSTRS:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VSWPd:
  case ARM::VSWPq:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VUZPd16:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2ADR:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CPS3p:
  case ARM::t2LDMDB:
  case ARM::t2LDMIA:
  case ARM::t2LDRBT:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBi8:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBpcrel:
  case ARM::t2LDRBs:
  case ARM::t2LDREX:
  case ARM::t2LDREXB:
  case ARM::t2LDREXH:
  case ARM::t2LDRHT:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHi8:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHpcrel:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBT:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBpcrel:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHT:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHpcrel:
  case ARM::t2LDRSHs:
  case ARM::t2LDRT:
  case ARM::t2LDRi12:
  case ARM::t2LDRi8:
  case ARM::t2LDRpci:
  case ARM::t2LDRpcrel:
  case ARM::t2LDRs:
  case ARM::t2MOVCCi16:
  case ARM::t2MOVSsi:
  case ARM::t2MOVSsr:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi:
  case ARM::t2MOVi16:
  case ARM::t2MOVr:
  case ARM::t2MOVsi:
  case ARM::t2MOVsr:
  case ARM::t2MRS_M:
  case ARM::t2MVNCCi:
  case ARM::t2MVNi:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2RBIT:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2RRX:
  case ARM::t2STMDB:
  case ARM::t2STMIA:
  case ARM::t2STRBT:
  case ARM::t2STRBi12:
  case ARM::t2STRBi8:
  case ARM::t2STRBs:
  case ARM::t2STRHT:
  case ARM::t2STRHi12:
  case ARM::t2STRHi8:
  case ARM::t2STRHs:
  case ARM::t2STRT:
  case ARM::t2STRi12:
  case ARM::t2STRi8:
  case ARM::t2STRs:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::tADDhirr:
  case ARM::tADDi3:
  case ARM::tADDrr:
  case ARM::tADDspi:
  case ARM::tADDspr:
  case ARM::tADR:
  case ARM::tASRri:
  case ARM::tCMNz:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tLDMIA:
  case ARM::tLDRBi:
  case ARM::tLDRBr:
  case ARM::tLDRHi:
  case ARM::tLDRHr:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRi:
  case ARM::tLDRpciASM:
  case ARM::tLDRr:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMOVr:
  case ARM::tMUL:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tSTRBi:
  case ARM::tSTRBr:
  case ARM::tSTRHi:
  case ARM::tSTRHr:
  case ARM::tSTRi:
  case ARM::tSTRr:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSUBspi:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADR: 
    case ARM::CLZ: 
    case ARM::CMNzri: 
    case ARM::CMNzrr: 
    case ARM::CMPri: 
    case ARM::CMPrr: 
    case ARM::MOVi: 
    case ARM::MOVi16: 
    case ARM::MOVr: 
    case ARM::MOVr_TC: 
    case ARM::MVNi: 
    case ARM::MVNr: 
    case ARM::RBIT: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::RRXi: 
    case ARM::TEQri: 
    case ARM::TEQrr: 
    case ARM::TSTri: 
    case ARM::TSTrr: 
    case ARM::VCNTd: 
    case ARM::VCNTq: 
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VMOVRS: 
    case ARM::VMOVSR: 
    case ARM::VMVNd: 
    case ARM::VMVNq: 
    case ARM::VREV16d8: 
    case ARM::VREV16q8: 
    case ARM::VREV32d16: 
    case ARM::VREV32d8: 
    case ARM::VREV32q16: 
    case ARM::VREV32q8: 
    case ARM::VREV64d16: 
    case ARM::VREV64d32: 
    case ARM::VREV64d8: 
    case ARM::VREV64q16: 
    case ARM::VREV64q32: 
    case ARM::VREV64q8: 
    case ARM::VSWPd: 
    case ARM::VSWPq: 
    case ARM::VTRNd16: 
    case ARM::VTRNd32: 
    case ARM::VTRNd8: 
    case ARM::VTRNq16: 
    case ARM::VTRNq32: 
    case ARM::VTRNq8: 
    case ARM::VUZPd16: 
    case ARM::VUZPd8: 
    case ARM::VUZPq16: 
    case ARM::VUZPq32: 
    case ARM::VUZPq8: 
    case ARM::VZIPd16: 
    case ARM::VZIPd8: 
    case ARM::VZIPq16: 
    case ARM::VZIPq32: 
    case ARM::VZIPq8: 
    case ARM::t2ADR: 
    case ARM::t2CLZ: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2LDRBpcrel: 
    case ARM::t2LDRHpcrel: 
    case ARM::t2LDRSBpcrel: 
    case ARM::t2LDRSHpcrel: 
    case ARM::t2LDRpcrel: 
    case ARM::t2MOVi: 
    case ARM::t2MOVi16: 
    case ARM::t2MOVr: 
    case ARM::t2MVNi: 
    case ARM::t2MVNr: 
    case ARM::t2RBIT: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2RRX: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::tADR: 
    case ARM::tCMNz: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tLDRpciASM: 
    case ARM::tMOVr: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1, O); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2, O); break;
    case ARM::CMNzrsi: 
    case ARM::CMPrsi: 
    case ARM::MOVsi: 
    case ARM::MVNsi: 
    case ARM::TEQrsi: 
    case ARM::TSTrsi: printSORegImmOperand(MI, 1, O); break;
    case ARM::CMNzrsr: 
    case ARM::CMPrsr: 
    case ARM::MOVsr: 
    case ARM::MVNsr: 
    case ARM::TEQrsr: 
    case ARM::TSTrsr: 
    case ARM::t2MOVSsr: 
    case ARM::t2MOVsr: printSORegRegOperand(MI, 1, O); break;
    case ARM::CPS3p: 
    case ARM::MOVTi16: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNsv2i32: 
    case ARM::VQRSHRNsv4i16: 
    case ARM::VQRSHRNsv8i8: 
    case ARM::VQRSHRNuv2i32: 
    case ARM::VQRSHRNuv4i16: 
    case ARM::VQRSHRNuv8i8: 
    case ARM::VQRSHRUNv2i32: 
    case ARM::VQRSHRUNv4i16: 
    case ARM::VQRSHRUNv8i8: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNsv2i32: 
    case ARM::VQSHRNsv4i16: 
    case ARM::VQSHRNsv8i8: 
    case ARM::VQSHRNuv2i32: 
    case ARM::VQSHRNuv4i16: 
    case ARM::VQSHRNuv8i8: 
    case ARM::VQSHRUNv2i32: 
    case ARM::VQSHRUNv4i16: 
    case ARM::VQSHRUNv8i8: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRNv2i32: 
    case ARM::VRSHRNv4i16: 
    case ARM::VRSHRNv8i8: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLsv2i64: 
    case ARM::VSHLLsv4i32: 
    case ARM::VSHLLsv8i16: 
    case ARM::VSHLLuv2i64: 
    case ARM::VSHLLuv4i32: 
    case ARM::VSHLLuv8i16: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRNv2i32: 
    case ARM::VSHRNv4i16: 
    case ARM::VSHRNv8i8: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::t2CPS3p: 
    case ARM::t2MOVCCi16: 
    case ARM::t2MOVTi16: 
    case ARM::t2MVNCCi: 
    case ARM::tADDhirr: 
    case ARM::tADDspr: printOperand(MI, 2, O); break;
    case ARM::LDMDA: 
    case ARM::LDMDB: 
    case ARM::LDMIA: 
    case ARM::LDMIB: 
    case ARM::STMDA: 
    case ARM::STMDB: 
    case ARM::STMIA: 
    case ARM::STMIB: 
    case ARM::VLDMDIA: 
    case ARM::VLDMSIA: 
    case ARM::VSTMDIA: 
    case ARM::VSTMSIA: 
    case ARM::t2LDMDB: 
    case ARM::t2LDMIA: 
    case ARM::t2STMDB: 
    case ARM::t2STMIA: 
    case ARM::tLDMIA: printRegisterList(MI, 3, O); break;
    case ARM::LDRBi12: 
    case ARM::LDRcp: 
    case ARM::LDRi12: 
    case ARM::STRBi12: 
    case ARM::STRi12: 
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printAddrModeImm12Operand(MI, 1, O); break;
    case ARM::LDRBrs: 
    case ARM::LDRrs: 
    case ARM::STRBrs: 
    case ARM::STRrs: printAddrMode2Operand(MI, 1, O); break;
    case ARM::LDREX: 
    case ARM::LDREXB: 
    case ARM::LDREXH: 
    case ARM::t2LDREXB: 
    case ARM::t2LDREXH: printAddrMode7Operand(MI, 1, O); break;
    case ARM::LDRH: 
    case ARM::LDRSB: 
    case ARM::LDRSH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1, O); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VLD3DUPdWB_register_Asm_16: 
    case ARM::VLD3DUPdWB_register_Asm_32: 
    case ARM::VLD3DUPdWB_register_Asm_8: 
    case ARM::VLD3DUPqWB_register_Asm_16: 
    case ARM::VLD3DUPqWB_register_Asm_32: 
    case ARM::VLD3DUPqWB_register_Asm_8: 
    case ARM::VLD3qWB_register_Asm_16: 
    case ARM::VLD3qWB_register_Asm_32: 
    case ARM::VLD3qWB_register_Asm_8: 
    case ARM::VLD4DUPdWB_register_Asm_16: 
    case ARM::VLD4DUPdWB_register_Asm_32: 
    case ARM::VLD4DUPdWB_register_Asm_8: 
    case ARM::VLD4DUPqWB_register_Asm_16: 
    case ARM::VLD4DUPqWB_register_Asm_32: 
    case ARM::VLD4DUPqWB_register_Asm_8: 
    case ARM::VLD4qWB_register_Asm_16: 
    case ARM::VLD4qWB_register_Asm_32: 
    case ARM::VLD4qWB_register_Asm_8: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::VST3qWB_register_Asm_16: 
    case ARM::VST3qWB_register_Asm_32: 
    case ARM::VST3qWB_register_Asm_8: 
    case ARM::VST4qWB_register_Asm_16: 
    case ARM::VST4qWB_register_Asm_32: 
    case ARM::VST4qWB_register_Asm_8: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tLSLri: 
    case ARM::tMUL: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3, O); break;
    case ARM::VLD1LNdAsm_16: 
    case ARM::VLD1LNdAsm_32: 
    case ARM::VLD1LNdAsm_8: 
    case ARM::VLD2LNdAsm_16: 
    case ARM::VLD2LNdAsm_32: 
    case ARM::VLD2LNdAsm_8: 
    case ARM::VLD2LNqAsm_16: 
    case ARM::VLD2LNqAsm_32: 
    case ARM::VLD3LNdAsm_16: 
    case ARM::VLD3LNdAsm_32: 
    case ARM::VLD3LNdAsm_8: 
    case ARM::VLD3LNqAsm_16: 
    case ARM::VLD3LNqAsm_32: 
    case ARM::VLD4LNdAsm_16: 
    case ARM::VLD4LNdAsm_32: 
    case ARM::VLD4LNdAsm_8: 
    case ARM::VLD4LNqAsm_16: 
    case ARM::VLD4LNqAsm_32: 
    case ARM::VST1LNdAsm_16: 
    case ARM::VST1LNdAsm_32: 
    case ARM::VST1LNdAsm_8: 
    case ARM::VST2LNdAsm_16: 
    case ARM::VST2LNdAsm_32: 
    case ARM::VST2LNdAsm_8: 
    case ARM::VST2LNqAsm_16: 
    case ARM::VST2LNqAsm_32: 
    case ARM::VST3LNdAsm_16: 
    case ARM::VST3LNdAsm_32: 
    case ARM::VST3LNdAsm_8: 
    case ARM::VST3LNqAsm_16: 
    case ARM::VST3LNqAsm_32: 
    case ARM::VST4LNdAsm_16: 
    case ARM::VST4LNdAsm_32: 
    case ARM::VST4LNdAsm_8: 
    case ARM::VST4LNqAsm_16: 
    case ARM::VST4LNqAsm_32: printAddrMode6Operand(MI, 2, O); break;
    case ARM::VLDRD: 
    case ARM::VLDRS: 
    case ARM::VSTRD: 
    case ARM::VSTRS: printAddrMode5Operand(MI, 1, O); break;
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2MOVSsi: 
    case ARM::t2MOVsi: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1, O); break;
    case ARM::t2LDRBT: 
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHT: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBT: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHT: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRT: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBT: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHT: 
    case ARM::t2STRHi8: 
    case ARM::t2STRT: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1, O); break;
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: printT2LdrLabelOperand(MI, 1, O); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1, O); break;
    case ARM::t2LDREX: printT2AddrModeImm0_1020s4Operand(MI, 1, O); break;
    case ARM::t2MRS_M: printMSRMaskOperand(MI, 1, O); break;
    case ARM::tADDspi: 
    case ARM::tSUBspi: printThumbS4ImmOperand(MI, 2, O); break;
    case ARM::tASRri: 
    case ARM::tLSRri: printThumbSRImm(MI, 3, O); break;
    case ARM::tLDRBi: 
    case ARM::tSTRBi: printThumbAddrModeImm5S1Operand(MI, 1, O); break;
    case ARM::tLDRBr: 
    case ARM::tLDRHr: 
    case ARM::tLDRSB: 
    case ARM::tLDRSH: 
    case ARM::tLDRr: 
    case ARM::tSTRBr: 
    case ARM::tSTRHr: 
    case ARM::tSTRr: printThumbAddrModeRROperand(MI, 1, O); break;
    case ARM::tLDRHi: 
    case ARM::tSTRHi: printThumbAddrModeImm5S2Operand(MI, 1, O); break;
    case ARM::tLDRi: 
    case ARM::tSTRi: printThumbAddrModeImm5S4Operand(MI, 1, O); break;
    case ARM::tLDRspi: 
    case ARM::tSTRspi: printThumbAddrModeSPOperand(MI, 1, O); break;
    }
    return;
    break;
  case ARM::BFI:
  case ARM::VBIFd:
  case ARM::VBIFq:
  case ARM::VBITd:
  case ARM::VBITq:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::VSLIv16i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i32:
  case ARM::VSLIv2i64:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i32:
  case ARM::VSRIv2i64:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
  case ARM::t2BFI:
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
  case ARM::tADDrSP:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::BFI: 
    case ARM::t2BFI: printBitfieldInvMaskImmOperand(MI, 3, O); break;
    case ARM::VBIFd: 
    case ARM::VBIFq: 
    case ARM::VBITd: 
    case ARM::VBITq: 
    case ARM::VBSLd: 
    case ARM::VBSLq: 
    case ARM::VSLIv16i8: 
    case ARM::VSLIv1i64: 
    case ARM::VSLIv2i32: 
    case ARM::VSLIv2i64: 
    case ARM::VSLIv4i16: 
    case ARM::VSLIv4i32: 
    case ARM::VSLIv8i16: 
    case ARM::VSLIv8i8: 
    case ARM::VSRIv16i8: 
    case ARM::VSRIv1i64: 
    case ARM::VSRIv2i32: 
    case ARM::VSRIv2i64: 
    case ARM::VSRIv4i16: 
    case ARM::VSRIv4i32: 
    case ARM::VSRIv8i16: 
    case ARM::VSRIv8i8: 
    case ARM::t2MOVCCasr: 
    case ARM::t2MOVCClsl: 
    case ARM::t2MOVCClsr: 
    case ARM::t2MOVCCror: printOperand(MI, 3, O); break;
    case ARM::tADDrSP: printOperand(MI, 1, O); break;
    }
    return;
    break;
  case ARM::BKPT:
  case ARM::BLX_pred:
  case ARM::BL_pred:
  case ARM::BXJ:
  case ARM::BX_pred:
  case ARM::Bcc:
  case ARM::CPS2p:
  case ARM::DBG:
  case ARM::LDC2L_OFFSET:
  case ARM::LDC2_OFFSET:
  case ARM::SMC:
  case ARM::STC2L_OFFSET:
  case ARM::STC2_OFFSET:
  case ARM::SVC:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VLD3DUPdAsm_16:
  case ARM::VLD3DUPdAsm_32:
  case ARM::VLD3DUPdAsm_8:
  case ARM::VLD3DUPqAsm_16:
  case ARM::VLD3DUPqAsm_32:
  case ARM::VLD3DUPqAsm_8:
  case ARM::VLD3qAsm_16:
  case ARM::VLD3qAsm_32:
  case ARM::VLD3qAsm_8:
  case ARM::VLD4DUPdAsm_16:
  case ARM::VLD4DUPdAsm_32:
  case ARM::VLD4DUPdAsm_8:
  case ARM::VLD4DUPqAsm_16:
  case ARM::VLD4DUPqAsm_32:
  case ARM::VLD4DUPqAsm_8:
  case ARM::VLD4qAsm_16:
  case ARM::VLD4qAsm_32:
  case ARM::VLD4qAsm_8:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEq:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEq:
  case ARM::VST3qAsm_16:
  case ARM::VST3qAsm_32:
  case ARM::VST3qAsm_8:
  case ARM::VST4qAsm_16:
  case ARM::VST4qAsm_32:
  case ARM::VST4qAsm_8:
  case ARM::t2B:
  case ARM::t2BXJ:
  case ARM::t2Bcc:
  case ARM::t2CPS2p:
  case ARM::t2DBG:
  case ARM::t2RFEDB:
  case ARM::t2RFEIA:
  case ARM::t2SMC:
  case ARM::tB:
  case ARM::tBL:
  case ARM::tBLXi:
  case ARM::tBLXr:
  case ARM::tBX:
  case ARM::tBcc:
  case ARM::tCPS:
  case ARM::tSVC:
    return;
    break;
  case ARM::CDP:
  case ARM::MCR:
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::CDP: printCImmediate(MI, 2, O); break;
    case ARM::MCR: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::FCONSTD:
  case ARM::FCONSTS:
  case ARM::LDC2L_OPTION:
  case ARM::LDC2L_POST:
  case ARM::LDC2L_PRE:
  case ARM::LDC2_OPTION:
  case ARM::LDC2_POST:
  case ARM::LDC2_PRE:
  case ARM::MRS:
  case ARM::MRSsys:
  case ARM::STC2L_OPTION:
  case ARM::STC2L_POST:
  case ARM::STC2L_PRE:
  case ARM::STC2_OPTION:
  case ARM::STC2_POST:
  case ARM::STC2_PRE:
  case ARM::VABSD:
  case ARM::VABSS:
  case ARM::VABSfd:
  case ARM::VABSfq:
  case ARM::VCEQzv16i8:
  case ARM::VCEQzv2i32:
  case ARM::VCEQzv4i16:
  case ARM::VCEQzv4i32:
  case ARM::VCEQzv8i16:
  case ARM::VCEQzv8i8:
  case ARM::VCGEzv16i8:
  case ARM::VCGEzv2i32:
  case ARM::VCGEzv4i16:
  case ARM::VCGEzv4i32:
  case ARM::VCGEzv8i16:
  case ARM::VCGEzv8i8:
  case ARM::VCGTzv16i8:
  case ARM::VCGTzv2i32:
  case ARM::VCGTzv4i16:
  case ARM::VCGTzv4i32:
  case ARM::VCGTzv8i16:
  case ARM::VCGTzv8i8:
  case ARM::VCLEzv16i8:
  case ARM::VCLEzv2i32:
  case ARM::VCLEzv4i16:
  case ARM::VCLEzv4i32:
  case ARM::VCLEzv8i16:
  case ARM::VCLEzv8i8:
  case ARM::VCLTzv16i8:
  case ARM::VCLTzv2i32:
  case ARM::VCLTzv4i16:
  case ARM::VCLTzv4i32:
  case ARM::VCLTzv8i16:
  case ARM::VCLTzv8i8:
  case ARM::VCMPD:
  case ARM::VCMPED:
  case ARM::VCMPES:
  case ARM::VCMPS:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VGETLNs16:
  case ARM::VGETLNs8:
  case ARM::VGETLNu16:
  case ARM::VGETLNu8:
  case ARM::VLD1DUPd16:
  case ARM::VLD1DUPd32:
  case ARM::VLD1DUPd8:
  case ARM::VLD1DUPq16:
  case ARM::VLD1DUPq32:
  case ARM::VLD1DUPq8:
  case ARM::VLD1d16:
  case ARM::VLD1d16Q:
  case ARM::VLD1d16T:
  case ARM::VLD1d32:
  case ARM::VLD1d32Q:
  case ARM::VLD1d32T:
  case ARM::VLD1d64:
  case ARM::VLD1d64Q:
  case ARM::VLD1d64T:
  case ARM::VLD1d8:
  case ARM::VLD1d8Q:
  case ARM::VLD1d8T:
  case ARM::VLD1q16:
  case ARM::VLD1q32:
  case ARM::VLD1q64:
  case ARM::VLD1q8:
  case ARM::VLD2DUPd16:
  case ARM::VLD2DUPd16x2:
  case ARM::VLD2DUPd32:
  case ARM::VLD2DUPd32x2:
  case ARM::VLD2DUPd8:
  case ARM::VLD2DUPd8x2:
  case ARM::VLD2b16:
  case ARM::VLD2b32:
  case ARM::VLD2b8:
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d8:
  case ARM::VLD2q16:
  case ARM::VLD2q32:
  case ARM::VLD2q8:
  case ARM::VLD3DUPdWB_fixed_Asm_16:
  case ARM::VLD3DUPdWB_fixed_Asm_32:
  case ARM::VLD3DUPdWB_fixed_Asm_8:
  case ARM::VLD3DUPqWB_fixed_Asm_16:
  case ARM::VLD3DUPqWB_fixed_Asm_32:
  case ARM::VLD3DUPqWB_fixed_Asm_8:
  case ARM::VLD3dAsm_16:
  case ARM::VLD3dAsm_32:
  case ARM::VLD3dAsm_8:
  case ARM::VLD3qWB_fixed_Asm_16:
  case ARM::VLD3qWB_fixed_Asm_32:
  case ARM::VLD3qWB_fixed_Asm_8:
  case ARM::VLD4DUPdWB_fixed_Asm_16:
  case ARM::VLD4DUPdWB_fixed_Asm_32:
  case ARM::VLD4DUPdWB_fixed_Asm_8:
  case ARM::VLD4DUPqWB_fixed_Asm_16:
  case ARM::VLD4DUPqWB_fixed_Asm_32:
  case ARM::VLD4DUPqWB_fixed_Asm_8:
  case ARM::VLD4dAsm_16:
  case ARM::VLD4dAsm_32:
  case ARM::VLD4dAsm_8:
  case ARM::VLD4qWB_fixed_Asm_16:
  case ARM::VLD4qWB_fixed_Asm_32:
  case ARM::VLD4qWB_fixed_Asm_8:
  case ARM::VMOVD:
  case ARM::VMOVS:
  case ARM::VMOVv2f32:
  case ARM::VMOVv4f32:
  case ARM::VMRS:
  case ARM::VMRS_FPEXC:
  case ARM::VMRS_FPSID:
  case ARM::VMRS_MVFR0:
  case ARM::VMRS_MVFR1:
  case ARM::VNEGD:
  case ARM::VNEGS:
  case ARM::VNEGf32q:
  case ARM::VNEGfd:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VSLTOD:
  case ARM::VSLTOS:
  case ARM::VSQRTD:
  case ARM::VSQRTS:
  case ARM::VST3dAsm_16:
  case ARM::VST3dAsm_32:
  case ARM::VST3dAsm_8:
  case ARM::VST3qWB_fixed_Asm_16:
  case ARM::VST3qWB_fixed_Asm_32:
  case ARM::VST3qWB_fixed_Asm_8:
  case ARM::VST4dAsm_16:
  case ARM::VST4dAsm_32:
  case ARM::VST4dAsm_8:
  case ARM::VST4qWB_fixed_Asm_16:
  case ARM::VST4qWB_fixed_Asm_32:
  case ARM::VST4qWB_fixed_Asm_8:
  case ARM::VTOSLD:
  case ARM::VTOSLS:
  case ARM::VTOULD:
  case ARM::VTOULS:
  case ARM::VULTOD:
  case ARM::VULTOS:
  case ARM::t2MRS_AR:
  case ARM::t2MRSsys_AR:
  case ARM::t2RFEDBW:
  case ARM::t2RFEIAW:
    switch (MI->getOpcode()) {
    case ARM::FCONSTD: 
    case ARM::FCONSTS: 
    case ARM::VMOVv2f32: 
    case ARM::VMOVv4f32: printFPImmOperand(MI, 1, O); break;
    case ARM::LDC2L_OPTION: 
    case ARM::LDC2_OPTION: 
    case ARM::STC2L_OPTION: 
    case ARM::STC2_OPTION: printCoprocOptionImm(MI, 3, O); break;
    case ARM::LDC2L_POST: 
    case ARM::LDC2_POST: 
    case ARM::STC2L_POST: 
    case ARM::STC2_POST: printPostIdxImm8s4Operand(MI, 3, O); break;
    case ARM::LDC2L_PRE: 
    case ARM::LDC2_PRE: 
    case ARM::STC2L_PRE: 
    case ARM::STC2_PRE: 
    case ARM::VLD3DUPdWB_fixed_Asm_16: 
    case ARM::VLD3DUPdWB_fixed_Asm_32: 
    case ARM::VLD3DUPdWB_fixed_Asm_8: 
    case ARM::VLD3DUPqWB_fixed_Asm_16: 
    case ARM::VLD3DUPqWB_fixed_Asm_32: 
    case ARM::VLD3DUPqWB_fixed_Asm_8: 
    case ARM::VLD3qWB_fixed_Asm_16: 
    case ARM::VLD3qWB_fixed_Asm_32: 
    case ARM::VLD3qWB_fixed_Asm_8: 
    case ARM::VLD4DUPdWB_fixed_Asm_16: 
    case ARM::VLD4DUPdWB_fixed_Asm_32: 
    case ARM::VLD4DUPdWB_fixed_Asm_8: 
    case ARM::VLD4DUPqWB_fixed_Asm_16: 
    case ARM::VLD4DUPqWB_fixed_Asm_32: 
    case ARM::VLD4DUPqWB_fixed_Asm_8: 
    case ARM::VLD4qWB_fixed_Asm_16: 
    case ARM::VLD4qWB_fixed_Asm_32: 
    case ARM::VLD4qWB_fixed_Asm_8: 
    case ARM::VST3qWB_fixed_Asm_16: 
    case ARM::VST3qWB_fixed_Asm_32: 
    case ARM::VST3qWB_fixed_Asm_8: 
    case ARM::VST4qWB_fixed_Asm_16: 
    case ARM::VST4qWB_fixed_Asm_32: 
    case ARM::VST4qWB_fixed_Asm_8: 
    case ARM::t2RFEDBW: 
    case ARM::t2RFEIAW: O << '!'; break;
    case ARM::MRS: 
    case ARM::t2MRS_AR: O << ", apsr"; break;
    case ARM::MRSsys: 
    case ARM::t2MRSsys_AR: O << ", spsr"; break;
    case ARM::VABSD: 
    case ARM::VABSS: 
    case ARM::VABSfd: 
    case ARM::VABSfq: 
    case ARM::VCMPD: 
    case ARM::VCMPED: 
    case ARM::VCMPES: 
    case ARM::VCMPS: 
    case ARM::VMOVD: 
    case ARM::VMOVS: 
    case ARM::VNEGD: 
    case ARM::VNEGS: 
    case ARM::VNEGf32q: 
    case ARM::VNEGfd: 
    case ARM::VRECPEfd: 
    case ARM::VRECPEfq: 
    case ARM::VRSQRTEfd: 
    case ARM::VRSQRTEfq: 
    case ARM::VSQRTD: 
    case ARM::VSQRTS: printOperand(MI, 1, O); break;
    case ARM::VCEQzv16i8: 
    case ARM::VCEQzv2i32: 
    case ARM::VCEQzv4i16: 
    case ARM::VCEQzv4i32: 
    case ARM::VCEQzv8i16: 
    case ARM::VCEQzv8i8: 
    case ARM::VCGEzv16i8: 
    case ARM::VCGEzv2i32: 
    case ARM::VCGEzv4i16: 
    case ARM::VCGEzv4i32: 
    case ARM::VCGEzv8i16: 
    case ARM::VCGEzv8i8: 
    case ARM::VCGTzv16i8: 
    case ARM::VCGTzv2i32: 
    case ARM::VCGTzv4i16: 
    case ARM::VCGTzv4i32: 
    case ARM::VCGTzv8i16: 
    case ARM::VCGTzv8i8: 
    case ARM::VCLEzv16i8: 
    case ARM::VCLEzv2i32: 
    case ARM::VCLEzv4i16: 
    case ARM::VCLEzv4i32: 
    case ARM::VCLEzv8i16: 
    case ARM::VCLEzv8i8: 
    case ARM::VCLTzv16i8: 
    case ARM::VCLTzv2i32: 
    case ARM::VCLTzv4i16: 
    case ARM::VCLTzv4i32: 
    case ARM::VCLTzv8i16: 
    case ARM::VCLTzv8i8: O << ", #0"; break;
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: printOperand(MI, 2, O); break;
    case ARM::VGETLNs16: 
    case ARM::VGETLNs8: 
    case ARM::VGETLNu16: 
    case ARM::VGETLNu8: printVectorIndex(MI, 2, O); break;
    case ARM::VLD1DUPd16: 
    case ARM::VLD1DUPd32: 
    case ARM::VLD1DUPd8: 
    case ARM::VLD1DUPq16: 
    case ARM::VLD1DUPq32: 
    case ARM::VLD1DUPq8: 
    case ARM::VLD1d16: 
    case ARM::VLD1d16Q: 
    case ARM::VLD1d16T: 
    case ARM::VLD1d32: 
    case ARM::VLD1d32Q: 
    case ARM::VLD1d32T: 
    case ARM::VLD1d64: 
    case ARM::VLD1d64Q: 
    case ARM::VLD1d64T: 
    case ARM::VLD1d8: 
    case ARM::VLD1d8Q: 
    case ARM::VLD1d8T: 
    case ARM::VLD1q16: 
    case ARM::VLD1q32: 
    case ARM::VLD1q64: 
    case ARM::VLD1q8: 
    case ARM::VLD2DUPd16: 
    case ARM::VLD2DUPd16x2: 
    case ARM::VLD2DUPd32: 
    case ARM::VLD2DUPd32x2: 
    case ARM::VLD2DUPd8: 
    case ARM::VLD2DUPd8x2: 
    case ARM::VLD2b16: 
    case ARM::VLD2b32: 
    case ARM::VLD2b8: 
    case ARM::VLD2d16: 
    case ARM::VLD2d32: 
    case ARM::VLD2d8: 
    case ARM::VLD2q16: 
    case ARM::VLD2q32: 
    case ARM::VLD2q8: 
    case ARM::VLD3dAsm_16: 
    case ARM::VLD3dAsm_32: 
    case ARM::VLD3dAsm_8: 
    case ARM::VLD4dAsm_16: 
    case ARM::VLD4dAsm_32: 
    case ARM::VLD4dAsm_8: 
    case ARM::VST3dAsm_16: 
    case ARM::VST3dAsm_32: 
    case ARM::VST3dAsm_8: 
    case ARM::VST4dAsm_16: 
    case ARM::VST4dAsm_32: 
    case ARM::VST4dAsm_8: printAddrMode6Operand(MI, 1, O); break;
    case ARM::VMRS: O << ", fpscr"; break;
    case ARM::VMRS_FPEXC: O << ", fpexc"; break;
    case ARM::VMRS_FPSID: O << ", fpsid"; break;
    case ARM::VMRS_MVFR0: O << ", mvfr0"; break;
    case ARM::VMRS_MVFR1: O << ", mvfr1"; break;
    case ARM::VSLTOD: 
    case ARM::VSLTOS: 
    case ARM::VTOSLD: 
    case ARM::VTOSLS: 
    case ARM::VTOULD: 
    case ARM::VTOULS: 
    case ARM::VULTOD: 
    case ARM::VULTOS: printFBits32(MI, 2, O); break;
    }
    return;
    break;
  case ARM::LDCL_OFFSET:
  case ARM::LDC_OFFSET:
  case ARM::STCL_OFFSET:
  case ARM::STC_OFFSET:
  case ARM::t2LDC2L_OFFSET:
  case ARM::t2LDC2_OFFSET:
  case ARM::t2LDCL_OFFSET:
  case ARM::t2LDC_OFFSET:
  case ARM::t2STC2L_OFFSET:
  case ARM::t2STC2_OFFSET:
  case ARM::t2STCL_OFFSET:
  case ARM::t2STC_OFFSET:
    printCImmediate(MI, 1, O); 
    O << ", "; 
    printAddrMode5Operand(MI, 2, O); 
    return;
    break;
  case ARM::LDCL_OPTION:
  case ARM::LDCL_POST:
  case ARM::LDC_OPTION:
  case ARM::LDC_POST:
  case ARM::STCL_OPTION:
  case ARM::STCL_POST:
  case ARM::STC_OPTION:
  case ARM::STC_POST:
  case ARM::t2LDC2L_OPTION:
  case ARM::t2LDC2L_POST:
  case ARM::t2LDC2_OPTION:
  case ARM::t2LDC2_POST:
  case ARM::t2LDCL_OPTION:
  case ARM::t2LDCL_POST:
  case ARM::t2LDC_OPTION:
  case ARM::t2LDC_POST:
  case ARM::t2STC2L_OPTION:
  case ARM::t2STC2L_POST:
  case ARM::t2STC2_OPTION:
  case ARM::t2STC2_POST:
  case ARM::t2STCL_OPTION:
  case ARM::t2STCL_POST:
  case ARM::t2STC_OPTION:
  case ARM::t2STC_POST:
    printCImmediate(MI, 1, O); 
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDCL_OPTION: 
    case ARM::LDC_OPTION: 
    case ARM::STCL_OPTION: 
    case ARM::STC_OPTION: 
    case ARM::t2LDC2L_OPTION: 
    case ARM::t2LDC2_OPTION: 
    case ARM::t2LDCL_OPTION: 
    case ARM::t2LDC_OPTION: 
    case ARM::t2STC2L_OPTION: 
    case ARM::t2STC2_OPTION: 
    case ARM::t2STCL_OPTION: 
    case ARM::t2STC_OPTION: printCoprocOptionImm(MI, 3, O); break;
    case ARM::LDCL_POST: 
    case ARM::LDC_POST: 
    case ARM::STCL_POST: 
    case ARM::STC_POST: 
    case ARM::t2LDC2L_POST: 
    case ARM::t2LDC2_POST: 
    case ARM::t2LDCL_POST: 
    case ARM::t2LDC_POST: 
    case ARM::t2STC2L_POST: 
    case ARM::t2STC2_POST: 
    case ARM::t2STCL_POST: 
    case ARM::t2STC_POST: printPostIdxImm8s4Operand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDCL_PRE:
  case ARM::LDC_PRE:
  case ARM::STCL_PRE:
  case ARM::STC_PRE:
  case ARM::t2LDC2L_PRE:
  case ARM::t2LDC2_PRE:
  case ARM::t2LDCL_PRE:
  case ARM::t2LDC_PRE:
  case ARM::t2STC2L_PRE:
  case ARM::t2STC2_PRE:
  case ARM::t2STCL_PRE:
  case ARM::t2STC_PRE:
    printCImmediate(MI, 1, O); 
    O << ", "; 
    printAddrMode5Operand(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case ARM::LDMDA_UPD:
  case ARM::LDMDB_UPD:
  case ARM::LDMIA_UPD:
  case ARM::LDMIB_UPD:
  case ARM::STMDA_UPD:
  case ARM::STMDB_UPD:
  case ARM::STMIA_UPD:
  case ARM::STMIB_UPD:
  case ARM::VLDMDDB_UPD:
  case ARM::VLDMDIA_UPD:
  case ARM::VLDMSDB_UPD:
  case ARM::VLDMSIA_UPD:
  case ARM::VSTMDDB_UPD:
  case ARM::VSTMDIA_UPD:
  case ARM::VSTMSDB_UPD:
  case ARM::VSTMSIA_UPD:
  case ARM::t2LDMDB_UPD:
  case ARM::t2LDMIA_UPD:
  case ARM::t2STMDB_UPD:
  case ARM::t2STMIA_UPD:
  case ARM::tSTMIA_UPD:
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    return;
    break;
  case ARM::LDRBT_POST_IMM:
  case ARM::LDRBT_POST_REG:
  case ARM::LDRB_POST_IMM:
  case ARM::LDRB_POST_REG:
  case ARM::LDRHTi:
  case ARM::LDRHTr:
  case ARM::LDRH_POST:
  case ARM::LDRSBTi:
  case ARM::LDRSBTr:
  case ARM::LDRSB_POST:
  case ARM::LDRSHTi:
  case ARM::LDRSHTr:
  case ARM::LDRSH_POST:
  case ARM::LDRT_POST_IMM:
  case ARM::LDRT_POST_REG:
  case ARM::LDR_POST_IMM:
  case ARM::LDR_POST_REG:
  case ARM::STRBT_POST_IMM:
  case ARM::STRBT_POST_REG:
  case ARM::STRB_POST_IMM:
  case ARM::STRB_POST_REG:
  case ARM::STRHTi:
  case ARM::STRHTr:
  case ARM::STRH_POST:
  case ARM::STRT_POST_IMM:
  case ARM::STRT_POST_REG:
  case ARM::STR_POST_IMM:
  case ARM::STR_POST_REG:
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRBT_POST_IMM: 
    case ARM::LDRBT_POST_REG: 
    case ARM::LDRB_POST_IMM: 
    case ARM::LDRB_POST_REG: 
    case ARM::LDRT_POST_IMM: 
    case ARM::LDRT_POST_REG: 
    case ARM::LDR_POST_IMM: 
    case ARM::LDR_POST_REG: 
    case ARM::STRBT_POST_IMM: 
    case ARM::STRBT_POST_REG: 
    case ARM::STRB_POST_IMM: 
    case ARM::STRB_POST_REG: 
    case ARM::STRT_POST_IMM: 
    case ARM::STRT_POST_REG: 
    case ARM::STR_POST_IMM: 
    case ARM::STR_POST_REG: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::LDRHTi: 
    case ARM::LDRSBTi: 
    case ARM::LDRSHTi: 
    case ARM::STRHTi: printPostIdxImm8Operand(MI, 3, O); break;
    case ARM::LDRHTr: 
    case ARM::LDRSBTr: 
    case ARM::LDRSHTr: 
    case ARM::STRHTr: printPostIdxRegOperand(MI, 3, O); break;
    case ARM::LDRH_POST: 
    case ARM::LDRSB_POST: 
    case ARM::LDRSH_POST: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDRB_PRE_IMM:
  case ARM::LDRB_PRE_REG:
  case ARM::LDRH_PRE:
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
  case ARM::LDR_PRE_IMM:
  case ARM::LDR_PRE_REG:
  case ARM::STRB_PRE_IMM:
  case ARM::STRB_PRE_REG:
  case ARM::STRH_PRE:
  case ARM::STR_PRE_IMM:
  case ARM::STR_PRE_REG:
  case ARM::VLD1LNdWB_fixed_Asm_16:
  case ARM::VLD1LNdWB_fixed_Asm_32:
  case ARM::VLD1LNdWB_fixed_Asm_8:
  case ARM::VLD2LNdWB_fixed_Asm_16:
  case ARM::VLD2LNdWB_fixed_Asm_32:
  case ARM::VLD2LNdWB_fixed_Asm_8:
  case ARM::VLD2LNqWB_fixed_Asm_16:
  case ARM::VLD2LNqWB_fixed_Asm_32:
  case ARM::VLD3LNdWB_fixed_Asm_16:
  case ARM::VLD3LNdWB_fixed_Asm_32:
  case ARM::VLD3LNdWB_fixed_Asm_8:
  case ARM::VLD3LNqWB_fixed_Asm_16:
  case ARM::VLD3LNqWB_fixed_Asm_32:
  case ARM::VLD4LNdWB_fixed_Asm_16:
  case ARM::VLD4LNdWB_fixed_Asm_32:
  case ARM::VLD4LNdWB_fixed_Asm_8:
  case ARM::VLD4LNqWB_fixed_Asm_16:
  case ARM::VLD4LNqWB_fixed_Asm_32:
  case ARM::VST1LNdWB_fixed_Asm_16:
  case ARM::VST1LNdWB_fixed_Asm_32:
  case ARM::VST1LNdWB_fixed_Asm_8:
  case ARM::VST2LNdWB_fixed_Asm_16:
  case ARM::VST2LNdWB_fixed_Asm_32:
  case ARM::VST2LNdWB_fixed_Asm_8:
  case ARM::VST2LNqWB_fixed_Asm_16:
  case ARM::VST2LNqWB_fixed_Asm_32:
  case ARM::VST3LNdWB_fixed_Asm_16:
  case ARM::VST3LNdWB_fixed_Asm_32:
  case ARM::VST3LNdWB_fixed_Asm_8:
  case ARM::VST3LNqWB_fixed_Asm_16:
  case ARM::VST3LNqWB_fixed_Asm_32:
  case ARM::VST4LNdWB_fixed_Asm_16:
  case ARM::VST4LNdWB_fixed_Asm_32:
  case ARM::VST4LNdWB_fixed_Asm_8:
  case ARM::VST4LNqWB_fixed_Asm_16:
  case ARM::VST4LNqWB_fixed_Asm_32:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_PRE_IMM: 
    case ARM::LDR_PRE_IMM: 
    case ARM::STRB_PRE_IMM: 
    case ARM::STR_PRE_IMM: printAddrModeImm12Operand(MI, 2, O); break;
    case ARM::LDRB_PRE_REG: 
    case ARM::LDR_PRE_REG: 
    case ARM::STRB_PRE_REG: 
    case ARM::STR_PRE_REG: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDRH_PRE: 
    case ARM::LDRSB_PRE: 
    case ARM::LDRSH_PRE: 
    case ARM::STRH_PRE: printAddrMode3Operand(MI, 2, O); break;
    case ARM::VLD1LNdWB_fixed_Asm_16: 
    case ARM::VLD1LNdWB_fixed_Asm_32: 
    case ARM::VLD1LNdWB_fixed_Asm_8: 
    case ARM::VLD2LNdWB_fixed_Asm_16: 
    case ARM::VLD2LNdWB_fixed_Asm_32: 
    case ARM::VLD2LNdWB_fixed_Asm_8: 
    case ARM::VLD2LNqWB_fixed_Asm_16: 
    case ARM::VLD2LNqWB_fixed_Asm_32: 
    case ARM::VLD3LNdWB_fixed_Asm_16: 
    case ARM::VLD3LNdWB_fixed_Asm_32: 
    case ARM::VLD3LNdWB_fixed_Asm_8: 
    case ARM::VLD3LNqWB_fixed_Asm_16: 
    case ARM::VLD3LNqWB_fixed_Asm_32: 
    case ARM::VLD4LNdWB_fixed_Asm_16: 
    case ARM::VLD4LNdWB_fixed_Asm_32: 
    case ARM::VLD4LNdWB_fixed_Asm_8: 
    case ARM::VLD4LNqWB_fixed_Asm_16: 
    case ARM::VLD4LNqWB_fixed_Asm_32: 
    case ARM::VST1LNdWB_fixed_Asm_16: 
    case ARM::VST1LNdWB_fixed_Asm_32: 
    case ARM::VST1LNdWB_fixed_Asm_8: 
    case ARM::VST2LNdWB_fixed_Asm_16: 
    case ARM::VST2LNdWB_fixed_Asm_32: 
    case ARM::VST2LNdWB_fixed_Asm_8: 
    case ARM::VST2LNqWB_fixed_Asm_16: 
    case ARM::VST2LNqWB_fixed_Asm_32: 
    case ARM::VST3LNdWB_fixed_Asm_16: 
    case ARM::VST3LNdWB_fixed_Asm_32: 
    case ARM::VST3LNdWB_fixed_Asm_8: 
    case ARM::VST3LNqWB_fixed_Asm_16: 
    case ARM::VST3LNqWB_fixed_Asm_32: 
    case ARM::VST4LNdWB_fixed_Asm_16: 
    case ARM::VST4LNdWB_fixed_Asm_32: 
    case ARM::VST4LNdWB_fixed_Asm_8: 
    case ARM::VST4LNqWB_fixed_Asm_16: 
    case ARM::VST4LNqWB_fixed_Asm_32: printAddrMode6Operand(MI, 2, O); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: 
    case ARM::t2STRB_PRE: 
    case ARM::t2STRH_PRE: 
    case ARM::t2STR_PRE: printT2AddrModeImm8Operand(MI, 2, O); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::LDRD_POST:
  case ARM::STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode7Operand(MI, 3, O); 
    O << ", "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::LDRD_PRE:
  case ARM::STRD_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_PRE: printOperand(MI, 1, O); break;
    case ARM::STRD_PRE: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode3Operand(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case ARM::MCR2:
  case ARM::t2MCR:
  case ARM::t2MCR2:
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::MCRR:
  case ARM::MRRC:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MCRR2:
  case ARM::MRRC2:
  case ARM::t2MCRR:
  case ARM::t2MCRR2:
  case ARM::t2MRRC:
  case ARM::t2MRRC2:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MLA:
  case ARM::MLS:
  case ARM::SBFX:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLAD:
  case ARM::SMLADX:
  case ARM::SMLAL:
  case ARM::SMLALBB:
  case ARM::SMLALBT:
  case ARM::SMLALD:
  case ARM::SMLALDX:
  case ARM::SMLALTB:
  case ARM::SMLALTT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMLSD:
  case ARM::SMLSDX:
  case ARM::SMLSLD:
  case ARM::SMLSLDX:
  case ARM::SMMLA:
  case ARM::SMMLAR:
  case ARM::SMMLS:
  case ARM::SMMLSR:
  case ARM::SMULL:
  case ARM::STREXD:
  case ARM::UBFX:
  case ARM::UMAAL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::USADA8:
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq64:
  case ARM::VEXTq8:
  case ARM::VMOVRRS:
  case ARM::VMOVSRR:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2SBFX:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAD:
  case ARM::t2SMLADX:
  case ARM::t2SMLAL:
  case ARM::t2SMLALBB:
  case ARM::t2SMLALBT:
  case ARM::t2SMLALD:
  case ARM::t2SMLALDX:
  case ARM::t2SMLALTB:
  case ARM::t2SMLALTT:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMLSD:
  case ARM::t2SMLSDX:
  case ARM::t2SMLSLD:
  case ARM::t2SMMLA:
  case ARM::t2SMMLAR:
  case ARM::t2SMMLS:
  case ARM::t2SMMLSR:
  case ARM::t2SMULL:
  case ARM::t2STREXD:
  case ARM::t2UBFX:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2USADA8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::MLA: 
    case ARM::MLS: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLAD: 
    case ARM::SMLADX: 
    case ARM::SMLAL: 
    case ARM::SMLALBB: 
    case ARM::SMLALBT: 
    case ARM::SMLALD: 
    case ARM::SMLALDX: 
    case ARM::SMLALTB: 
    case ARM::SMLALTT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMLSD: 
    case ARM::SMLSDX: 
    case ARM::SMLSLD: 
    case ARM::SMLSLDX: 
    case ARM::SMMLA: 
    case ARM::SMMLAR: 
    case ARM::SMMLS: 
    case ARM::SMMLSR: 
    case ARM::SMULL: 
    case ARM::UMAAL: 
    case ARM::UMLAL: 
    case ARM::UMULL: 
    case ARM::USADA8: 
    case ARM::VEXTd16: 
    case ARM::VEXTd32: 
    case ARM::VEXTd8: 
    case ARM::VEXTq16: 
    case ARM::VEXTq32: 
    case ARM::VEXTq64: 
    case ARM::VEXTq8: 
    case ARM::VMOVRRS: 
    case ARM::VMOVSRR: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAD: 
    case ARM::t2SMLADX: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLALBB: 
    case ARM::t2SMLALBT: 
    case ARM::t2SMLALD: 
    case ARM::t2SMLALDX: 
    case ARM::t2SMLALTB: 
    case ARM::t2SMLALTT: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMLSD: 
    case ARM::t2SMLSDX: 
    case ARM::t2SMLSLD: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLAR: 
    case ARM::t2SMMLS: 
    case ARM::t2SMMLSR: 
    case ARM::t2SMULL: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: 
    case ARM::t2USADA8: printOperand(MI, 3, O); break;
    case ARM::SBFX: 
    case ARM::UBFX: 
    case ARM::t2SBFX: 
    case ARM::t2UBFX: printImmPlusOneOperand(MI, 3, O); break;
    case ARM::STREXD: 
    case ARM::t2STREXD: printAddrMode7Operand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SXTAB:
  case ARM::SXTAB16:
  case ARM::SXTAH:
  case ARM::USAT:
  case ARM::UXTAB:
  case ARM::UXTAB16:
  case ARM::UXTAH:
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
  case ARM::t2SXTAB:
  case ARM::t2SXTAB16:
  case ARM::t2SXTAH:
  case ARM::t2USAT:
  case ARM::t2UXTAB:
  case ARM::t2UXTAB16:
  case ARM::t2UXTAH:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::PKHBT: 
    case ARM::t2PKHBT: printPKHLSLShiftImm(MI, 3, O); break;
    case ARM::PKHTB: 
    case ARM::t2PKHTB: printPKHASRShiftImm(MI, 3, O); break;
    case ARM::SXTAB: 
    case ARM::SXTAB16: 
    case ARM::SXTAH: 
    case ARM::UXTAB: 
    case ARM::UXTAB16: 
    case ARM::UXTAH: 
    case ARM::t2SXTAB: 
    case ARM::t2SXTAB16: 
    case ARM::t2SXTAH: 
    case ARM::t2UXTAB: 
    case ARM::t2UXTAB16: 
    case ARM::t2UXTAH: printRotImmOperand(MI, 3, O); break;
    case ARM::USAT: 
    case ARM::t2USAT: printShiftImmOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::SSAT:
  case ARM::t2SSAT:
    O << ", "; 
    printImmPlusOneOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case ARM::SSAT16:
  case ARM::VTBL1:
  case ARM::VTBL2:
  case ARM::VTBL3:
  case ARM::VTBL4:
  case ARM::t2SSAT16:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::SSAT16: 
    case ARM::t2SSAT16: printImmPlusOneOperand(MI, 1, O); break;
    case ARM::VTBL1: printVectorListOne(MI, 1, O); break;
    case ARM::VTBL2: printVectorListTwo(MI, 1, O); break;
    case ARM::VTBL3: printVectorListThree(MI, 1, O); break;
    case ARM::VTBL4: printVectorListFour(MI, 1, O); break;
    }
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::SXTB:
  case ARM::SXTB16:
  case ARM::SXTH:
  case ARM::UXTB:
  case ARM::UXTB16:
  case ARM::UXTH:
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VGETLNi32:
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
  case ARM::t2SXTB:
  case ARM::t2SXTB16:
  case ARM::t2SXTH:
  case ARM::t2UXTB:
  case ARM::t2UXTB16:
  case ARM::t2UXTH:
    O << ", "; 
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::SXTB: 
    case ARM::SXTB16: 
    case ARM::SXTH: 
    case ARM::UXTB: 
    case ARM::UXTB16: 
    case ARM::UXTH: 
    case ARM::t2SXTB: 
    case ARM::t2SXTB16: 
    case ARM::t2SXTH: 
    case ARM::t2UXTB: 
    case ARM::t2UXTB16: 
    case ARM::t2UXTH: printRotImmOperand(MI, 2, O); break;
    case ARM::VDUPLN16d: 
    case ARM::VDUPLN16q: 
    case ARM::VDUPLN32d: 
    case ARM::VDUPLN32q: 
    case ARM::VDUPLN8d: 
    case ARM::VDUPLN8q: 
    case ARM::VGETLNi32: printVectorIndex(MI, 2, O); break;
    case ARM::t2MOVsra_flag: 
    case ARM::t2MOVsrl_flag: O << ", #1"; break;
    }
    return;
    break;
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDD:
  case ARM::VADDS:
  case ARM::VADDfd:
  case ARM::VADDfq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VDIVD:
  case ARM::VDIVS:
  case ARM::VMAXfd:
  case ARM::VMAXfq:
  case ARM::VMINfd:
  case ARM::VMINfq:
  case ARM::VMULD:
  case ARM::VMULS:
  case ARM::VMULfd:
  case ARM::VMULfq:
  case ARM::VNMULD:
  case ARM::VNMULS:
  case ARM::VPADDf:
  case ARM::VPMAXf:
  case ARM::VPMINf:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VSETLNi16:
  case ARM::VSETLNi32:
  case ARM::VSETLNi8:
  case ARM::VSUBD:
  case ARM::VSUBS:
  case ARM::VSUBfd:
  case ARM::VSUBfq:
    switch (MI->getOpcode()) {
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDD: 
    case ARM::VADDS: 
    case ARM::VADDfd: 
    case ARM::VADDfq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VDIVD: 
    case ARM::VDIVS: 
    case ARM::VMAXfd: 
    case ARM::VMAXfq: 
    case ARM::VMINfd: 
    case ARM::VMINfq: 
    case ARM::VMULD: 
    case ARM::VMULS: 
    case ARM::VMULfd: 
    case ARM::VMULfq: 
    case ARM::VNMULD: 
    case ARM::VNMULS: 
    case ARM::VPADDf: 
    case ARM::VPMAXf: 
    case ARM::VPMINf: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VSUBD: 
    case ARM::VSUBS: 
    case ARM::VSUBfd: 
    case ARM::VSUBfq: printOperand(MI, 1, O); break;
    case ARM::VSETLNi16: 
    case ARM::VSETLNi32: 
    case ARM::VSETLNi8: printVectorIndex(MI, 3, O); break;
    }
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VCEQzv2f32:
  case ARM::VCEQzv4f32:
  case ARM::VCGEzv2f32:
  case ARM::VCGEzv4f32:
  case ARM::VCGTzv2f32:
  case ARM::VCGTzv4f32:
  case ARM::VCLEzv2f32:
  case ARM::VCLEzv4f32:
  case ARM::VCLTzv2f32:
  case ARM::VCLTzv4f32:
    printOperand(MI, 1, O); 
    O << ", #0"; 
    return;
    break;
  case ARM::VFMAD:
  case ARM::VFMAS:
  case ARM::VFMAfd:
  case ARM::VFMAfq:
  case ARM::VFMSD:
  case ARM::VFMSS:
  case ARM::VFMSfd:
  case ARM::VFMSfq:
  case ARM::VFNMAD:
  case ARM::VFNMAS:
  case ARM::VFNMSD:
  case ARM::VFNMSS:
  case ARM::VLD3dWB_register_Asm_16:
  case ARM::VLD3dWB_register_Asm_32:
  case ARM::VLD3dWB_register_Asm_8:
  case ARM::VLD4dWB_register_Asm_16:
  case ARM::VLD4dWB_register_Asm_32:
  case ARM::VLD4dWB_register_Asm_8:
  case ARM::VMLAD:
  case ARM::VMLAS:
  case ARM::VMLAfd:
  case ARM::VMLAfq:
  case ARM::VMLSD:
  case ARM::VMLSS:
  case ARM::VMLSfd:
  case ARM::VMLSfq:
  case ARM::VNMLAD:
  case ARM::VNMLAS:
  case ARM::VNMLSD:
  case ARM::VNMLSS:
  case ARM::VST3dWB_register_Asm_16:
  case ARM::VST3dWB_register_Asm_32:
  case ARM::VST3dWB_register_Asm_8:
  case ARM::VST4dWB_register_Asm_16:
  case ARM::VST4dWB_register_Asm_32:
  case ARM::VST4dWB_register_Asm_8:
    switch (MI->getOpcode()) {
    case ARM::VFMAD: 
    case ARM::VFMAS: 
    case ARM::VFMAfd: 
    case ARM::VFMAfq: 
    case ARM::VFMSD: 
    case ARM::VFMSS: 
    case ARM::VFMSfd: 
    case ARM::VFMSfq: 
    case ARM::VFNMAD: 
    case ARM::VFNMAS: 
    case ARM::VFNMSD: 
    case ARM::VFNMSS: 
    case ARM::VMLAD: 
    case ARM::VMLAS: 
    case ARM::VMLAfd: 
    case ARM::VMLAfq: 
    case ARM::VMLSD: 
    case ARM::VMLSS: 
    case ARM::VMLSfd: 
    case ARM::VMLSfq: 
    case ARM::VNMLAD: 
    case ARM::VNMLAS: 
    case ARM::VNMLSD: 
    case ARM::VNMLSS: printOperand(MI, 2, O); break;
    case ARM::VLD3dWB_register_Asm_16: 
    case ARM::VLD3dWB_register_Asm_32: 
    case ARM::VLD3dWB_register_Asm_8: 
    case ARM::VLD4dWB_register_Asm_16: 
    case ARM::VLD4dWB_register_Asm_32: 
    case ARM::VLD4dWB_register_Asm_8: 
    case ARM::VST3dWB_register_Asm_16: 
    case ARM::VST3dWB_register_Asm_32: 
    case ARM::VST3dWB_register_Asm_8: 
    case ARM::VST4dWB_register_Asm_16: 
    case ARM::VST4dWB_register_Asm_32: 
    case ARM::VST4dWB_register_Asm_8: printAddrMode6Operand(MI, 1, O); break;
    }
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VLD1DUPd16wb_fixed:
  case ARM::VLD1DUPd32wb_fixed:
  case ARM::VLD1DUPd8wb_fixed:
  case ARM::VLD1DUPq16wb_fixed:
  case ARM::VLD1DUPq32wb_fixed:
  case ARM::VLD1DUPq8wb_fixed:
  case ARM::VLD1d16Qwb_fixed:
  case ARM::VLD1d16Twb_fixed:
  case ARM::VLD1d16wb_fixed:
  case ARM::VLD1d32Qwb_fixed:
  case ARM::VLD1d32Twb_fixed:
  case ARM::VLD1d32wb_fixed:
  case ARM::VLD1d64Qwb_fixed:
  case ARM::VLD1d64Twb_fixed:
  case ARM::VLD1d64wb_fixed:
  case ARM::VLD1d8Qwb_fixed:
  case ARM::VLD1d8Twb_fixed:
  case ARM::VLD1d8wb_fixed:
  case ARM::VLD1q16wb_fixed:
  case ARM::VLD1q32wb_fixed:
  case ARM::VLD1q64wb_fixed:
  case ARM::VLD1q8wb_fixed:
  case ARM::VLD2DUPd16wb_fixed:
  case ARM::VLD2DUPd16x2wb_fixed:
  case ARM::VLD2DUPd32wb_fixed:
  case ARM::VLD2DUPd32x2wb_fixed:
  case ARM::VLD2DUPd8wb_fixed:
  case ARM::VLD2DUPd8x2wb_fixed:
  case ARM::VLD2b16wb_fixed:
  case ARM::VLD2b32wb_fixed:
  case ARM::VLD2b8wb_fixed:
  case ARM::VLD2d16wb_fixed:
  case ARM::VLD2d32wb_fixed:
  case ARM::VLD2d8wb_fixed:
  case ARM::VLD2q16wb_fixed:
  case ARM::VLD2q32wb_fixed:
  case ARM::VLD2q8wb_fixed:
  case ARM::VLD3dWB_fixed_Asm_16:
  case ARM::VLD3dWB_fixed_Asm_32:
  case ARM::VLD3dWB_fixed_Asm_8:
  case ARM::VLD4dWB_fixed_Asm_16:
  case ARM::VLD4dWB_fixed_Asm_32:
  case ARM::VLD4dWB_fixed_Asm_8:
  case ARM::VST3dWB_fixed_Asm_16:
  case ARM::VST3dWB_fixed_Asm_32:
  case ARM::VST3dWB_fixed_Asm_8:
  case ARM::VST4dWB_fixed_Asm_16:
  case ARM::VST4dWB_fixed_Asm_32:
  case ARM::VST4dWB_fixed_Asm_8:
    switch (MI->getOpcode()) {
    case ARM::VLD1DUPd16wb_fixed: 
    case ARM::VLD1DUPd32wb_fixed: 
    case ARM::VLD1DUPd8wb_fixed: 
    case ARM::VLD1DUPq16wb_fixed: 
    case ARM::VLD1DUPq32wb_fixed: 
    case ARM::VLD1DUPq8wb_fixed: 
    case ARM::VLD1d16Qwb_fixed: 
    case ARM::VLD1d16Twb_fixed: 
    case ARM::VLD1d16wb_fixed: 
    case ARM::VLD1d32Qwb_fixed: 
    case ARM::VLD1d32Twb_fixed: 
    case ARM::VLD1d32wb_fixed: 
    case ARM::VLD1d64Qwb_fixed: 
    case ARM::VLD1d64Twb_fixed: 
    case ARM::VLD1d64wb_fixed: 
    case ARM::VLD1d8Qwb_fixed: 
    case ARM::VLD1d8Twb_fixed: 
    case ARM::VLD1d8wb_fixed: 
    case ARM::VLD1q16wb_fixed: 
    case ARM::VLD1q32wb_fixed: 
    case ARM::VLD1q64wb_fixed: 
    case ARM::VLD1q8wb_fixed: 
    case ARM::VLD2DUPd16wb_fixed: 
    case ARM::VLD2DUPd16x2wb_fixed: 
    case ARM::VLD2DUPd32wb_fixed: 
    case ARM::VLD2DUPd32x2wb_fixed: 
    case ARM::VLD2DUPd8wb_fixed: 
    case ARM::VLD2DUPd8x2wb_fixed: 
    case ARM::VLD2b16wb_fixed: 
    case ARM::VLD2b32wb_fixed: 
    case ARM::VLD2b8wb_fixed: 
    case ARM::VLD2d16wb_fixed: 
    case ARM::VLD2d32wb_fixed: 
    case ARM::VLD2d8wb_fixed: 
    case ARM::VLD2q16wb_fixed: 
    case ARM::VLD2q32wb_fixed: 
    case ARM::VLD2q8wb_fixed: printAddrMode6Operand(MI, 2, O); break;
    case ARM::VLD3dWB_fixed_Asm_16: 
    case ARM::VLD3dWB_fixed_Asm_32: 
    case ARM::VLD3dWB_fixed_Asm_8: 
    case ARM::VLD4dWB_fixed_Asm_16: 
    case ARM::VLD4dWB_fixed_Asm_32: 
    case ARM::VLD4dWB_fixed_Asm_8: 
    case ARM::VST3dWB_fixed_Asm_16: 
    case ARM::VST3dWB_fixed_Asm_32: 
    case ARM::VST3dWB_fixed_Asm_8: 
    case ARM::VST4dWB_fixed_Asm_16: 
    case ARM::VST4dWB_fixed_Asm_32: 
    case ARM::VST4dWB_fixed_Asm_8: printAddrMode6Operand(MI, 1, O); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::VLD1DUPd16wb_register:
  case ARM::VLD1DUPd32wb_register:
  case ARM::VLD1DUPd8wb_register:
  case ARM::VLD1DUPq16wb_register:
  case ARM::VLD1DUPq32wb_register:
  case ARM::VLD1DUPq8wb_register:
  case ARM::VLD1d16Qwb_register:
  case ARM::VLD1d16Twb_register:
  case ARM::VLD1d16wb_register:
  case ARM::VLD1d32Qwb_register:
  case ARM::VLD1d32Twb_register:
  case ARM::VLD1d32wb_register:
  case ARM::VLD1d64Qwb_register:
  case ARM::VLD1d64Twb_register:
  case ARM::VLD1d64wb_register:
  case ARM::VLD1d8Qwb_register:
  case ARM::VLD1d8Twb_register:
  case ARM::VLD1d8wb_register:
  case ARM::VLD1q16wb_register:
  case ARM::VLD1q32wb_register:
  case ARM::VLD1q64wb_register:
  case ARM::VLD1q8wb_register:
  case ARM::VLD2DUPd16wb_register:
  case ARM::VLD2DUPd16x2wb_register:
  case ARM::VLD2DUPd32wb_register:
  case ARM::VLD2DUPd32x2wb_register:
  case ARM::VLD2DUPd8wb_register:
  case ARM::VLD2DUPd8x2wb_register:
  case ARM::VLD2b16wb_register:
  case ARM::VLD2b32wb_register:
  case ARM::VLD2b8wb_register:
  case ARM::VLD2d16wb_register:
  case ARM::VLD2d32wb_register:
  case ARM::VLD2d8wb_register:
  case ARM::VLD2q16wb_register:
  case ARM::VLD2q32wb_register:
  case ARM::VLD2q8wb_register:
    printAddrMode6Operand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1LNd16:
  case ARM::VLD1LNd32:
  case ARM::VLD1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    return;
    break;
  case ARM::VLD1LNd16_UPD:
  case ARM::VLD1LNd32_UPD:
  case ARM::VLD1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1LNdWB_register_Asm_16:
  case ARM::VLD1LNdWB_register_Asm_32:
  case ARM::VLD1LNdWB_register_Asm_8:
  case ARM::VLD2LNdWB_register_Asm_16:
  case ARM::VLD2LNdWB_register_Asm_32:
  case ARM::VLD2LNdWB_register_Asm_8:
  case ARM::VLD2LNqWB_register_Asm_16:
  case ARM::VLD2LNqWB_register_Asm_32:
  case ARM::VLD3LNdWB_register_Asm_16:
  case ARM::VLD3LNdWB_register_Asm_32:
  case ARM::VLD3LNdWB_register_Asm_8:
  case ARM::VLD3LNqWB_register_Asm_16:
  case ARM::VLD3LNqWB_register_Asm_32:
  case ARM::VLD4LNdWB_register_Asm_16:
  case ARM::VLD4LNdWB_register_Asm_32:
  case ARM::VLD4LNdWB_register_Asm_8:
  case ARM::VLD4LNqWB_register_Asm_16:
  case ARM::VLD4LNqWB_register_Asm_32:
  case ARM::VST1LNdWB_register_Asm_16:
  case ARM::VST1LNdWB_register_Asm_32:
  case ARM::VST1LNdWB_register_Asm_8:
  case ARM::VST2LNdWB_register_Asm_16:
  case ARM::VST2LNdWB_register_Asm_32:
  case ARM::VST2LNdWB_register_Asm_8:
  case ARM::VST2LNqWB_register_Asm_16:
  case ARM::VST2LNqWB_register_Asm_32:
  case ARM::VST3LNdWB_register_Asm_16:
  case ARM::VST3LNdWB_register_Asm_32:
  case ARM::VST3LNdWB_register_Asm_8:
  case ARM::VST3LNqWB_register_Asm_16:
  case ARM::VST3LNqWB_register_Asm_32:
  case ARM::VST4LNdWB_register_Asm_16:
  case ARM::VST4LNdWB_register_Asm_32:
  case ARM::VST4LNdWB_register_Asm_8:
  case ARM::VST4LNqWB_register_Asm_16:
  case ARM::VST4LNqWB_register_Asm_32:
    O << ", "; 
    printAddrMode6Operand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD2LNd16:
  case ARM::VLD2LNd32:
  case ARM::VLD2LNd8:
  case ARM::VLD2LNq16:
  case ARM::VLD2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD2LNd16_UPD:
  case ARM::VLD2LNd32_UPD:
  case ARM::VLD2LNd8_UPD:
  case ARM::VLD2LNq16_UPD:
  case ARM::VLD2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD3DUPd16:
  case ARM::VLD3DUPd32:
  case ARM::VLD3DUPd8:
  case ARM::VLD3DUPq16:
  case ARM::VLD3DUPq32:
  case ARM::VLD3DUPq8:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3DUPd16_UPD:
  case ARM::VLD3DUPd32_UPD:
  case ARM::VLD3DUPd8_UPD:
  case ARM::VLD3DUPq16_UPD:
  case ARM::VLD3DUPq32_UPD:
  case ARM::VLD3DUPq8_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD3LNd16:
  case ARM::VLD3LNd32:
  case ARM::VLD3LNd8:
  case ARM::VLD3LNq16:
  case ARM::VLD3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3LNd16_UPD:
  case ARM::VLD3LNd32_UPD:
  case ARM::VLD3LNd8_UPD:
  case ARM::VLD3LNq16_UPD:
  case ARM::VLD3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d8:
  case ARM::VLD3q16:
  case ARM::VLD3q32:
  case ARM::VLD3q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3d16_UPD:
  case ARM::VLD3d32_UPD:
  case ARM::VLD3d8_UPD:
  case ARM::VLD3q16_UPD:
  case ARM::VLD3q32_UPD:
  case ARM::VLD3q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD4DUPd16:
  case ARM::VLD4DUPd32:
  case ARM::VLD4DUPd8:
  case ARM::VLD4DUPq16:
  case ARM::VLD4DUPq32:
  case ARM::VLD4DUPq8:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4DUPd16_UPD:
  case ARM::VLD4DUPd32_UPD:
  case ARM::VLD4DUPd8_UPD:
  case ARM::VLD4DUPq16_UPD:
  case ARM::VLD4DUPq32_UPD:
  case ARM::VLD4DUPq8_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD4LNd16:
  case ARM::VLD4LNd32:
  case ARM::VLD4LNd8:
  case ARM::VLD4LNq16:
  case ARM::VLD4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4LNd16_UPD:
  case ARM::VLD4LNd32_UPD:
  case ARM::VLD4LNd8_UPD:
  case ARM::VLD4LNq16_UPD:
  case ARM::VLD4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d8:
  case ARM::VLD4q16:
  case ARM::VLD4q32:
  case ARM::VLD4q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4d16_UPD:
  case ARM::VLD4d32_UPD:
  case ARM::VLD4d8_UPD:
  case ARM::VLD4q16_UPD:
  case ARM::VLD4q32_UPD:
  case ARM::VLD4q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VMLALslsv2i32:
  case ARM::VMLALslsv4i16:
  case ARM::VMLALsluv2i32:
  case ARM::VMLALsluv4i16:
  case ARM::VMLAslv2i32:
  case ARM::VMLAslv4i16:
  case ARM::VMLAslv4i32:
  case ARM::VMLAslv8i16:
  case ARM::VMLSLslsv2i32:
  case ARM::VMLSLslsv4i16:
  case ARM::VMLSLsluv2i32:
  case ARM::VMLSLsluv4i16:
  case ARM::VMLSslv2i32:
  case ARM::VMLSslv4i16:
  case ARM::VMLSslv4i32:
  case ARM::VMLSslv8i16:
  case ARM::VQDMLALslv2i32:
  case ARM::VQDMLALslv4i16:
  case ARM::VQDMLSLslv2i32:
  case ARM::VQDMLSLslv4i16:
    O << ", "; 
    printOperand(MI, 3, O); 
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case ARM::VMLAslfd:
  case ARM::VMLAslfq:
  case ARM::VMLSslfd:
  case ARM::VMLSslfq:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    printVectorIndex(MI, 4, O); 
    return;
    break;
  case ARM::VMULLslsv2i32:
  case ARM::VMULLslsv4i16:
  case ARM::VMULLsluv2i32:
  case ARM::VMULLsluv4i16:
  case ARM::VMULslv2i32:
  case ARM::VMULslv4i16:
  case ARM::VMULslv4i32:
  case ARM::VMULslv8i16:
  case ARM::VQDMULHslv2i32:
  case ARM::VQDMULHslv4i16:
  case ARM::VQDMULHslv4i32:
  case ARM::VQDMULHslv8i16:
  case ARM::VQDMULLslv2i32:
  case ARM::VQDMULLslv4i16:
  case ARM::VQRDMULHslv2i32:
  case ARM::VQRDMULHslv4i16:
  case ARM::VQRDMULHslv4i32:
  case ARM::VQRDMULHslv8i16:
    O << ", "; 
    printOperand(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case ARM::VMULslfd:
  case ARM::VMULslfq:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printVectorIndex(MI, 3, O); 
    return;
    break;
  case ARM::VST1LNd16:
  case ARM::VST1LNd32:
  case ARM::VST1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1LNd16_UPD:
  case ARM::VST1LNd32_UPD:
  case ARM::VST1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST2LNd16:
  case ARM::VST2LNd32:
  case ARM::VST2LNd8:
  case ARM::VST2LNq16:
  case ARM::VST2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST2LNd16_UPD:
  case ARM::VST2LNd32_UPD:
  case ARM::VST2LNd8_UPD:
  case ARM::VST2LNq16_UPD:
  case ARM::VST2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3LNd16:
  case ARM::VST3LNd32:
  case ARM::VST3LNd8:
  case ARM::VST3LNq16:
  case ARM::VST3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3LNd16_UPD:
  case ARM::VST3LNd32_UPD:
  case ARM::VST3LNd8_UPD:
  case ARM::VST3LNq16_UPD:
  case ARM::VST3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d8:
  case ARM::VST3q16:
  case ARM::VST3q32:
  case ARM::VST3q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3d16_UPD:
  case ARM::VST3d32_UPD:
  case ARM::VST3d8_UPD:
  case ARM::VST3q16_UPD:
  case ARM::VST3q32_UPD:
  case ARM::VST3q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4LNd16:
  case ARM::VST4LNd32:
  case ARM::VST4LNd8:
  case ARM::VST4LNq16:
  case ARM::VST4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4LNd16_UPD:
  case ARM::VST4LNd32_UPD:
  case ARM::VST4LNd8_UPD:
  case ARM::VST4LNq16_UPD:
  case ARM::VST4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 7, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d8:
  case ARM::VST4q16:
  case ARM::VST4q32:
  case ARM::VST4q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4d16_UPD:
  case ARM::VST4d32_UPD:
  case ARM::VST4d8_UPD:
  case ARM::VST4q16_UPD:
  case ARM::VST4q32_UPD:
  case ARM::VST4q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBX1:
  case ARM::VTBX2:
  case ARM::VTBX3:
  case ARM::VTBX4:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::VTBX1: printVectorListOne(MI, 2, O); break;
    case ARM::VTBX2: printVectorListTwo(MI, 2, O); break;
    case ARM::VTBX3: printVectorListThree(MI, 2, O); break;
    case ARM::VTBX4: printVectorListFour(MI, 2, O); break;
    }
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::sysLDMDA:
  case ARM::sysLDMDB:
  case ARM::sysLDMIA:
  case ARM::sysLDMIB:
  case ARM::sysSTMDA:
  case ARM::sysSTMDB:
  case ARM::sysSTMIA:
  case ARM::sysSTMIB:
    O << ", "; 
    printRegisterList(MI, 3, O); 
    O << " ^"; 
    return;
    break;
  case ARM::sysLDMDA_UPD:
  case ARM::sysLDMDB_UPD:
  case ARM::sysLDMIA_UPD:
  case ARM::sysLDMIB_UPD:
  case ARM::sysSTMDA_UPD:
  case ARM::sysSTMDB_UPD:
  case ARM::sysSTMIA_UPD:
  case ARM::sysSTMIB_UPD:
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    O << " ^"; 
    return;
    break;
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2LDRD_POST:
  case ARM::t2STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::t2STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode7Operand(MI, 3, O); 
    printT2AddrModeImm8s4OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::t2LDRD_PRE:
  case ARM::t2STRD_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRD_PRE: printOperand(MI, 1, O); break;
    case ARM::t2STRD_PRE: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printT2AddrModeImm8s4Operand(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case ARM::t2SMLSLDX:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 278 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'D', '4', '_', 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', 0,
  /* 13 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 26 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 39 */ 'd', '1', '0', 0,
  /* 43 */ 'q', '1', '0', 0,
  /* 47 */ 'r', '1', '0', 0,
  /* 51 */ 's', '1', '0', 0,
  /* 55 */ 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', 0,
  /* 71 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 87 */ 'd', '2', '0', 0,
  /* 91 */ 's', '2', '0', 0,
  /* 95 */ 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', '_', 'D', '3', '0', 0,
  /* 111 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 127 */ 'd', '3', '0', 0,
  /* 131 */ 's', '3', '0', 0,
  /* 135 */ 'd', '0', 0,
  /* 138 */ 'q', '0', 0,
  /* 141 */ 'm', 'v', 'f', 'r', '0', 0,
  /* 147 */ 's', '0', 0,
  /* 150 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 161 */ 'D', '5', '_', 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', 0,
  /* 174 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 188 */ 'd', '1', '1', 0,
  /* 192 */ 'q', '1', '1', 0,
  /* 196 */ 'r', '1', '1', 0,
  /* 200 */ 's', '1', '1', 0,
  /* 204 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 216 */ 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', 0,
  /* 232 */ 'd', '2', '1', 0,
  /* 236 */ 's', '2', '1', 0,
  /* 240 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 252 */ 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', '_', 'D', '3', '1', 0,
  /* 268 */ 'd', '3', '1', 0,
  /* 272 */ 's', '3', '1', 0,
  /* 276 */ 'Q', '0', '_', 'Q', '1', 0,
  /* 282 */ 'd', '1', 0,
  /* 285 */ 'q', '1', 0,
  /* 288 */ 'm', 'v', 'f', 'r', '1', 0,
  /* 294 */ 's', '1', 0,
  /* 297 */ 'D', '6', '_', 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', 0,
  /* 311 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 326 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 341 */ 'd', '1', '2', 0,
  /* 345 */ 'q', '1', '2', 0,
  /* 349 */ 'r', '1', '2', 0,
  /* 353 */ 's', '1', '2', 0,
  /* 357 */ 'D', '1', '6', '_', 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', 0,
  /* 373 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 389 */ 'd', '2', '2', 0,
  /* 393 */ 's', '2', '2', 0,
  /* 397 */ 'D', '0', '_', 'D', '2', 0,
  /* 403 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 412 */ 'Q', '1', '_', 'Q', '2', 0,
  /* 418 */ 'd', '2', 0,
  /* 421 */ 'q', '2', 0,
  /* 424 */ 'r', '2', 0,
  /* 427 */ 's', '2', 0,
  /* 430 */ 'D', '7', '_', 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', 0,
  /* 444 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 456 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 472 */ 'd', '1', '3', 0,
  /* 476 */ 'q', '1', '3', 0,
  /* 480 */ 's', '1', '3', 0,
  /* 484 */ 'D', '1', '7', '_', 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', 0,
  /* 500 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 512 */ 'd', '2', '3', 0,
  /* 516 */ 's', '2', '3', 0,
  /* 520 */ 'D', '1', '_', 'D', '3', 0,
  /* 526 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 535 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 547 */ 'd', '3', 0,
  /* 550 */ 'q', '3', 0,
  /* 553 */ 'r', '3', 0,
  /* 556 */ 's', '3', 0,
  /* 559 */ 'D', '8', '_', 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', 0,
  /* 574 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 590 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 606 */ 'd', '1', '4', 0,
  /* 610 */ 'q', '1', '4', 0,
  /* 614 */ 's', '1', '4', 0,
  /* 618 */ 'D', '1', '8', '_', 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', 0,
  /* 634 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 650 */ 'd', '2', '4', 0,
  /* 654 */ 's', '2', '4', 0,
  /* 658 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', 0,
  /* 667 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 679 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 691 */ 'd', '4', 0,
  /* 694 */ 'q', '4', 0,
  /* 697 */ 'r', '4', 0,
  /* 700 */ 's', '4', 0,
  /* 703 */ 'D', '9', '_', 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', 0,
  /* 718 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 730 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 746 */ 'd', '1', '5', 0,
  /* 750 */ 'q', '1', '5', 0,
  /* 754 */ 's', '1', '5', 0,
  /* 758 */ 'D', '1', '9', '_', 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', 0,
  /* 774 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 786 */ 'd', '2', '5', 0,
  /* 790 */ 's', '2', '5', 0,
  /* 794 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', 0,
  /* 803 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 812 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 824 */ 'd', '5', 0,
  /* 827 */ 'q', '5', 0,
  /* 830 */ 'r', '5', 0,
  /* 833 */ 's', '5', 0,
  /* 836 */ 'D', '1', '0', '_', 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', 0,
  /* 852 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 868 */ 'd', '1', '6', 0,
  /* 872 */ 's', '1', '6', 0,
  /* 876 */ 'D', '2', '0', '_', 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', 0,
  /* 892 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 908 */ 'd', '2', '6', 0,
  /* 912 */ 's', '2', '6', 0,
  /* 916 */ 'D', '0', '_', 'D', '2', '_', 'D', '4', '_', 'D', '6', 0,
  /* 928 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 940 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 952 */ 'd', '6', 0,
  /* 955 */ 'q', '6', 0,
  /* 958 */ 'r', '6', 0,
  /* 961 */ 's', '6', 0,
  /* 964 */ 'D', '1', '1', '_', 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', 0,
  /* 980 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 992 */ 'd', '1', '7', 0,
  /* 996 */ 's', '1', '7', 0,
  /* 1000 */ 'D', '2', '1', '_', 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', 0,
  /* 1016 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 1028 */ 'd', '2', '7', 0,
  /* 1032 */ 's', '2', '7', 0,
  /* 1036 */ 'D', '1', '_', 'D', '3', '_', 'D', '5', '_', 'D', '7', 0,
  /* 1048 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 1057 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 1069 */ 'd', '7', 0,
  /* 1072 */ 'q', '7', 0,
  /* 1075 */ 'r', '7', 0,
  /* 1078 */ 's', '7', 0,
  /* 1081 */ 'D', '1', '2', '_', 'D', '1', '4', '_', 'D', '1', '6', '_', 'D', '1', '8', 0,
  /* 1097 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 1113 */ 'd', '1', '8', 0,
  /* 1117 */ 's', '1', '8', 0,
  /* 1121 */ 'D', '2', '2', '_', 'D', '2', '4', '_', 'D', '2', '6', '_', 'D', '2', '8', 0,
  /* 1137 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 1153 */ 'd', '2', '8', 0,
  /* 1157 */ 's', '2', '8', 0,
  /* 1161 */ 'D', '2', '_', 'D', '4', '_', 'D', '6', '_', 'D', '8', 0,
  /* 1173 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 1185 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 1197 */ 'd', '8', 0,
  /* 1200 */ 'q', '8', 0,
  /* 1203 */ 'r', '8', 0,
  /* 1206 */ 's', '8', 0,
  /* 1209 */ 'D', '1', '3', '_', 'D', '1', '5', '_', 'D', '1', '7', '_', 'D', '1', '9', 0,
  /* 1225 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 1237 */ 'd', '1', '9', 0,
  /* 1241 */ 's', '1', '9', 0,
  /* 1245 */ 'D', '2', '3', '_', 'D', '2', '5', '_', 'D', '2', '7', '_', 'D', '2', '9', 0,
  /* 1261 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 1273 */ 'd', '2', '9', 0,
  /* 1277 */ 's', '2', '9', 0,
  /* 1281 */ 'D', '3', '_', 'D', '5', '_', 'D', '7', '_', 'D', '9', 0,
  /* 1293 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 1302 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 1314 */ 'd', '9', 0,
  /* 1317 */ 'q', '9', 0,
  /* 1320 */ 'r', '9', 0,
  /* 1323 */ 's', '9', 0,
  /* 1326 */ 'p', 'c', 0,
  /* 1329 */ 'f', 'p', 'e', 'x', 'c', 0,
  /* 1335 */ 'f', 'p', 's', 'i', 'd', 0,
  /* 1341 */ 'i', 't', 's', 't', 'a', 't', 'e', 0,
  /* 1349 */ 's', 'p', 0,
  /* 1352 */ 'f', 'p', 's', 'c', 'r', 0,
  /* 1358 */ 'l', 'r', 0,
  /* 1361 */ 'a', 'p', 's', 'r', 0,
  /* 1366 */ 'c', 'p', 's', 'r', 0,
  /* 1371 */ 's', 'p', 's', 'r', 0,
  /* 1376 */ 'f', 'p', 's', 'c', 'r', '_', 'n', 'z', 'c', 'v', 0,
  };

  static const unsigned RegAsmOffset[] = {
    1361, 1366, 135, 282, 418, 547, 691, 824, 952, 1069, 1197, 1314, 39, 188, 
    341, 472, 606, 746, 868, 992, 1113, 1237, 87, 232, 389, 512, 650, 786, 
    908, 1028, 1153, 1273, 127, 268, 1329, 1352, 1376, 1335, 1341, 1358, 141, 288, 
    1326, 138, 285, 421, 550, 694, 827, 955, 1072, 1200, 1317, 43, 192, 345, 
    476, 610, 750, 144, 291, 424, 553, 697, 830, 958, 1075, 1203, 1320, 47, 
    196, 349, 147, 294, 427, 556, 700, 833, 961, 1078, 1206, 1323, 51, 200, 
    353, 480, 614, 754, 872, 996, 1117, 1241, 91, 236, 393, 516, 654, 790, 
    912, 1032, 1157, 1277, 131, 272, 1349, 1371, 397, 520, 661, 797, 922, 1042, 
    1167, 1287, 6, 167, 303, 436, 566, 710, 844, 972, 1089, 1217, 63, 224, 
    365, 492, 626, 766, 884, 1008, 1129, 1253, 103, 260, 276, 412, 541, 685, 
    818, 946, 1063, 1191, 1308, 32, 180, 333, 464, 598, 738, 535, 679, 812, 
    940, 1057, 1185, 1302, 26, 174, 326, 456, 590, 730, 403, 526, 670, 803, 
    931, 1048, 1176, 1293, 16, 150, 314, 444, 578, 718, 856, 980, 1101, 1225, 
    75, 204, 377, 500, 638, 774, 896, 1016, 1141, 1261, 115, 240, 658, 794, 
    919, 1039, 1164, 1284, 3, 164, 300, 433, 562, 706, 840, 968, 1085, 1213, 
    59, 220, 361, 488, 622, 762, 880, 1004, 1125, 1249, 99, 256, 916, 1036, 
    1161, 1281, 0, 161, 297, 430, 559, 703, 836, 964, 1081, 1209, 55, 216, 
    357, 484, 618, 758, 876, 1000, 1121, 1245, 95, 252, 406, 673, 934, 1179, 
    19, 318, 582, 860, 1105, 79, 381, 642, 900, 1145, 119, 667, 928, 1173, 
    13, 311, 574, 852, 1097, 71, 373, 634, 892, 1137, 111, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  llvm_unreachable("Operand not in map!");
}

bool ARMInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case ARM::DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM::t2DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (t2DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::t2DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (t2DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::t2ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (t2ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case ARM::tMOVr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == ARM::R8 &&
        MI->getOperand(1).getReg() == ARM::R8 &&
        MI->getOperand(2).getImm() == 14 &&
        MI->getOperand(3).getImm() == 0) {
      // (tMOVr R8, R8, 14, 0)
      AsmString = "nop";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
