//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SparcAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    630U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    623U,	// BUNDLE
    268435560U,	// ADDCCri
    268435560U,	// ADDCCrr
    268435884U,	// ADDXri
    268435884U,	// ADDXrr
    268435588U,	// ADDri
    268435588U,	// ADDrr
    570425386U,	// ADJCALLSTACKDOWN
    570425405U,	// ADJCALLSTACKUP
    268435751U,	// ANDNri
    268435751U,	// ANDNrr
    268435622U,	// ANDri
    268435622U,	// ANDrr
    570425422U,	// BA
    805307048U,	// BCOND
    570425611U,	// CALL
    335544512U,	// FABSD
    335544697U,	// FABSS
    268435593U,	// FADDD
    268435791U,	// FADDS
    805307047U,	// FBCOND
    637534393U,	// FCMPD
    637534578U,	// FCMPS
    268435668U,	// FDIVD
    268435848U,	// FDIVS
    335544573U,	// FDTOI
    335544676U,	// FDTOS
    335544491U,	// FITOD
    335544683U,	// FITOS
    702U,	// FLUSHW
    335544539U,	// FMOVD
    1207960234U,	// FMOVD_FCC
    1241514666U,	// FMOVD_ICC
    335544719U,	// FMOVS
    1207960244U,	// FMOVS_FCC
    1241514676U,	// FMOVS_ICC
    268435607U,	// FMULD
    268435805U,	// FMULS
    335544464U,	// FNEGD
    335544662U,	// FNEGS
    268435614U,	// FSMULD
    335544519U,	// FSQRTD
    335544704U,	// FSQRTS
    335544498U,	// FSTOD
    335544580U,	// FSTOI
    268435581U,	// FSUBD
    268435784U,	// FSUBS
    335544344U,	// FpABSD
    335544353U,	// FpMOVD
    335544335U,	// FpNEGD
    1342177286U,	// GETPCX
    1610613003U,	// JMPLri
    1610613003U,	// JMPLrr
    1879048846U,	// LDDFri
    1879048846U,	// LDDFrr
    1879048852U,	// LDFri
    1879048852U,	// LDFrr
    1879048832U,	// LDSBri
    1879048832U,	// LDSBrr
    1879048857U,	// LDSHri
    1879048857U,	// LDSHrr
    1879048839U,	// LDUBri
    1879048839U,	// LDUBrr
    1879048864U,	// LDUHri
    1879048864U,	// LDUHrr
    1879048852U,	// LDri
    1879048852U,	// LDrr
    2147483780U,	// LEA_ADDri
    1207960250U,	// MOVFCCri
    1207960250U,	// MOVFCCrr
    1241514682U,	// MOVICCri
    1241514682U,	// MOVICCrr
    688U,	// NOP
    268435757U,	// ORNri
    268435757U,	// ORNrr
    268435771U,	// ORri
    268435771U,	// ORrr
    335544439U,	// POPCrr
    570425351U,	// RDY
    268435682U,	// RESTOREri
    268435682U,	// RESTORErr
    570425944U,	// RET
    570425953U,	// RETL
    268435691U,	// SAVEri
    268435691U,	// SAVErr
    268435866U,	// SDIVri
    268435866U,	// SDIVrr
    434U,	// SELECT_CC_DFP_FCC
    517U,	// SELECT_CC_DFP_ICC
    462U,	// SELECT_CC_FP_FCC
    545U,	// SELECT_CC_FP_ICC
    489U,	// SELECT_CC_Int_FCC
    572U,	// SELECT_CC_Int_ICC
    335544566U,	// SETHIi
    268435729U,	// SLLri
    268435729U,	// SLLrr
    268435739U,	// SMULri
    268435739U,	// SMULrr
    268435538U,	// SRAri
    268435538U,	// SRArr
    268435734U,	// SRLri
    268435734U,	// SRLrr
    2415919191U,	// STBri
    2415919191U,	// STBrr
    2415919311U,	// STDFri
    2415919105U,	// STDFrr
    2415919510U,	// STFri
    2415919510U,	// STFrr
    2415919345U,	// STHri
    2415919345U,	// STHrr
    2415919510U,	// STri
    2415919510U,	// STrr
    268435553U,	// SUBCCri
    268435553U,	// SUBCCrr
    268435567U,	// SUBXCCrr
    268435878U,	// SUBXri
    268435878U,	// SUBXrr
    268435548U,	// SUBri
    268435548U,	// SUBrr
    618U,	// TA3
    268435872U,	// UDIVri
    268435872U,	// UDIVrr
    268435745U,	// UMULri
    268435745U,	// UMULrr
    570425650U,	// UNIMP
    654311748U,	// WRYri
    654311748U,	// WRYrr
    268435769U,	// XNORri
    268435769U,	// XNORrr
    268435775U,	// XORri
    268435775U,	// XORrr
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 's', 't', 'd', 32, 32, 0,
  /* 6 */ 'r', 'd', 32, '%', 'y', ',', 32, 0,
  /* 14 */ '!', 'F', 'p', 'N', 'E', 'G', 'D', 32, 0,
  /* 23 */ '!', 'F', 'p', 'A', 'B', 'S', 'D', 32, 0,
  /* 32 */ '!', 'F', 'p', 'M', 'O', 'V', 'D', 32, 0,
  /* 41 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 60 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 77 */ 'b', 'a', 32, 0,
  /* 81 */ 's', 'r', 'a', 32, 0,
  /* 86 */ 's', 't', 'b', 32, 0,
  /* 91 */ 's', 'u', 'b', 32, 0,
  /* 96 */ 's', 'u', 'b', 'c', 'c', 32, 0,
  /* 103 */ 'a', 'd', 'd', 'c', 'c', 32, 0,
  /* 110 */ 's', 'u', 'b', 'x', 'c', 'c', 32, 0,
  /* 118 */ 'p', 'o', 'p', 'c', 32, 0,
  /* 124 */ 'f', 's', 'u', 'b', 'd', 32, 0,
  /* 131 */ 'a', 'd', 'd', 32, 0,
  /* 136 */ 'f', 'a', 'd', 'd', 'd', 32, 0,
  /* 143 */ 'f', 'n', 'e', 'g', 'd', 32, 0,
  /* 150 */ 'f', 'm', 'u', 'l', 'd', 32, 0,
  /* 157 */ 'f', 's', 'm', 'u', 'l', 'd', 32, 0,
  /* 165 */ 'a', 'n', 'd', 32, 0,
  /* 170 */ 'f', 'i', 't', 'o', 'd', 32, 0,
  /* 177 */ 'f', 's', 't', 'o', 'd', 32, 0,
  /* 184 */ 'f', 'c', 'm', 'p', 'd', 32, 0,
  /* 191 */ 'f', 'a', 'b', 's', 'd', 32, 0,
  /* 198 */ 'f', 's', 'q', 'r', 't', 'd', 32, 0,
  /* 206 */ 's', 't', 'd', 32, 0,
  /* 211 */ 'f', 'd', 'i', 'v', 'd', 32, 0,
  /* 218 */ 'f', 'm', 'o', 'v', 'd', 32, 0,
  /* 225 */ 'r', 'e', 's', 't', 'o', 'r', 'e', 32, 0,
  /* 234 */ 's', 'a', 'v', 'e', 32, 0,
  /* 240 */ 's', 't', 'h', 32, 0,
  /* 245 */ 's', 'e', 't', 'h', 'i', 32, 0,
  /* 252 */ 'f', 'd', 't', 'o', 'i', 32, 0,
  /* 259 */ 'f', 's', 't', 'o', 'i', 32, 0,
  /* 266 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 272 */ 's', 'l', 'l', 32, 0,
  /* 277 */ 's', 'r', 'l', 32, 0,
  /* 282 */ 's', 'm', 'u', 'l', 32, 0,
  /* 288 */ 'u', 'm', 'u', 'l', 32, 0,
  /* 294 */ 'a', 'n', 'd', 'n', 32, 0,
  /* 300 */ 'o', 'r', 'n', 32, 0,
  /* 305 */ 'u', 'n', 'i', 'm', 'p', 32, 0,
  /* 312 */ 'x', 'n', 'o', 'r', 32, 0,
  /* 318 */ 'x', 'o', 'r', 32, 0,
  /* 323 */ 'w', 'r', 32, 0,
  /* 327 */ 'f', 's', 'u', 'b', 's', 32, 0,
  /* 334 */ 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 341 */ 'f', 'n', 'e', 'g', 's', 32, 0,
  /* 348 */ 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 355 */ 'f', 'd', 't', 'o', 's', 32, 0,
  /* 362 */ 'f', 'i', 't', 'o', 's', 32, 0,
  /* 369 */ 'f', 'c', 'm', 'p', 's', 32, 0,
  /* 376 */ 'f', 'a', 'b', 's', 's', 32, 0,
  /* 383 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 391 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 398 */ 'f', 'm', 'o', 'v', 's', 32, 0,
  /* 405 */ 's', 't', 32, 0,
  /* 409 */ 's', 'd', 'i', 'v', 32, 0,
  /* 415 */ 'u', 'd', 'i', 'v', 32, 0,
  /* 421 */ 's', 'u', 'b', 'x', 32, 0,
  /* 427 */ 'a', 'd', 'd', 'x', 32, 0,
  /* 433 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 461 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 488 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 516 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 544 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 571 */ ';', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 599 */ 'j', 'm', 'p', 32, '%', 'i', '7', '+', 0,
  /* 608 */ 'j', 'm', 'p', 32, '%', 'o', '7', '+', 0,
  /* 617 */ 't', 'a', 32, '3', 0,
  /* 622 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 629 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 639 */ 'l', 'd', 's', 'b', 32, '[', 0,
  /* 646 */ 'l', 'd', 'u', 'b', 32, '[', 0,
  /* 653 */ 'l', 'd', 'd', 32, '[', 0,
  /* 659 */ 'l', 'd', 32, '[', 0,
  /* 664 */ 'l', 'd', 's', 'h', 32, '[', 0,
  /* 671 */ 'l', 'd', 'u', 'h', 32, '[', 0,
  /* 678 */ 'f', 'b', 0,
  /* 681 */ 'f', 'm', 'o', 'v', 'd', 0,
  /* 687 */ 'n', 'o', 'p', 0,
  /* 691 */ 'f', 'm', 'o', 'v', 's', 0,
  /* 697 */ 'm', 'o', 'v', 0,
  /* 701 */ 'f', 'l', 'u', 's', 'h', 'w', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 28) & 15) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, FLUSHW, NOP, SELECT_CC_DFP_FCC, SELECT_CC_DFP_ICC, ...
    return;
    break;
  case 1:
    // ADDCCri, ADDCCrr, ADDXri, ADDXrr, ADDri, ADDrr, ANDNri, ANDNrr, ANDri,...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, FCMPD, FCMPS, RDY, RET, RE...
    printOperand(MI, 0, O); 
    break;
  case 3:
    // BCOND, FBCOND
    printCCOperand(MI, 1, O); 
    O << ' '; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // FMOVD_FCC, FMOVD_ICC, FMOVS_FCC, FMOVS_ICC, MOVFCCri, MOVFCCrr, MOVICC...
    printCCOperand(MI, 3, O); 
    break;
  case 5:
    // GETPCX
    printGetPCX(MI, 0, O); 
    return;
    break;
  case 6:
    // JMPLri, JMPLrr
    printMemOperand(MI, 0, O); 
    return;
    break;
  case 7:
    // LDDFri, LDDFrr, LDFri, LDFrr, LDSBri, LDSBrr, LDSHri, LDSHrr, LDUBri, ...
    printMemOperand(MI, 1, O); 
    O << "], "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // LEA_ADDri
    printMemOperand(MI, 1, O, "arith"); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // STBri, STBrr, STDFri, STDFrr, STFri, STFrr, STHri, STHrr, STri, STrr
    printOperand(MI, 2, O); 
    O << ", ["; 
    printMemOperand(MI, 0, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 25) & 7) {
  default:   // unreachable.
  case 0:
    // ADDCCri, ADDCCrr, ADDXri, ADDXrr, ADDri, ADDrr, ANDNri, ANDNrr, ANDri,...
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BA, CALL, RDY, RET, RETL, UNIMP
    return;
    break;
  case 2:
    // FABSD, FABSS, FDTOI, FDTOS, FITOD, FITOS, FMOVD, FMOVS, FNEGD, FNEGS, ...
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // FCMPD, FCMPS, WRYri, WRYrr
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 4:
    // FMOVD_FCC, FMOVS_FCC, MOVFCCri, MOVFCCrr
    O << " %fcc0, "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FMOVD_ICC, FMOVS_ICC, MOVICCri, MOVICCrr
    O << " %icc, "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 24) & 1) {
    // WRYri, WRYrr
    O << ", %y"; 
    return;
  } else {
    // FCMPD, FCMPS
    O << "\n\tnop"; 
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SparcAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 84 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'F', '1', '0', 0,
  /* 4 */ 'F', '2', '0', 0,
  /* 8 */ 'F', '3', '0', 0,
  /* 12 */ 'F', '0', 0,
  /* 15 */ 'G', '0', 0,
  /* 18 */ 'I', '0', 0,
  /* 21 */ 'L', '0', 0,
  /* 24 */ 'O', '0', 0,
  /* 27 */ 'F', '1', '1', 0,
  /* 31 */ 'F', '2', '1', 0,
  /* 35 */ 'F', '3', '1', 0,
  /* 39 */ 'F', '1', 0,
  /* 42 */ 'G', '1', 0,
  /* 45 */ 'I', '1', 0,
  /* 48 */ 'L', '1', 0,
  /* 51 */ 'O', '1', 0,
  /* 54 */ 'F', '1', '2', 0,
  /* 58 */ 'F', '2', '2', 0,
  /* 62 */ 'F', '2', 0,
  /* 65 */ 'G', '2', 0,
  /* 68 */ 'I', '2', 0,
  /* 71 */ 'L', '2', 0,
  /* 74 */ 'O', '2', 0,
  /* 77 */ 'F', '1', '3', 0,
  /* 81 */ 'F', '2', '3', 0,
  /* 85 */ 'F', '3', 0,
  /* 88 */ 'G', '3', 0,
  /* 91 */ 'I', '3', 0,
  /* 94 */ 'L', '3', 0,
  /* 97 */ 'O', '3', 0,
  /* 100 */ 'F', '1', '4', 0,
  /* 104 */ 'F', '2', '4', 0,
  /* 108 */ 'F', '4', 0,
  /* 111 */ 'G', '4', 0,
  /* 114 */ 'I', '4', 0,
  /* 117 */ 'L', '4', 0,
  /* 120 */ 'O', '4', 0,
  /* 123 */ 'F', '1', '5', 0,
  /* 127 */ 'F', '2', '5', 0,
  /* 131 */ 'F', '5', 0,
  /* 134 */ 'G', '5', 0,
  /* 137 */ 'I', '5', 0,
  /* 140 */ 'L', '5', 0,
  /* 143 */ 'O', '5', 0,
  /* 146 */ 'F', '1', '6', 0,
  /* 150 */ 'F', '2', '6', 0,
  /* 154 */ 'F', '6', 0,
  /* 157 */ 'G', '6', 0,
  /* 160 */ 'L', '6', 0,
  /* 163 */ 'F', '1', '7', 0,
  /* 167 */ 'F', '2', '7', 0,
  /* 171 */ 'F', '7', 0,
  /* 174 */ 'G', '7', 0,
  /* 177 */ 'I', '7', 0,
  /* 180 */ 'L', '7', 0,
  /* 183 */ 'O', '7', 0,
  /* 186 */ 'F', '1', '8', 0,
  /* 190 */ 'F', '2', '8', 0,
  /* 194 */ 'F', '8', 0,
  /* 197 */ 'F', '1', '9', 0,
  /* 201 */ 'F', '2', '9', 0,
  /* 205 */ 'F', '9', 0,
  /* 208 */ 'F', 'C', 'C', 0,
  /* 212 */ 'I', 'C', 'C', 0,
  /* 216 */ 'F', 'P', 0,
  /* 219 */ 'S', 'P', 0,
  /* 222 */ 'Y', 0,
  };

  static const unsigned RegAsmOffset[] = {
    12, 62, 108, 154, 194, 0, 54, 100, 146, 186, 4, 58, 104, 150, 
    190, 8, 12, 39, 62, 85, 108, 131, 154, 171, 194, 205, 0, 27, 
    54, 77, 100, 123, 146, 163, 186, 197, 4, 31, 58, 81, 104, 127, 
    150, 167, 190, 201, 8, 35, 208, 15, 42, 65, 88, 111, 134, 157, 
    174, 18, 45, 68, 91, 114, 137, 216, 177, 212, 21, 48, 71, 94, 
    117, 140, 160, 180, 24, 51, 74, 97, 120, 143, 219, 183, 222, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
