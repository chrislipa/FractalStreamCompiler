//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void MipsInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1687U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1680U,	// BUNDLE
    536871862U,	// ADD
    536871949U,	// ADDi
    536872382U,	// ADDiu
    536872362U,	// ADDu
    1073743447U,	// ADJCALLSTACKDOWN
    1073743466U,	// ADJCALLSTACKUP
    536871883U,	// AND
    536871883U,	// AND64
    537134099U,	// ANDi
    537002486U,	// ATOMIC_CMP_SWAP_I16
    537002486U,	// ATOMIC_CMP_SWAP_I16_P8
    537002174U,	// ATOMIC_CMP_SWAP_I32
    537002174U,	// ATOMIC_CMP_SWAP_I32_P8
    537002330U,	// ATOMIC_CMP_SWAP_I64
    537002330U,	// ATOMIC_CMP_SWAP_I64_P8
    537002637U,	// ATOMIC_CMP_SWAP_I8
    537002637U,	// ATOMIC_CMP_SWAP_I8_P8
    536871337U,	// ATOMIC_LOAD_ADD_I16
    536871337U,	// ATOMIC_LOAD_ADD_I16_P8
    536871025U,	// ATOMIC_LOAD_ADD_I32
    536871025U,	// ATOMIC_LOAD_ADD_I32_P8
    536871181U,	// ATOMIC_LOAD_ADD_I64
    536871181U,	// ATOMIC_LOAD_ADD_I64_P8
    536871492U,	// ATOMIC_LOAD_ADD_I8
    536871492U,	// ATOMIC_LOAD_ADD_I8_P8
    536871357U,	// ATOMIC_LOAD_AND_I16
    536871357U,	// ATOMIC_LOAD_AND_I16_P8
    536871045U,	// ATOMIC_LOAD_AND_I32
    536871045U,	// ATOMIC_LOAD_AND_I32_P8
    536871201U,	// ATOMIC_LOAD_AND_I64
    536871201U,	// ATOMIC_LOAD_AND_I64_P8
    536871511U,	// ATOMIC_LOAD_AND_I8
    536871511U,	// ATOMIC_LOAD_AND_I8_P8
    536871377U,	// ATOMIC_LOAD_NAND_I16
    536871377U,	// ATOMIC_LOAD_NAND_I16_P8
    536871065U,	// ATOMIC_LOAD_NAND_I32
    536871065U,	// ATOMIC_LOAD_NAND_I32_P8
    536871221U,	// ATOMIC_LOAD_NAND_I64
    536871221U,	// ATOMIC_LOAD_NAND_I64_P8
    536871530U,	// ATOMIC_LOAD_NAND_I8
    536871530U,	// ATOMIC_LOAD_NAND_I8_P8
    536871434U,	// ATOMIC_LOAD_OR_I16
    536871434U,	// ATOMIC_LOAD_OR_I16_P8
    536871122U,	// ATOMIC_LOAD_OR_I32
    536871122U,	// ATOMIC_LOAD_OR_I32_P8
    536871278U,	// ATOMIC_LOAD_OR_I64
    536871278U,	// ATOMIC_LOAD_OR_I64_P8
    536871584U,	// ATOMIC_LOAD_OR_I8
    536871584U,	// ATOMIC_LOAD_OR_I8_P8
    536871317U,	// ATOMIC_LOAD_SUB_I16
    536871317U,	// ATOMIC_LOAD_SUB_I16_P8
    536871005U,	// ATOMIC_LOAD_SUB_I32
    536871005U,	// ATOMIC_LOAD_SUB_I32_P8
    536871161U,	// ATOMIC_LOAD_SUB_I64
    536871161U,	// ATOMIC_LOAD_SUB_I64_P8
    536871473U,	// ATOMIC_LOAD_SUB_I8
    536871473U,	// ATOMIC_LOAD_SUB_I8_P8
    536871453U,	// ATOMIC_LOAD_XOR_I16
    536871453U,	// ATOMIC_LOAD_XOR_I16_P8
    536871141U,	// ATOMIC_LOAD_XOR_I32
    536871141U,	// ATOMIC_LOAD_XOR_I32_P8
    536871297U,	// ATOMIC_LOAD_XOR_I64
    536871297U,	// ATOMIC_LOAD_XOR_I64_P8
    536871602U,	// ATOMIC_LOAD_XOR_I8
    536871602U,	// ATOMIC_LOAD_XOR_I8_P8
    536871398U,	// ATOMIC_SWAP_I16
    536871398U,	// ATOMIC_SWAP_I16_P8
    536871086U,	// ATOMIC_SWAP_I32
    536871086U,	// ATOMIC_SWAP_I32_P8
    536871242U,	// ATOMIC_SWAP_I64
    536871242U,	// ATOMIC_SWAP_I64_P8
    536871550U,	// ATOMIC_SWAP_I8
    536871550U,	// ATOMIC_SWAP_I8_P8
    603980493U,	// B
    603980774U,	// BC1F
    603981182U,	// BC1T
    536872073U,	// BEQ
    536872073U,	// BEQ64
    537921048U,	// BGEZ
    537921048U,	// BGEZ64
    537920592U,	// BGEZAL
    537921066U,	// BGTZ
    537921066U,	// BGTZ64
    537921054U,	// BLEZ
    537921054U,	// BLEZ64
    537921072U,	// BLTZ
    537921072U,	// BLTZ64
    537920600U,	// BLTZAL
    536871893U,	// BNE
    536871893U,	// BNE64
    0U,	// BuildPairF64
    537920281U,	// CEIL_L_D64
    537920752U,	// CEIL_L_S
    537920394U,	// CEIL_W_D32
    537920394U,	// CEIL_W_D64
    537920856U,	// CEIL_W_S
    537919501U,	// CFC1
    537920632U,	// CLO
    537921061U,	// CLZ
    603980762U,	// CPRESTORE
    1744830490U,	// CTC1
    537920697U,	// CVT_D32_S
    537921020U,	// CVT_D32_W
    537920569U,	// CVT_D64_L
    537920697U,	// CVT_D64_S
    537921020U,	// CVT_D64_W
    537920302U,	// CVT_L_D64
    537920773U,	// CVT_L_S
    537920326U,	// CVT_S_D32
    537920326U,	// CVT_S_D64
    537920578U,	// CVT_S_L
    537921029U,	// CVT_S_W
    537920415U,	// CVT_W_D32
    537920415U,	// CVT_W_D64
    537920877U,	// CVT_W_S
    536872381U,	// DADDiu
    536872361U,	// DADDu
    537134099U,	// DANDi
    537920631U,	// DCLO
    537921060U,	// DCLZ
    537265799U,	// DEXT
    537265793U,	// DINS
    537919507U,	// DMFC1
    1744830496U,	// DMTC1
    537920905U,	// DMULT
    537920978U,	// DMULTu
    536872098U,	// DROTR
    545785332U,	// DROTRV
    537920498U,	// DSBH
    537921098U,	// DSDIV
    537920443U,	// DSHD
    536872032U,	// DSLL
    538969184U,	// DSLL64_32
    545785318U,	// DSLLV
    536871621U,	// DSRA
    545785311U,	// DSRAV
    536872038U,	// DSRL
    545785325U,	// DSRLV
    536872347U,	// DSUBu
    537921084U,	// DUDIV
    553649598U,	// DynAlloc
    553649597U,	// DynAlloc64
    537265800U,	// EXT
    0U,	// ExtractElementF64
    537920335U,	// FABS_D32
    537920335U,	// FABS_D64
    537920797U,	// FABS_S
    536871661U,	// FADD_D32
    536871661U,	// FADD_D64
    536872132U,	// FADD_S
    2348811917U,	// FCMP_D32
    2348811917U,	// FCMP_D64
    2415920781U,	// FCMP_S32
    536871782U,	// FDIV_D32
    536871782U,	// FDIV_D64
    536872244U,	// FDIV_S
    537920291U,	// FLOOR_L_D64
    537920762U,	// FLOOR_L_S
    537920404U,	// FLOOR_W_D32
    537920404U,	// FLOOR_W_D64
    537920866U,	// FLOOR_W_S
    537920365U,	// FMOV_D32
    537920365U,	// FMOV_D64
    537920827U,	// FMOV_S
    536871735U,	// FMUL_D32
    536871735U,	// FMUL_D64
    536872206U,	// FMUL_S
    537920252U,	// FNEG_D32
    537920252U,	// FNEG_D64
    537920723U,	// FNEG_S
    537920342U,	// FSQRT_D32
    537920342U,	// FSQRT_D64
    537920804U,	// FSQRT_S
    536871652U,	// FSUB_D32
    536871652U,	// FSUB_D64
    536872114U,	// FSUB_S
    537265794U,	// INS
    603980854U,	// J
    603980875U,	// JAL
    603980946U,	// JALR
    603980946U,	// JALR64
    603980942U,	// JR
    603980942U,	// JR64
    562037456U,	// LB
    562037456U,	// LB64
    562037456U,	// LB64_P8
    562037456U,	// LB_P8
    562038166U,	// LBu
    562038166U,	// LBu64
    562038166U,	// LBu64_P8
    562038166U,	// LBu_P8
    562037698U,	// LD
    562036737U,	// LDC1
    562036737U,	// LDC164
    562036737U,	// LDC164_P8
    548405299U,	// LDXC1
    548405299U,	// LDXC164
    548405299U,	// LDXC164_P8
    562037698U,	// LD_P8
    553649598U,	// LEA_ADDiu
    553649597U,	// LEA_ADDiu64
    562037764U,	// LH
    562037764U,	// LH64
    562037764U,	// LH64_P8
    562037764U,	// LH_P8
    562038200U,	// LHu
    562038200U,	// LHu64
    562038200U,	// LHu64_P8
    562038200U,	// LHu_P8
    562037858U,	// LL
    562037697U,	// LLD
    562037697U,	// LLD_P8
    562037858U,	// LL_P8
    548405313U,	// LUXC1
    548405313U,	// LUXC1_P8
    570426417U,	// LUi
    570426417U,	// LUi64
    562038287U,	// LW
    562038287U,	// LW64
    562038287U,	// LW64_P8
    562036775U,	// LWC1
    562036775U,	// LWC1_P8
    0U,	// LWL
    0U,	// LWL_P8
    0U,	// LWR
    0U,	// LWR_P8
    548405327U,	// LWXC1
    548405327U,	// LWXC1_P8
    562038287U,	// LW_P8
    562038234U,	// LWu64
    562038234U,	// LWu64_P8
    537920437U,	// MADD
    537920944U,	// MADDU
    537002732U,	// MADD_D32
    537002732U,	// MADD_D64
    537003203U,	// MADD_S
    537919508U,	// MFC1
    603980825U,	// MFHI
    603980825U,	// MFHI64
    603980925U,	// MFLO
    603980925U,	// MFLO64
    1697U,	// MOVCCRToCCR
    541065972U,	// MOVF_D32
    541065972U,	// MOVF_D64
    541066220U,	// MOVF_I
    541066220U,	// MOVF_I64
    541066443U,	// MOVF_S
    536871742U,	// MOVN_I64_D64
    536872049U,	// MOVN_I64_I
    536872049U,	// MOVN_I64_I64
    536872213U,	// MOVN_I64_S
    536871742U,	// MOVN_I_D32
    536871742U,	// MOVN_I_D64
    536872049U,	// MOVN_I_I
    536872049U,	// MOVN_I_I64
    536872213U,	// MOVN_I_S
    541066078U,	// MOVT_D32
    541066078U,	// MOVT_D64
    541066640U,	// MOVT_I
    541066640U,	// MOVT_I64
    541066540U,	// MOVT_S
    536871848U,	// MOVZ_I64_D64
    536872502U,	// MOVZ_I64_I
    536872502U,	// MOVZ_I64_I64
    536872310U,	// MOVZ_I64_S
    536871848U,	// MOVZ_I_D32
    536871848U,	// MOVZ_I_D64
    536872502U,	// MOVZ_I_I
    536872502U,	// MOVZ_I_I64
    536872310U,	// MOVZ_I_S
    537920216U,	// MSUB
    537920930U,	// MSUBU
    537002723U,	// MSUB_D32
    537002723U,	// MSUB_D64
    537003185U,	// MSUB_S
    1744830497U,	// MTC1
    603980831U,	// MTHI
    603980831U,	// MTHI64
    603980931U,	// MTLO
    603980931U,	// MTLO64
    536872044U,	// MUL
    537920906U,	// MULT
    537920979U,	// MULTu
    537002731U,	// NMADD_D32
    537002731U,	// NMADD_D64
    537003202U,	// NMADD_S
    537002722U,	// NMSUB_D32
    537002722U,	// NMSUB_D64
    537003184U,	// NMSUB_S
    1711U,	// NOP
    536872088U,	// NOR
    536872088U,	// NOR64
    536872089U,	// OR
    536872089U,	// OR64
    537134118U,	// ORi
    537134118U,	// ORi64
    537920681U,	// RDHWR
    537920681U,	// RDHWR64
    603980942U,	// RET
    536872099U,	// ROTR
    545785333U,	// ROTRV
    537920270U,	// ROUND_L_D64
    537920741U,	// ROUND_L_S
    537920383U,	// ROUND_W_D32
    537920383U,	// ROUND_W_D64
    537920845U,	// ROUND_W_S
    562037460U,	// SB
    562037460U,	// SB64
    562037460U,	// SB64_P8
    562037460U,	// SB_P8
    1946157790U,	// SC
    1946158000U,	// SCD
    1946158000U,	// SCD_P8
    1946157790U,	// SC_P8
    562037713U,	// SD
    562036743U,	// SDC1
    562036743U,	// SDC164
    562036743U,	// SDC164_P8
    537921099U,	// SDIV
    548405306U,	// SDXC1
    548405306U,	// SDXC164
    548405306U,	// SDXC164_P8
    562037713U,	// SD_P8
    537920203U,	// SEB
    537920203U,	// SEB64
    537920510U,	// SEH
    537920510U,	// SEH64
    0U,	// SETGP01
    0U,	// SETGP2
    562037769U,	// SH
    562037769U,	// SH64
    562037769U,	// SH64_P8
    562037769U,	// SH_P8
    536872033U,	// SLL
    542114913U,	// SLL64_32
    542114913U,	// SLL64_64
    545785319U,	// SLLV
    536872324U,	// SLT
    536872324U,	// SLT64
    536871979U,	// SLTi
    536871979U,	// SLTi64
    536872389U,	// SLTiu
    536872389U,	// SLTiu64
    536872396U,	// SLTu
    536872396U,	// SLTu64
    536871622U,	// SRA
    545785312U,	// SRAV
    536872039U,	// SRL
    545785326U,	// SRLV
    536871641U,	// SUB
    536872348U,	// SUBu
    548405320U,	// SUXC1
    548405320U,	// SUXC1_P8
    562038292U,	// SW
    562038292U,	// SW64
    562038292U,	// SW64_P8
    562036781U,	// SWC1
    562036781U,	// SWC1_P8
    0U,	// SWL
    0U,	// SWL_P8
    0U,	// SWR
    0U,	// SWR_P8
    548405334U,	// SWXC1
    548405334U,	// SWXC1_P8
    562038292U,	// SW_P8
    603981435U,	// SYNC
    537920259U,	// TRUNC_L_D64
    537920730U,	// TRUNC_L_S
    537920372U,	// TRUNC_W_D32
    537920372U,	// TRUNC_W_D64
    537920834U,	// TRUNC_W_S
    537921085U,	// UDIV
    562037702U,	// ULD
    562037702U,	// ULD_P8
    562037763U,	// ULH
    562037763U,	// ULH64
    562037763U,	// ULH64_P8
    562037763U,	// ULH_P8
    562038199U,	// ULHu
    562038199U,	// ULHu64
    562038199U,	// ULHu64_P8
    562038199U,	// ULHu_P8
    562038286U,	// ULW
    562038286U,	// ULW64
    562038286U,	// ULW64_P8
    562038286U,	// ULW_P8
    562037712U,	// USD
    562037712U,	// USD_P8
    562037768U,	// USH
    562037768U,	// USH64
    562037768U,	// USH64_P8
    562037768U,	// USH_P8
    562038291U,	// USW
    562038291U,	// USW64
    562038291U,	// USW64_P8
    562038291U,	// USW_P8
    537920504U,	// WSBH
    536872093U,	// XOR
    536872093U,	// XOR64
    537134117U,	// XORi
    537134117U,	// XORi64
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'd', 'c', '1', 9, 0,
  /* 6 */ 's', 'd', 'c', '1', 9, 0,
  /* 12 */ 'c', 'f', 'c', '1', 9, 0,
  /* 18 */ 'd', 'm', 'f', 'c', '1', 9, 0,
  /* 25 */ 'c', 't', 'c', '1', 9, 0,
  /* 31 */ 'd', 'm', 't', 'c', '1', 9, 0,
  /* 38 */ 'l', 'w', 'c', '1', 9, 0,
  /* 44 */ 's', 'w', 'c', '1', 9, 0,
  /* 50 */ 'l', 'd', 'x', 'c', '1', 9, 0,
  /* 57 */ 's', 'd', 'x', 'c', '1', 9, 0,
  /* 64 */ 'l', 'u', 'x', 'c', '1', 9, 0,
  /* 71 */ 's', 'u', 'x', 'c', '1', 9, 0,
  /* 78 */ 'l', 'w', 'x', 'c', '1', 9, 0,
  /* 85 */ 's', 'w', 'x', 'c', '1', 9, 0,
  /* 92 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '3', '2', 9, 0,
  /* 112 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '3', '2', 9, 0,
  /* 132 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '3', '2', 9, 0,
  /* 152 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '3', '2', 9, 0,
  /* 173 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '3', '2', 9, 0,
  /* 189 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '3', '2', 9, 0,
  /* 209 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '3', '2', 9, 0,
  /* 228 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '3', '2', 9, 0,
  /* 248 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '6', '4', 9, 0,
  /* 268 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '6', '4', 9, 0,
  /* 288 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '6', '4', 9, 0,
  /* 308 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '6', '4', 9, 0,
  /* 329 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '6', '4', 9, 0,
  /* 345 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '6', '4', 9, 0,
  /* 365 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '6', '4', 9, 0,
  /* 384 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '6', '4', 9, 0,
  /* 404 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '1', '6', 9, 0,
  /* 424 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '1', '6', 9, 0,
  /* 444 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '1', '6', 9, 0,
  /* 464 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '1', '6', 9, 0,
  /* 485 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '1', '6', 9, 0,
  /* 501 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '1', '6', 9, 0,
  /* 521 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '1', '6', 9, 0,
  /* 540 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '1', '6', 9, 0,
  /* 560 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 's', 'u', 'b', '_', '8', 9, 0,
  /* 579 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'd', 'd', '_', '8', 9, 0,
  /* 598 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'a', 'n', 'd', '_', '8', 9, 0,
  /* 617 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'n', 'a', 'n', 'd', '_', '8', 9, 0,
  /* 637 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 's', 'w', 'a', 'p', '_', '8', 9, 0,
  /* 652 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'c', 'm', 'p', '_', 's', 'w', 'a', 'p', '_', '8', 9, 0,
  /* 671 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'o', 'r', '_', '8', 9, 0,
  /* 689 */ 'a', 't', 'o', 'm', 'i', 'c', '_', 'l', 'o', 'a', 'd', '_', 'x', 'o', 'r', '_', '8', 9, 0,
  /* 708 */ 'd', 's', 'r', 'a', 9, 0,
  /* 714 */ 's', 'e', 'b', 9, 0,
  /* 719 */ 'l', 'b', 9, 0,
  /* 723 */ 's', 'b', 9, 0,
  /* 727 */ 'm', 's', 'u', 'b', 9, 0,
  /* 733 */ 's', 'c', 9, 0,
  /* 737 */ 'n', 'm', 's', 'u', 'b', '.', 'd', 9, 0,
  /* 746 */ 'n', 'm', 'a', 'd', 'd', '.', 'd', 9, 0,
  /* 755 */ 'm', 'o', 'v', 'f', '.', 'd', 9, 0,
  /* 763 */ 'n', 'e', 'g', '.', 'd', 9, 0,
  /* 770 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 'd', 9, 0,
  /* 781 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 'd', 9, 0,
  /* 792 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 'd', 9, 0,
  /* 802 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 'd', 9, 0,
  /* 813 */ 'c', 'v', 't', '.', 'l', '.', 'd', 9, 0,
  /* 822 */ 'm', 'u', 'l', '.', 'd', 9, 0,
  /* 829 */ 'm', 'o', 'v', 'n', '.', 'd', 9, 0,
  /* 837 */ 'c', 'v', 't', '.', 's', '.', 'd', 9, 0,
  /* 846 */ 'a', 'b', 's', '.', 'd', 9, 0,
  /* 853 */ 's', 'q', 'r', 't', '.', 'd', 9, 0,
  /* 861 */ 'm', 'o', 'v', 't', '.', 'd', 9, 0,
  /* 869 */ 'd', 'i', 'v', '.', 'd', 9, 0,
  /* 876 */ 'm', 'o', 'v', '.', 'd', 9, 0,
  /* 883 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 'd', 9, 0,
  /* 894 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 'd', 9, 0,
  /* 905 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 'd', 9, 0,
  /* 915 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 'd', 9, 0,
  /* 926 */ 'c', 'v', 't', '.', 'w', '.', 'd', 9, 0,
  /* 935 */ 'm', 'o', 'v', 'z', '.', 'd', 9, 0,
  /* 943 */ 's', 'c', 'd', 9, 0,
  /* 948 */ 'm', 'a', 'd', 'd', 9, 0,
  /* 954 */ 'd', 's', 'h', 'd', 9, 0,
  /* 960 */ 'l', 'l', 'd', 9, 0,
  /* 965 */ 'u', 'l', 'd', 9, 0,
  /* 970 */ 'a', 'n', 'd', 9, 0,
  /* 975 */ 'u', 's', 'd', 9, 0,
  /* 980 */ 'b', 'n', 'e', 9, 0,
  /* 985 */ '.', 'c', 'p', 'r', 'e', 's', 't', 'o', 'r', 'e', 9, 0,
  /* 997 */ 'b', 'c', '1', 'f', 9, 0,
  /* 1003 */ 'm', 'o', 'v', 'f', 9, 0,
  /* 1009 */ 'd', 's', 'b', 'h', 9, 0,
  /* 1015 */ 'w', 's', 'b', 'h', 9, 0,
  /* 1021 */ 's', 'e', 'h', 9, 0,
  /* 1026 */ 'u', 'l', 'h', 9, 0,
  /* 1031 */ 'u', 's', 'h', 9, 0,
  /* 1036 */ 'a', 'd', 'd', 'i', 9, 0,
  /* 1042 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 1048 */ 'm', 'f', 'h', 'i', 9, 0,
  /* 1054 */ 'm', 't', 'h', 'i', 9, 0,
  /* 1060 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 1066 */ 's', 'l', 't', 'i', 9, 0,
  /* 1072 */ 'l', 'u', 'i', 9, 0,
  /* 1077 */ 'j', 9, 0,
  /* 1080 */ 'c', 'v', 't', '.', 'd', '.', 'l', 9, 0,
  /* 1089 */ 'c', 'v', 't', '.', 's', '.', 'l', 9, 0,
  /* 1098 */ 'j', 'a', 'l', 9, 0,
  /* 1103 */ 'b', 'g', 'e', 'z', 'a', 'l', 9, 0,
  /* 1111 */ 'b', 'l', 't', 'z', 'a', 'l', 9, 0,
  /* 1119 */ 'd', 's', 'l', 'l', 9, 0,
  /* 1125 */ 'd', 's', 'r', 'l', 9, 0,
  /* 1131 */ 'm', 'u', 'l', 9, 0,
  /* 1136 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 1142 */ 'd', 'c', 'l', 'o', 9, 0,
  /* 1148 */ 'm', 'f', 'l', 'o', 9, 0,
  /* 1154 */ 'm', 't', 'l', 'o', 9, 0,
  /* 1160 */ 'b', 'e', 'q', 9, 0,
  /* 1165 */ 'j', 'r', 9, 0,
  /* 1169 */ 'j', 'a', 'l', 'r', 9, 0,
  /* 1175 */ 'n', 'o', 'r', 9, 0,
  /* 1180 */ 'x', 'o', 'r', 9, 0,
  /* 1185 */ 'd', 'r', 'o', 't', 'r', 9, 0,
  /* 1192 */ 'r', 'd', 'h', 'w', 'r', 9, 0,
  /* 1199 */ 'n', 'm', 's', 'u', 'b', '.', 's', 9, 0,
  /* 1208 */ 'c', 'v', 't', '.', 'd', '.', 's', 9, 0,
  /* 1217 */ 'n', 'm', 'a', 'd', 'd', '.', 's', 9, 0,
  /* 1226 */ 'm', 'o', 'v', 'f', '.', 's', 9, 0,
  /* 1234 */ 'n', 'e', 'g', '.', 's', 9, 0,
  /* 1241 */ 't', 'r', 'u', 'n', 'c', '.', 'l', '.', 's', 9, 0,
  /* 1252 */ 'r', 'o', 'u', 'n', 'd', '.', 'l', '.', 's', 9, 0,
  /* 1263 */ 'c', 'e', 'i', 'l', '.', 'l', '.', 's', 9, 0,
  /* 1273 */ 'f', 'l', 'o', 'o', 'r', '.', 'l', '.', 's', 9, 0,
  /* 1284 */ 'c', 'v', 't', '.', 'l', '.', 's', 9, 0,
  /* 1293 */ 'm', 'u', 'l', '.', 's', 9, 0,
  /* 1300 */ 'm', 'o', 'v', 'n', '.', 's', 9, 0,
  /* 1308 */ 'a', 'b', 's', '.', 's', 9, 0,
  /* 1315 */ 's', 'q', 'r', 't', '.', 's', 9, 0,
  /* 1323 */ 'm', 'o', 'v', 't', '.', 's', 9, 0,
  /* 1331 */ 'd', 'i', 'v', '.', 's', 9, 0,
  /* 1338 */ 'm', 'o', 'v', '.', 's', 9, 0,
  /* 1345 */ 't', 'r', 'u', 'n', 'c', '.', 'w', '.', 's', 9, 0,
  /* 1356 */ 'r', 'o', 'u', 'n', 'd', '.', 'w', '.', 's', 9, 0,
  /* 1367 */ 'c', 'e', 'i', 'l', '.', 'w', '.', 's', 9, 0,
  /* 1377 */ 'f', 'l', 'o', 'o', 'r', '.', 'w', '.', 's', 9, 0,
  /* 1388 */ 'c', 'v', 't', '.', 'w', '.', 's', 9, 0,
  /* 1397 */ 'm', 'o', 'v', 'z', '.', 's', 9, 0,
  /* 1405 */ 'b', 'c', '1', 't', 9, 0,
  /* 1411 */ 's', 'l', 't', 9, 0,
  /* 1416 */ 'd', 'm', 'u', 'l', 't', 9, 0,
  /* 1423 */ 'm', 'o', 'v', 't', 9, 0,
  /* 1429 */ 'l', 'b', 'u', 9, 0,
  /* 1434 */ 'd', 's', 'u', 'b', 'u', 9, 0,
  /* 1441 */ 'm', 's', 'u', 'b', 'u', 9, 0,
  /* 1448 */ 'd', 'a', 'd', 'd', 'u', 9, 0,
  /* 1455 */ 'm', 'a', 'd', 'd', 'u', 9, 0,
  /* 1462 */ 'u', 'l', 'h', 'u', 9, 0,
  /* 1468 */ 'd', 'a', 'd', 'd', 'i', 'u', 9, 0,
  /* 1476 */ 's', 'l', 't', 'i', 'u', 9, 0,
  /* 1483 */ 's', 'l', 't', 'u', 9, 0,
  /* 1489 */ 'd', 'm', 'u', 'l', 't', 'u', 9, 0,
  /* 1497 */ 'l', 'w', 'u', 9, 0,
  /* 1502 */ 'd', 's', 'r', 'a', 'v', 9, 0,
  /* 1509 */ 'd', 's', 'l', 'l', 'v', 9, 0,
  /* 1516 */ 'd', 's', 'r', 'l', 'v', 9, 0,
  /* 1523 */ 'd', 'r', 'o', 't', 'r', 'v', 9, 0,
  /* 1531 */ 'c', 'v', 't', '.', 'd', '.', 'w', 9, 0,
  /* 1540 */ 'c', 'v', 't', '.', 's', '.', 'w', 9, 0,
  /* 1549 */ 'u', 'l', 'w', 9, 0,
  /* 1554 */ 'u', 's', 'w', 9, 0,
  /* 1559 */ 'b', 'g', 'e', 'z', 9, 0,
  /* 1565 */ 'b', 'l', 'e', 'z', 9, 0,
  /* 1571 */ 'd', 'c', 'l', 'z', 9, 0,
  /* 1577 */ 'b', 'g', 't', 'z', 9, 0,
  /* 1583 */ 'b', 'l', 't', 'z', 9, 0,
  /* 1589 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 1595 */ 'd', 'd', 'i', 'v', 'u', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 1609 */ 'd', 'd', 'i', 'v', 9, '$', 'z', 'e', 'r', 'o', ',', 32, 0,
  /* 1622 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1641 */ '!', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 1658 */ 's', 'y', 'n', 'c', 32, 0,
  /* 1664 */ 'd', 'i', 'n', 's', 32, 0,
  /* 1670 */ 'd', 'e', 'x', 't', 32, 0,
  /* 1676 */ 'c', '.', 0,
  /* 1679 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1686 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1696 */ '#', 32, 'M', 'O', 'V', 'C', 'C', 'R', 'T', 'o', 'C', 'C', 'R', 0,
  /* 1710 */ 'n', 'o', 'p', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, MOVCCRToCCR, NOP
    return;
    break;
  case 1:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printUnsignedImm(MI, 0, O); 
    return;
    break;
  case 3:
    // CTC1, DMTC1, MTC1, SC, SCD, SCD_P8, SC_P8
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // FCMP_D32, FCMP_D64, FCMP_S32
    printFCCOperand(MI, 2, O); 
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    O << ", "; 
    break;
  case 1:
    // B, BC1F, BC1T, CPRESTORE, J, JAL, JALR, JALR64, JR, JR64, MFHI, MFHI64...
    return;
    break;
  case 2:
    // CTC1, DMTC1, MTC1
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // FCMP_D32, FCMP_D64
    O << ".d\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // FCMP_S32
    O << ".s\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // SC, SCD, SCD_P8, SC_P8
    printMemOperand(MI, 2, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 23) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // DROTRV, DSLLV, DSRAV, DSRLV, LDXC1, LDXC164, LDXC164_P8, LUXC1, LUXC1_...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // DynAlloc, DynAlloc64, LEA_ADDiu, LEA_ADDiu64
    printMemOperandEA(MI, 1, O); 
    return;
    break;
  case 3:
    // LB, LB64, LB64_P8, LB_P8, LBu, LBu64, LBu64_P8, LBu_P8, LD, LDC1, LDC1...
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // LUi, LUi64
    printUnsignedImm(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 20) & 7) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_CMP_SWAP_I16, ATOMIC_...
    O << ", "; 
    break;
  case 1:
    // BGEZ, BGEZ64, BGEZAL, BGTZ, BGTZ64, BLEZ, BLEZ64, BLTZ, BLTZ64, BLTZAL...
    return;
    break;
  case 2:
    // DSLL64_32
    O << ", 32"; 
    return;
    break;
  case 3:
    // LDXC1, LDXC164, LDXC164_P8, LUXC1, LUXC1_P8, LWXC1, LWXC1_P8, SDXC1, S...
    O << '('; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 4:
    // MOVF_D32, MOVF_D64, MOVF_I, MOVF_I64, MOVF_S, MOVT_D32, MOVT_D64, MOVT...
    O << ", $fcc0"; 
    return;
    break;
  case 5:
    // SLL64_32, SLL64_64
    O << ", 0"; 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 18) & 3) {
  default:   // unreachable.
  case 0:
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SW...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // ANDi, DANDi, DEXT, DINS, EXT, INS, ORi, ORi64, XORi, XORi64
    printUnsignedImm(MI, 2, O); 
    break;
  case 2:
    // DROTRV, DSLLV, DSRAV, DSRLV, ROTRV, SLLV, SRAV, SRLV
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 17) & 1) {
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I16_P8, ATOMIC_CMP_SWAP_I32, ATOM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ADD, ADDi, ADDiu, ADDu, AND, AND64, ANDi, ATOMIC_LOAD_ADD_I16, ATOMIC_...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *MipsInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 152 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'F', '1', '0', 0,
  /* 4 */ 'F', '2', '0', 0,
  /* 8 */ 'F', '3', '0', 0,
  /* 12 */ 'F', '0', 0,
  /* 15 */ 'F', '1', '1', 0,
  /* 19 */ 'F', '2', '1', 0,
  /* 23 */ 'F', '3', '1', 0,
  /* 27 */ 'F', '1', 0,
  /* 30 */ 'F', '1', '2', 0,
  /* 34 */ 'F', '2', '2', 0,
  /* 38 */ 'F', '2', 0,
  /* 41 */ 'F', '1', '3', 0,
  /* 45 */ 'F', '2', '3', 0,
  /* 49 */ 'F', '3', 0,
  /* 52 */ 'F', '1', '4', 0,
  /* 56 */ 'F', '2', '4', 0,
  /* 60 */ 'F', '4', 0,
  /* 63 */ 'F', '1', '5', 0,
  /* 67 */ 'F', '2', '5', 0,
  /* 71 */ 'F', '5', 0,
  /* 74 */ 'F', '1', '6', 0,
  /* 78 */ 'F', '2', '6', 0,
  /* 82 */ 'F', '6', 0,
  /* 85 */ 'F', '1', '7', 0,
  /* 89 */ 'F', '2', '7', 0,
  /* 93 */ 'F', '7', 0,
  /* 96 */ 'F', '1', '8', 0,
  /* 100 */ 'F', '2', '8', 0,
  /* 104 */ 'F', '8', 0,
  /* 107 */ 'F', '1', '9', 0,
  /* 111 */ 'F', '2', '9', 0,
  /* 115 */ 'F', '9', 0,
  /* 118 */ 'R', 'A', 0,
  /* 121 */ 'Z', 'E', 'R', 'O', 0,
  /* 126 */ 'F', 'P', 0,
  /* 129 */ 'G', 'P', 0,
  /* 132 */ 'S', 'P', 0,
  /* 135 */ 'A', 'T', 0,
  /* 138 */ 'h', 'i', 0,
  /* 141 */ 'l', 'o', 0,
  };

  static const unsigned RegAsmOffset[] = {
    54, 54, 65, 65, 76, 76, 87, 87, 135, 135, 12, 12, 38, 27, 
    60, 38, 82, 49, 104, 60, 0, 71, 30, 82, 52, 93, 74, 104, 
    96, 115, 4, 0, 34, 15, 56, 30, 78, 41, 100, 52, 8, 63, 
    74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 
    8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 
    30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 
    78, 89, 100, 111, 8, 23, 24, 126, 126, 129, 129, 138, 138, 112, 
    112, 79, 79, 90, 90, 141, 141, 118, 118, 75, 75, 86, 86, 97, 
    97, 108, 108, 5, 5, 20, 20, 35, 35, 46, 46, 132, 132, 98, 
    98, 109, 109, 1, 1, 16, 16, 31, 31, 42, 42, 53, 53, 64, 
    64, 57, 57, 68, 68, 32, 32, 43, 43, 121, 121, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool MipsInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
