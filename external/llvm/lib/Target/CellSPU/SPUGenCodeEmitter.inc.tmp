//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Machine Code Emitter
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

uint64_t SPUCodeEmitter::getBinaryCodeForInstr(const MachineInstr &MI) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3388997632),	// ABSDB
    UINT64_C(46137344),	// ADDXr32
    UINT64_C(46137344),	// ADDXr64
    UINT64_C(46137344),	// ADDXv2i64
    UINT64_C(46137344),	// ADDXv4i32
    UINT64_C(0),	// ADJCALLSTACKDOWN
    UINT64_C(0),	// ADJCALLSTACKUP
    UINT64_C(3087007744),	// AHIr16
    UINT64_C(3087007744),	// AHIvec
    UINT64_C(318767104),	// AHr16
    UINT64_C(318767104),	// AHv8i16
    UINT64_C(939524096),	// AIf32
    UINT64_C(939524096),	// AIr32
    UINT64_C(939524096),	// AIv4f32
    UINT64_C(939524096),	// AIv4i32
    UINT64_C(1744830464),	// ANDBIr8
    UINT64_C(1744830464),	// ANDBIv16i8
    UINT64_C(2202009600),	// ANDCr128
    UINT64_C(2202009600),	// ANDCr16
    UINT64_C(2202009600),	// ANDCr32
    UINT64_C(2202009600),	// ANDCr64
    UINT64_C(2202009600),	// ANDCr8
    UINT64_C(2202009600),	// ANDCv16i8
    UINT64_C(2202009600),	// ANDCv16i8_conv
    UINT64_C(2202009600),	// ANDCv2i64
    UINT64_C(2202009600),	// ANDCv4i32
    UINT64_C(2202009600),	// ANDCv8i16
    UINT64_C(2818572288),	// ANDHIi8i16
    UINT64_C(2818572288),	// ANDHIr16
    UINT64_C(2818572288),	// ANDHIv8i16
    UINT64_C(671088640),	// ANDIi16i32
    UINT64_C(671088640),	// ANDIi8i32
    UINT64_C(671088640),	// ANDIr32
    UINT64_C(671088640),	// ANDIv4i32
    UINT64_C(2197815296),	// ANDfabs32
    UINT64_C(2197815296),	// ANDfabs64
    UINT64_C(2197815296),	// ANDfabsvec
    UINT64_C(2197815296),	// ANDi16i32
    UINT64_C(2197815296),	// ANDr128
    UINT64_C(2197815296),	// ANDr16
    UINT64_C(2197815296),	// ANDr32
    UINT64_C(2197815296),	// ANDr64
    UINT64_C(2197815296),	// ANDr8
    UINT64_C(2197815296),	// ANDv16i8
    UINT64_C(2197815296),	// ANDv2i64
    UINT64_C(2197815296),	// ANDv4i32
    UINT64_C(2197815296),	// ANDv8i16
    UINT64_C(3405774848),	// AVGB
    UINT64_C(50331648),	// Ar32
    UINT64_C(50331648),	// Av16i8
    UINT64_C(50331648),	// Av4i32
    UINT64_C(3267362816),	// BGXvec
    UINT64_C(1107296256),	// BGr32
    UINT64_C(1107296256),	// BGr64
    UINT64_C(1107296256),	// BGv2i64
    UINT64_C(1107296256),	// BGv4i32
    UINT64_C(360710144),	// BI
    UINT64_C(2508193792),	// BISL
    UINT64_C(3582722048),	// BISLED_00
    UINT64_C(3582197760),	// BISLED_0D
    UINT64_C(3582459904),	// BISLED_E0
    UINT64_C(3581935616),	// BISLED_ED
    UINT64_C(637534208),	// BR
    UINT64_C(805306368),	// BRA
    UINT64_C(1711276032),	// BRASL
    UINT64_C(1644167168),	// BRHNZr16
    UINT64_C(1644167168),	// BRHNZv8i16
    UINT64_C(570425344),	// BRHZr16
    UINT64_C(570425344),	// BRHZv8i16
    UINT64_C(1107296256),	// BRNZr32
    UINT64_C(1107296256),	// BRNZv4i32
    UINT64_C(1711276032),	// BRSL
    UINT64_C(33554432),	// BRZr32
    UINT64_C(33554432),	// BRZv4i32
    UINT64_C(2944401408),	// CBD
    UINT64_C(729808896),	// CBX
    UINT64_C(4018143232),	// CDD
    UINT64_C(4018143232),	// CDDf64
    UINT64_C(3951034368),	// CDX
    UINT64_C(3951034368),	// CDXf64
    UINT64_C(2113929216),	// CEQBIr8
    UINT64_C(2113929216),	// CEQBIv16i8
    UINT64_C(197132288),	// CEQBr8
    UINT64_C(197132288),	// CEQBv16i8
    UINT64_C(3187671040),	// CEQHIr16
    UINT64_C(3187671040),	// CEQHIv8i16
    UINT64_C(331350016),	// CEQHr16
    UINT64_C(331350016),	// CEQHv8i16
    UINT64_C(1040187392),	// CEQIr32
    UINT64_C(1040187392),	// CEQIv4i32
    UINT64_C(62914560),	// CEQr32
    UINT64_C(62914560),	// CEQv4i32
    UINT64_C(3682598912),	// CFSif32
    UINT64_C(3682598912),	// CFSiv4f32
    UINT64_C(3682598912),	// CFUif32
    UINT64_C(3682598912),	// CFUiv4f32
    UINT64_C(1912602624),	// CGTBIr8
    UINT64_C(1912602624),	// CGTBIv16i8
    UINT64_C(171966464),	// CGTBr8
    UINT64_C(171966464),	// CGTBv16i8
    UINT64_C(2986344448),	// CGTHIr16
    UINT64_C(2986344448),	// CGTHIv8i16
    UINT64_C(306184192),	// CGTHr16
    UINT64_C(306184192),	// CGTHv8i16
    UINT64_C(838860800),	// CGTIf32
    UINT64_C(838860800),	// CGTIr32
    UINT64_C(838860800),	// CGTIv4f32
    UINT64_C(838860800),	// CGTIv4i32
    UINT64_C(37748736),	// CGTr32
    UINT64_C(37748736),	// CGTv4i32
    UINT64_C(1124073472),	// CGr32
    UINT64_C(1124073472),	// CGr64
    UINT64_C(1124073472),	// CGv2i64
    UINT64_C(1124073472),	// CGv4i32
    UINT64_C(2944401408),	// CHD
    UINT64_C(2877292544),	// CHX
    UINT64_C(2046820352),	// CLGTBIr8
    UINT64_C(2046820352),	// CLGTBIv16i8
    UINT64_C(188743680),	// CLGTBr8
    UINT64_C(188743680),	// CLGTBv16i8
    UINT64_C(3120562176),	// CLGTHIr16
    UINT64_C(3120562176),	// CLGTHIv8i16
    UINT64_C(322961408),	// CLGTHr16
    UINT64_C(322961408),	// CLGTHv8i16
    UINT64_C(973078528),	// CLGTIr32
    UINT64_C(973078528),	// CLGTIv4i32
    UINT64_C(54525952),	// CLGTr32
    UINT64_C(54525952),	// CLGTv4i32
    UINT64_C(2772434944),	// CLZr32
    UINT64_C(2772434944),	// CLZv4i32
    UINT64_C(759169024),	// CNTBv16i8
    UINT64_C(759169024),	// CNTBv4i32
    UINT64_C(759169024),	// CNTBv8i16
    UINT64_C(1535115264),	// CSiFf32
    UINT64_C(1535115264),	// CSiFv4f32
    UINT64_C(3682598912),	// CUiFf32
    UINT64_C(3682598912),	// CUiFv4f32
    UINT64_C(1870659584),	// CWD
    UINT64_C(1870659584),	// CWDf32
    UINT64_C(1803550720),	// CWX
    UINT64_C(1803550720),	// CWXf32
    UINT64_C(50331648),	// CellSDKa
    UINT64_C(46137344),	// CellSDKaddx
    UINT64_C(318767104),	// CellSDKah
    UINT64_C(2550136832),	// CellSDKahi
    UINT64_C(939524096),	// CellSDKai
    UINT64_C(1124073472),	// CellSDKand
    UINT64_C(1744830464),	// CellSDKandbi
    UINT64_C(2202009600),	// CellSDKandc
    UINT64_C(2818572288),	// CellSDKandhi
    UINT64_C(671088640),	// CellSDKandi
    UINT64_C(1107296256),	// CellSDKbg
    UINT64_C(3267362816),	// CellSDKbgx
    UINT64_C(62914560),	// CellSDKceq
    UINT64_C(197132288),	// CellSDKceqb
    UINT64_C(2113929216),	// CellSDKceqbi
    UINT64_C(331350016),	// CellSDKceqh
    UINT64_C(3187671040),	// CellSDKceqhi
    UINT64_C(1040187392),	// CellSDKceqi
    UINT64_C(562036736),	// CellSDKcg
    UINT64_C(37748736),	// CellSDKcgt
    UINT64_C(171966464),	// CellSDKcgtb
    UINT64_C(1912602624),	// CellSDKcgtbi
    UINT64_C(331350016),	// CellSDKcgth
    UINT64_C(3187671040),	// CellSDKcgthi
    UINT64_C(838860800),	// CellSDKcgti
    UINT64_C(1119879168),	// CellSDKcgx
    UINT64_C(54525952),	// CellSDKclgt
    UINT64_C(188743680),	// CellSDKclgtb
    UINT64_C(2046820352),	// CellSDKclgtbi
    UINT64_C(322961408),	// CellSDKclgth
    UINT64_C(3120562176),	// CellSDKclgthi
    UINT64_C(973078528),	// CellSDKclgti
    UINT64_C(859832320),	// CellSDKdfa
    UINT64_C(1933574144),	// CellSDKdfm
    UINT64_C(985661440),	// CellSDKdfma
    UINT64_C(3133145088),	// CellSDKdfms
    UINT64_C(4206886912),	// CellSDKdfnma
    UINT64_C(2059403264),	// CellSDKdfnms
    UINT64_C(3007315968),	// CellSDKdfs
    UINT64_C(591396864),	// CellSDKfa
    UINT64_C(1136656384),	// CellSDKfceq
    UINT64_C(1128267776),	// CellSDKfcgt
    UINT64_C(1405091840),	// CellSDKfcmeq
    UINT64_C(1396703232),	// CellSDKfcmgt
    UINT64_C(1665138688),	// CellSDKfm
    UINT64_C(1879048192),	// CellSDKfma
    UINT64_C(4026531840),	// CellSDKfms
    UINT64_C(2952790016),	// CellSDKfnms
    UINT64_C(2738880512),	// CellSDKfs
    UINT64_C(599785472),	// CellSDKmpy
    UINT64_C(805306368),	// CellSDKmpya
    UINT64_C(2747269120),	// CellSDKmpyh
    UINT64_C(1673527296),	// CellSDKmpyhh
    UINT64_C(1656750080),	// CellSDKmpyhha
    UINT64_C(1925185536),	// CellSDKmpyhhau
    UINT64_C(1941962752),	// CellSDKmpyhhu
    UINT64_C(771751936),	// CellSDKmpyi
    UINT64_C(3821010944),	// CellSDKmpys
    UINT64_C(868220928),	// CellSDKmpyu
    UINT64_C(2919235584),	// CellSDKmpyui
    UINT64_C(2181038080),	// CellSDKnand
    UINT64_C(2181038080),	// CellSDKnor
    UINT64_C(2181038080),	// CellSDKor
    UINT64_C(1610612736),	// CellSDKorbi
    UINT64_C(2470445056),	// CellSDKorc
    UINT64_C(2684354560),	// CellSDKorhi
    UINT64_C(536870912),	// CellSDKori
    UINT64_C(33554432),	// CellSDKsf
    UINT64_C(301989888),	// CellSDKsfh
    UINT64_C(2952790016),	// CellSDKsfhi
    UINT64_C(805306368),	// CellSDKsfi
    UINT64_C(2193620992),	// CellSDKsfx
    UINT64_C(2181038080),	// CellSDKxor
    UINT64_C(1610612736),	// CellSDKxorbi
    UINT64_C(2684354560),	// CellSDKxorhi
    UINT64_C(536870912),	// CellSDKxori
    UINT64_C(2059403264),	// DFNMSf64
    UINT64_C(2059403264),	// DFNMSv2f64
    UINT64_C(2151677952),	// ENOP
    UINT64_C(2449473536),	// EQVr128
    UINT64_C(2449473536),	// EQVr128_1
    UINT64_C(2449473536),	// EQVr128_2
    UINT64_C(2449473536),	// EQVr128_3
    UINT64_C(2449473536),	// EQVr16
    UINT64_C(2449473536),	// EQVr16_1
    UINT64_C(2449473536),	// EQVr16_2
    UINT64_C(2449473536),	// EQVr16_3
    UINT64_C(2449473536),	// EQVr32
    UINT64_C(2449473536),	// EQVr32_1
    UINT64_C(2449473536),	// EQVr32_2
    UINT64_C(2449473536),	// EQVr32_3
    UINT64_C(2449473536),	// EQVr64
    UINT64_C(2449473536),	// EQVr64_1
    UINT64_C(2449473536),	// EQVr64_2
    UINT64_C(2449473536),	// EQVr64_3
    UINT64_C(2449473536),	// EQVr8
    UINT64_C(2449473536),	// EQVr8_1
    UINT64_C(2449473536),	// EQVr8_2
    UINT64_C(2449473536),	// EQVr8_3
    UINT64_C(2449473536),	// EQVv16i8
    UINT64_C(2449473536),	// EQVv16i8_1
    UINT64_C(2449473536),	// EQVv16i8_2
    UINT64_C(2449473536),	// EQVv16i8_3
    UINT64_C(2449473536),	// EQVv2i64
    UINT64_C(2449473536),	// EQVv2i64_1
    UINT64_C(2449473536),	// EQVv2i64_2
    UINT64_C(2449473536),	// EQVv2i64_3
    UINT64_C(2449473536),	// EQVv4i32
    UINT64_C(2449473536),	// EQVv4i32_1
    UINT64_C(2449473536),	// EQVv4i32_2
    UINT64_C(2449473536),	// EQVv4i32_3
    UINT64_C(2449473536),	// EQVv8i16
    UINT64_C(2449473536),	// EQVv8i16_1
    UINT64_C(2449473536),	// EQVv8i16_2
    UINT64_C(2449473536),	// EQVv8i16_3
    UINT64_C(1484783616),	// FAf32
    UINT64_C(859832320),	// FAf64
    UINT64_C(859832320),	// FAv2f64
    UINT64_C(1484783616),	// FAv4f32
    UINT64_C(1136656384),	// FCEQf32
    UINT64_C(1128267776),	// FCGTf32
    UINT64_C(1405091840),	// FCMEQf32
    UINT64_C(1396703232),	// FCMGTf32
    UINT64_C(499122176),	// FESDf32
    UINT64_C(499122176),	// FESDvec
    UINT64_C(734003200),	// FIf32
    UINT64_C(734003200),	// FIv4f32
    UINT64_C(1879048192),	// FMAf32
    UINT64_C(985661440),	// FMAf64
    UINT64_C(985661440),	// FMAv2f64
    UINT64_C(1879048192),	// FMAv4f32
    UINT64_C(1879048192),	// FMSf32
    UINT64_C(3133145088),	// FMSf64
    UINT64_C(3133145088),	// FMSv2f64
    UINT64_C(1879048192),	// FMSv4f32
    UINT64_C(1665138688),	// FMf32
    UINT64_C(1665138688),	// FMf64
    UINT64_C(591396864),	// FMv2f64
    UINT64_C(1665138688),	// FMv4f32
    UINT64_C(4206886912),	// FNMAf64
    UINT64_C(4206886912),	// FNMAv2f64
    UINT64_C(3489660928),	// FNMSf32
    UINT64_C(3489660928),	// FNMSv4f32
    UINT64_C(2646605824),	// FRDSf64
    UINT64_C(922746880),	// FRESTf32
    UINT64_C(922746880),	// FRESTv4f32
    UINT64_C(1572864000),	// FSCRRf32
    UINT64_C(1572864000),	// FSCRWf32
    UINT64_C(763363328),	// FSM64r16
    UINT64_C(763363328),	// FSM64r32
    UINT64_C(2785017856),	// FSMBIv16i8
    UINT64_C(2785017856),	// FSMBIv2i64
    UINT64_C(2785017856),	// FSMBIv4i32
    UINT64_C(2785017856),	// FSMBIv8i16
    UINT64_C(1837105152),	// FSMBv16i8
    UINT64_C(1837105152),	// FSMBv16i8_r16
    UINT64_C(2910846976),	// FSMHv8i16
    UINT64_C(2910846976),	// FSMHv8i16_r16
    UINT64_C(763363328),	// FSMr16
    UINT64_C(763363328),	// FSMr32
    UINT64_C(763363328),	// FSMv4i32
    UINT64_C(1484783616),	// FSf32
    UINT64_C(2738880512),	// FSf64
    UINT64_C(2738880512),	// FSv2f64
    UINT64_C(1484783616),	// FSv4f32
    UINT64_C(1300234240),	// GBBv16i8
    UINT64_C(1300234240),	// GBBv16i8_r16
    UINT64_C(1300234240),	// GBBv16i8_r32
    UINT64_C(2373976064),	// GBHv8i16
    UINT64_C(2373976064),	// GBHv8i16_r16
    UINT64_C(2373976064),	// GBHv8i16_r32
    UINT64_C(226492416),	// GBv4i32
    UINT64_C(226492416),	// GBv4i32_r16
    UINT64_C(226492416),	// GBv4i32_r32
    UINT64_C(301989888),	// HBRA
    UINT64_C(0),	// HBR_LABEL
    UINT64_C(4261412864),	// HEQIr32
    UINT64_C(465567744),	// HEQr32
    UINT64_C(4060086272),	// HGTIr32
    UINT64_C(440401920),	// HGTr32
    UINT64_C(4194304000),	// HLGTIr32
    UINT64_C(457179136),	// HLGTr32
    UINT64_C(2214592512),	// ILAf32
    UINT64_C(2214592512),	// ILAf64
    UINT64_C(2214592512),	// ILAhi
    UINT64_C(2214592512),	// ILAlo
    UINT64_C(2214592512),	// ILAlsa
    UINT64_C(2214592512),	// ILAr32
    UINT64_C(2214592512),	// ILAr64
    UINT64_C(2214592512),	// ILAv2i64
    UINT64_C(2214592512),	// ILAv4i32
    UINT64_C(1090519040),	// ILHUf32
    UINT64_C(1090519040),	// ILHUhi
    UINT64_C(1090519040),	// ILHUr32
    UINT64_C(1090519040),	// ILHUr64
    UINT64_C(1090519040),	// ILHUv2i64
    UINT64_C(1090519040),	// ILHUv4i32
    UINT64_C(3238002688),	// ILHr16
    UINT64_C(3238002688),	// ILHr8
    UINT64_C(3238002688),	// ILHv8i16
    UINT64_C(2164260864),	// ILf32
    UINT64_C(2164260864),	// ILf64
    UINT64_C(2164260864),	// ILr32
    UINT64_C(2164260864),	// ILr64
    UINT64_C(2164260864),	// ILv2i64
    UINT64_C(2164260864),	// ILv4i32
    UINT64_C(2197815296),	// IOHLf32
    UINT64_C(2197815296),	// IOHLlo
    UINT64_C(2197815296),	// IOHLr32
    UINT64_C(2197815296),	// IOHLv2i64
    UINT64_C(2197815296),	// IOHLv4i32
    UINT64_C(2147483648),	// LNOP
    UINT64_C(2248146944),	// LQAf32
    UINT64_C(2248146944),	// LQAf64
    UINT64_C(2248146944),	// LQAr128
    UINT64_C(2248146944),	// LQAr16
    UINT64_C(2248146944),	// LQAr32
    UINT64_C(2248146944),	// LQAr64
    UINT64_C(2248146944),	// LQAr8
    UINT64_C(2248146944),	// LQAv16i8
    UINT64_C(2248146944),	// LQAv2f64
    UINT64_C(2248146944),	// LQAv2i64
    UINT64_C(2248146944),	// LQAv4f32
    UINT64_C(2248146944),	// LQAv4i32
    UINT64_C(2248146944),	// LQAv8i16
    UINT64_C(738197504),	// LQDf32
    UINT64_C(738197504),	// LQDf64
    UINT64_C(738197504),	// LQDr128
    UINT64_C(738197504),	// LQDr16
    UINT64_C(738197504),	// LQDr32
    UINT64_C(738197504),	// LQDr64
    UINT64_C(738197504),	// LQDr8
    UINT64_C(738197504),	// LQDv16i8
    UINT64_C(738197504),	// LQDv2f64
    UINT64_C(738197504),	// LQDv2i64
    UINT64_C(738197504),	// LQDv4f32
    UINT64_C(738197504),	// LQDv4i32
    UINT64_C(738197504),	// LQDv8i16
    UINT64_C(595591168),	// LQXf32
    UINT64_C(595591168),	// LQXf64
    UINT64_C(595591168),	// LQXr128
    UINT64_C(595591168),	// LQXr16
    UINT64_C(595591168),	// LQXr32
    UINT64_C(595591168),	// LQXr64
    UINT64_C(595591168),	// LQXr8
    UINT64_C(595591168),	// LQXv16i8
    UINT64_C(595591168),	// LQXv2f64
    UINT64_C(595591168),	// LQXv2i64
    UINT64_C(595591168),	// LQXv4f32
    UINT64_C(595591168),	// LQXv4i32
    UINT64_C(595591168),	// LQXv8i16
    UINT64_C(2181038080),	// LRf32
    UINT64_C(2181038080),	// LRf64
    UINT64_C(2181038080),	// LRr128
    UINT64_C(2181038080),	// LRr16
    UINT64_C(2181038080),	// LRr32
    UINT64_C(2181038080),	// LRr64
    UINT64_C(2181038080),	// LRr8
    UINT64_C(2181038080),	// LRv16i8
    UINT64_C(2181038080),	// LRv2f64
    UINT64_C(2181038080),	// LRv2i64
    UINT64_C(2181038080),	// LRv4f32
    UINT64_C(2181038080),	// LRv4i32
    UINT64_C(2181038080),	// LRv8i16
    UINT64_C(805306368),	// MPYAr32
    UINT64_C(805306368),	// MPYAr32_sext
    UINT64_C(805306368),	// MPYAr32_sextinreg
    UINT64_C(805306368),	// MPYAv4i32
    UINT64_C(1925185536),	// MPYHHAUr32
    UINT64_C(1925185536),	// MPYHHAUvec
    UINT64_C(1656750080),	// MPYHHAr32
    UINT64_C(1656750080),	// MPYHHAvec
    UINT64_C(1941962752),	// MPYHHUr32
    UINT64_C(1941962752),	// MPYHHUv4i32
    UINT64_C(1673527296),	// MPYHHr32
    UINT64_C(1673527296),	// MPYHHv8i16
    UINT64_C(2747269120),	// MPYHr32
    UINT64_C(2747269120),	// MPYHv4i32
    UINT64_C(771751936),	// MPYIr16
    UINT64_C(771751936),	// MPYIvec
    UINT64_C(3821010944),	// MPYSr16
    UINT64_C(3821010944),	// MPYSv4i32
    UINT64_C(2919235584),	// MPYUIr16
    UINT64_C(2919235584),	// MPYUIvec
    UINT64_C(868220928),	// MPYUr16
    UINT64_C(868220928),	// MPYUr32
    UINT64_C(868220928),	// MPYUv4i32
    UINT64_C(599785472),	// MPYr16
    UINT64_C(599785472),	// MPYv8i16
    UINT64_C(2466250752),	// NANDr128
    UINT64_C(2466250752),	// NANDr16
    UINT64_C(2466250752),	// NANDr32
    UINT64_C(2466250752),	// NANDr64
    UINT64_C(2466250752),	// NANDr8
    UINT64_C(2466250752),	// NANDv16i8
    UINT64_C(2466250752),	// NANDv2i64
    UINT64_C(2466250752),	// NANDv4i32
    UINT64_C(2466250752),	// NANDv8i16
    UINT64_C(2449473536),	// NORr128
    UINT64_C(2449473536),	// NORr16
    UINT64_C(2449473536),	// NORr32
    UINT64_C(2449473536),	// NORr64
    UINT64_C(2449473536),	// NORr8
    UINT64_C(2449473536),	// NORv16i8
    UINT64_C(2449473536),	// NORv2i64
    UINT64_C(2449473536),	// NORv4i32
    UINT64_C(2449473536),	// NORv8i16
    UINT64_C(1610612736),	// ORBIr8
    UINT64_C(1610612736),	// ORBIv16i8
    UINT64_C(2449473536),	// ORCr128
    UINT64_C(2449473536),	// ORCr16
    UINT64_C(2449473536),	// ORCr32
    UINT64_C(2449473536),	// ORCr64
    UINT64_C(2449473536),	// ORCr8
    UINT64_C(2449473536),	// ORCv16i8
    UINT64_C(2449473536),	// ORCv2i64
    UINT64_C(2449473536),	// ORCv4i32
    UINT64_C(2449473536),	// ORCv8i16
    UINT64_C(2684354560),	// ORHIi8i16
    UINT64_C(2684354560),	// ORHIr16
    UINT64_C(2684354560),	// ORHIv8i16
    UINT64_C(536870912),	// ORIi16i32
    UINT64_C(536870912),	// ORIi8i32
    UINT64_C(536870912),	// ORIr32
    UINT64_C(536870912),	// ORIv4i32
    UINT64_C(2449473536),	// ORXv4i32
    UINT64_C(2181038080),	// ORf32
    UINT64_C(2181038080),	// ORf64
    UINT64_C(2181038080),	// ORr128
    UINT64_C(2181038080),	// ORr16
    UINT64_C(2181038080),	// ORr32
    UINT64_C(2181038080),	// ORr64
    UINT64_C(2181038080),	// ORr8
    UINT64_C(2181038080),	// ORv16i8
    UINT64_C(2181038080),	// ORv2f64
    UINT64_C(2181038080),	// ORv2i64
    UINT64_C(2181038080),	// ORv4f32
    UINT64_C(2181038080),	// ORv4i32
    UINT64_C(2181038080),	// ORv8i16
    UINT64_C(360710144),	// RET
    UINT64_C(1040187392),	// ROTHIr16
    UINT64_C(1040187392),	// ROTHIr16_r32
    UINT64_C(1040187392),	// ROTHIv8i16
    UINT64_C(3187671040),	// ROTHMIr16
    UINT64_C(3187671040),	// ROTHMIv8i16
    UINT64_C(3120562176),	// ROTHMr16
    UINT64_C(3120562176),	// ROTHMv8i16
    UINT64_C(973078528),	// ROTHr16
    UINT64_C(973078528),	// ROTHr16_r32
    UINT64_C(973078528),	// ROTHv8i16
    UINT64_C(503316480),	// ROTIr32
    UINT64_C(503316480),	// ROTIr32_i16
    UINT64_C(503316480),	// ROTIr32_i8
    UINT64_C(503316480),	// ROTIv4i32
    UINT64_C(503316480),	// ROTIv4i32_i16
    UINT64_C(503316480),	// ROTIv4i32_i8
    UINT64_C(2113929216),	// ROTMAHIr16
    UINT64_C(2113929216),	// ROTMAHIv8i16
    UINT64_C(2046820352),	// ROTMAHr16
    UINT64_C(2046820352),	// ROTMAHv8i16
    UINT64_C(1577058304),	// ROTMAIr32_i32
    UINT64_C(1577058304),	// ROTMAIr64_i32
    UINT64_C(1577058304),	// ROTMAIv2i64_i32
    UINT64_C(1577058304),	// ROTMAIv4i32_i32
    UINT64_C(1509949440),	// ROTMAr32
    UINT64_C(1509949440),	// ROTMAv4i32
    UINT64_C(2650800128),	// ROTMIr32
    UINT64_C(2650800128),	// ROTMIv4i32
    UINT64_C(2583691264),	// ROTMr32
    UINT64_C(2583691264),	// ROTMv4i32
    UINT64_C(528482304),	// ROTQBIIr128
    UINT64_C(528482304),	// ROTQBIIr64
    UINT64_C(528482304),	// ROTQBIIv16i8
    UINT64_C(528482304),	// ROTQBIIv2i64
    UINT64_C(528482304),	// ROTQBIIv4i32
    UINT64_C(528482304),	// ROTQBIIv8i16
    UINT64_C(461373440),	// ROTQBIr128
    UINT64_C(461373440),	// ROTQBIr64
    UINT64_C(461373440),	// ROTQBIv16i8
    UINT64_C(461373440),	// ROTQBIv2i64
    UINT64_C(461373440),	// ROTQBIv4i32
    UINT64_C(461373440),	// ROTQBIv8i16
    UINT64_C(864026624),	// ROTQBYBIv16i8_r32
    UINT64_C(864026624),	// ROTQBYBIv2i64_r32
    UINT64_C(864026624),	// ROTQBYBIv4i32_r32
    UINT64_C(864026624),	// ROTQBYBIv8i16_r32
    UINT64_C(1065353216),	// ROTQBYIi128
    UINT64_C(1065353216),	// ROTQBYIv16i8
    UINT64_C(1065353216),	// ROTQBYIv2i64
    UINT64_C(1065353216),	// ROTQBYIv4f32
    UINT64_C(1065353216),	// ROTQBYIv4i32
    UINT64_C(1065353216),	// ROTQBYIv8i16
    UINT64_C(1065353216),	// ROTQBYIvfi64
    UINT64_C(998244352),	// ROTQBYi128
    UINT64_C(998244352),	// ROTQBYv16i8
    UINT64_C(998244352),	// ROTQBYv2f64
    UINT64_C(998244352),	// ROTQBYv2i64
    UINT64_C(998244352),	// ROTQBYv4f32
    UINT64_C(998244352),	// ROTQBYv4i32
    UINT64_C(998244352),	// ROTQBYv8i16
    UINT64_C(2675965952),	// ROTQMBIIr128
    UINT64_C(2675965952),	// ROTQMBIIr64
    UINT64_C(2675965952),	// ROTQMBIIv16i8
    UINT64_C(2675965952),	// ROTQMBIIv2i64
    UINT64_C(2675965952),	// ROTQMBIIv4i32
    UINT64_C(2675965952),	// ROTQMBIIv8i16
    UINT64_C(2608857088),	// ROTQMBIr128
    UINT64_C(2608857088),	// ROTQMBIr64
    UINT64_C(2608857088),	// ROTQMBIv16i8
    UINT64_C(2608857088),	// ROTQMBIv2i64
    UINT64_C(2608857088),	// ROTQMBIv4i32
    UINT64_C(2608857088),	// ROTQMBIv8i16
    UINT64_C(3011510272),	// ROTQMBYBIr128
    UINT64_C(3011510272),	// ROTQMBYBIv16i8
    UINT64_C(3011510272),	// ROTQMBYBIv2i64
    UINT64_C(3011510272),	// ROTQMBYBIv4i32
    UINT64_C(3011510272),	// ROTQMBYBIv8i16
    UINT64_C(3212836864),	// ROTQMBYIr128
    UINT64_C(3212836864),	// ROTQMBYIr128_zext_r16
    UINT64_C(3212836864),	// ROTQMBYIr128_zext_r32
    UINT64_C(3212836864),	// ROTQMBYIr128_zext_r64
    UINT64_C(3212836864),	// ROTQMBYIr128_zext_r8
    UINT64_C(3212836864),	// ROTQMBYIr64
    UINT64_C(3212836864),	// ROTQMBYIv16i8
    UINT64_C(3212836864),	// ROTQMBYIv2i64
    UINT64_C(3212836864),	// ROTQMBYIv4i32
    UINT64_C(3212836864),	// ROTQMBYIv8i16
    UINT64_C(3145728000),	// ROTQMBYr128
    UINT64_C(3145728000),	// ROTQMBYr64
    UINT64_C(3145728000),	// ROTQMBYv16i8
    UINT64_C(3145728000),	// ROTQMBYv2i64
    UINT64_C(3145728000),	// ROTQMBYv4i32
    UINT64_C(3145728000),	// ROTQMBYv8i16
    UINT64_C(436207616),	// ROTr32
    UINT64_C(436207616),	// ROTr32_r16_anyext
    UINT64_C(436207616),	// ROTr32_r8_anyext
    UINT64_C(436207616),	// ROTv4i32
    UINT64_C(2147483648),	// SELBf32_cond
    UINT64_C(2147483648),	// SELBf64_cond
    UINT64_C(2147483648),	// SELBr128
    UINT64_C(2147483648),	// SELBr16
    UINT64_C(2147483648),	// SELBr16_cond
    UINT64_C(2147483648),	// SELBr32
    UINT64_C(2147483648),	// SELBr32_cond
    UINT64_C(2147483648),	// SELBr64
    UINT64_C(2147483648),	// SELBr64_cond
    UINT64_C(2147483648),	// SELBr8
    UINT64_C(2147483648),	// SELBr8_cond
    UINT64_C(2147483648),	// SELBv16i8
    UINT64_C(2147483648),	// SELBv16i8_cond
    UINT64_C(2147483648),	// SELBv16i8_vcond
    UINT64_C(2147483648),	// SELBv2i64
    UINT64_C(2147483648),	// SELBv2i64_cond
    UINT64_C(2147483648),	// SELBv2i64_vcond
    UINT64_C(2147483648),	// SELBv4f32_cond
    UINT64_C(2147483648),	// SELBv4i32
    UINT64_C(2147483648),	// SELBv4i32_cond
    UINT64_C(2147483648),	// SELBv4i32_vcond
    UINT64_C(2147483648),	// SELBv8i16
    UINT64_C(2147483648),	// SELBv8i16_cond
    UINT64_C(2147483648),	// SELBv8i16_vcond
    UINT64_C(2952790016),	// SFHIr16
    UINT64_C(2952790016),	// SFHIvec
    UINT64_C(301989888),	// SFHr16
    UINT64_C(301989888),	// SFHvec
    UINT64_C(805306368),	// SFIr32
    UINT64_C(805306368),	// SFIvec
    UINT64_C(2193620992),	// SFXr32
    UINT64_C(2193620992),	// SFXr64
    UINT64_C(2193620992),	// SFXv2i64
    UINT64_C(2193620992),	// SFXv4i32
    UINT64_C(33554432),	// SFr32
    UINT64_C(33554432),	// SFvec
    UINT64_C(4194304000),	// SHLHIr16
    UINT64_C(4194304000),	// SHLHIv8i16
    UINT64_C(4194304000),	// SHLHr16
    UINT64_C(4194304000),	// SHLHr16_r32
    UINT64_C(4194304000),	// SHLHv8i16
    UINT64_C(4194304000),	// SHLIr32
    UINT64_C(4194304000),	// SHLIv4i32
    UINT64_C(3749707776),	// SHLQBIIv16i8
    UINT64_C(3749707776),	// SHLQBIIv2f64
    UINT64_C(3749707776),	// SHLQBIIv2i64
    UINT64_C(3749707776),	// SHLQBIIv4f32
    UINT64_C(3749707776),	// SHLQBIIv4i32
    UINT64_C(3749707776),	// SHLQBIIv8i16
    UINT64_C(3682598912),	// SHLQBIr128
    UINT64_C(3682598912),	// SHLQBIv16i8
    UINT64_C(3682598912),	// SHLQBIv2f64
    UINT64_C(3682598912),	// SHLQBIv2i64
    UINT64_C(3682598912),	// SHLQBIv4f32
    UINT64_C(3682598912),	// SHLQBIv4i32
    UINT64_C(3682598912),	// SHLQBIv8i16
    UINT64_C(970981376),	// SHLQBYBIr128
    UINT64_C(970981376),	// SHLQBYBIv16i8
    UINT64_C(970981376),	// SHLQBYBIv2f64
    UINT64_C(970981376),	// SHLQBYBIv2i64
    UINT64_C(970981376),	// SHLQBYBIv4f32
    UINT64_C(970981376),	// SHLQBYBIv4i32
    UINT64_C(970981376),	// SHLQBYBIv8i16
    UINT64_C(4286578688),	// SHLQBYIr128
    UINT64_C(4286578688),	// SHLQBYIv16i8
    UINT64_C(4286578688),	// SHLQBYIv2f64
    UINT64_C(4286578688),	// SHLQBYIv2i64
    UINT64_C(4286578688),	// SHLQBYIv4f32
    UINT64_C(4286578688),	// SHLQBYIv4i32
    UINT64_C(4286578688),	// SHLQBYIv8i16
    UINT64_C(4219469824),	// SHLQBYr128
    UINT64_C(4219469824),	// SHLQBYv16i8
    UINT64_C(4219469824),	// SHLQBYv2f64
    UINT64_C(4219469824),	// SHLQBYv2i64
    UINT64_C(4219469824),	// SHLQBYv4f32
    UINT64_C(4219469824),	// SHLQBYv4i32
    UINT64_C(4219469824),	// SHLQBYv8i16
    UINT64_C(4194304000),	// SHLr32
    UINT64_C(4194304000),	// SHLv4i32
    UINT64_C(2147483648),	// SHUFBgprc
    UINT64_C(2147483648),	// SHUFBv16i8
    UINT64_C(2147483648),	// SHUFBv16i8_m32
    UINT64_C(2147483648),	// SHUFBv2f64
    UINT64_C(2147483648),	// SHUFBv2f64_m32
    UINT64_C(2147483648),	// SHUFBv2i64
    UINT64_C(2147483648),	// SHUFBv2i64_m32
    UINT64_C(2147483648),	// SHUFBv4f32
    UINT64_C(2147483648),	// SHUFBv4f32_m32
    UINT64_C(2147483648),	// SHUFBv4i32
    UINT64_C(2147483648),	// SHUFBv4i32_m32
    UINT64_C(2147483648),	// SHUFBv8i16
    UINT64_C(2147483648),	// SHUFBv8i16_m32
    UINT64_C(75497472),	// STQAf32
    UINT64_C(75497472),	// STQAf64
    UINT64_C(75497472),	// STQAr128
    UINT64_C(75497472),	// STQAr16
    UINT64_C(75497472),	// STQAr32
    UINT64_C(75497472),	// STQAr64
    UINT64_C(75497472),	// STQAr8
    UINT64_C(150994944),	// STQAv16i8
    UINT64_C(150994944),	// STQAv2f64
    UINT64_C(150994944),	// STQAv2i64
    UINT64_C(150994944),	// STQAv4f32
    UINT64_C(150994944),	// STQAv4i32
    UINT64_C(150994944),	// STQAv8i16
    UINT64_C(603979776),	// STQDf32
    UINT64_C(603979776),	// STQDf64
    UINT64_C(603979776),	// STQDr128
    UINT64_C(603979776),	// STQDr16
    UINT64_C(603979776),	// STQDr32
    UINT64_C(603979776),	// STQDr64
    UINT64_C(603979776),	// STQDr8
    UINT64_C(603979776),	// STQDv16i8
    UINT64_C(603979776),	// STQDv2f64
    UINT64_C(603979776),	// STQDv2i64
    UINT64_C(603979776),	// STQDv4f32
    UINT64_C(603979776),	// STQDv4i32
    UINT64_C(603979776),	// STQDv8i16
    UINT64_C(75497472),	// STQXf32
    UINT64_C(75497472),	// STQXf64
    UINT64_C(75497472),	// STQXr128
    UINT64_C(75497472),	// STQXr16
    UINT64_C(75497472),	// STQXr32
    UINT64_C(75497472),	// STQXr64
    UINT64_C(75497472),	// STQXr8
    UINT64_C(75497472),	// STQXv16i8
    UINT64_C(75497472),	// STQXv2f64
    UINT64_C(75497472),	// STQXv2i64
    UINT64_C(75497472),	// STQXv4f32
    UINT64_C(75497472),	// STQXv4i32
    UINT64_C(75497472),	// STQXv8i16
    UINT64_C(3393191936),	// SUMB
    UINT64_C(1610612736),	// XORBIr8
    UINT64_C(1610612736),	// XORBIv16i8
    UINT64_C(2684354560),	// XORHIr16
    UINT64_C(2684354560),	// XORHIv8i16
    UINT64_C(536870912),	// XORIr32
    UINT64_C(536870912),	// XORIv4i32
    UINT64_C(2449473536),	// XORfneg32
    UINT64_C(2449473536),	// XORfneg64
    UINT64_C(2449473536),	// XORfnegvec
    UINT64_C(2449473536),	// XORr128
    UINT64_C(2449473536),	// XORr16
    UINT64_C(2449473536),	// XORr32
    UINT64_C(2449473536),	// XORr64
    UINT64_C(2449473536),	// XORr8
    UINT64_C(2449473536),	// XORv16i8
    UINT64_C(2449473536),	// XORv2i64
    UINT64_C(2449473536),	// XORv4i32
    UINT64_C(2449473536),	// XORv8i16
    UINT64_C(1832910848),	// XSBHr16
    UINT64_C(1832910848),	// XSBHr32
    UINT64_C(1832910848),	// XSBHr64
    UINT64_C(1832910848),	// XSBHr8
    UINT64_C(1832910848),	// XSBHv16i8
    UINT64_C(1832910848),	// XSHWr16
    UINT64_C(1832910848),	// XSHWr32
    UINT64_C(1832910848),	// XSHWr64
    UINT64_C(1832910848),	// XSHWv4i32
    UINT64_C(1698693120),	// XSWDr64
    UINT64_C(1698693120),	// XSWDr64_inreg
    UINT64_C(1698693120),	// XSWDv2i64
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case SPU::ADJCALLSTACKDOWN:
    case SPU::ADJCALLSTACKUP:
    case SPU::ENOP:
    case SPU::HBR_LABEL:
    case SPU::LNOP:
    case SPU::RET: {
      break;
    }
    case SPU::LRf32:
    case SPU::LRf64:
    case SPU::LRr128:
    case SPU::LRr16:
    case SPU::LRr32:
    case SPU::LRr64:
    case SPU::LRr8:
    case SPU::LRv16i8:
    case SPU::LRv2f64:
    case SPU::LRv2i64:
    case SPU::LRv4f32:
    case SPU::LRv4i32:
    case SPU::LRv8i16: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 14;
      Value |= (op & UINT64_C(127)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::HEQr32:
    case SPU::HGTr32:
    case SPU::HLGTr32: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 7;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(127)) << 14;
      break;
    }
    case SPU::CellSDKfma:
    case SPU::CellSDKfms:
    case SPU::CellSDKfnms:
    case SPU::CellSDKmpya:
    case SPU::FMAf32:
    case SPU::FMAv4f32:
    case SPU::FMSf32:
    case SPU::FMSv4f32:
    case SPU::FNMSf32:
    case SPU::FNMSv4f32:
    case SPU::MPYAr32:
    case SPU::MPYAr32_sext:
    case SPU::MPYAr32_sextinreg:
    case SPU::MPYAv4i32:
    case SPU::SELBf32_cond:
    case SPU::SELBf64_cond:
    case SPU::SELBr128:
    case SPU::SELBr16:
    case SPU::SELBr16_cond:
    case SPU::SELBr32:
    case SPU::SELBr32_cond:
    case SPU::SELBr64:
    case SPU::SELBr64_cond:
    case SPU::SELBr8:
    case SPU::SELBr8_cond:
    case SPU::SELBv16i8:
    case SPU::SELBv16i8_cond:
    case SPU::SELBv16i8_vcond:
    case SPU::SELBv2i64:
    case SPU::SELBv2i64_cond:
    case SPU::SELBv2i64_vcond:
    case SPU::SELBv4f32_cond:
    case SPU::SELBv4i32:
    case SPU::SELBv4i32_cond:
    case SPU::SELBv4i32_vcond:
    case SPU::SELBv8i16:
    case SPU::SELBv8i16_cond:
    case SPU::SELBv8i16_vcond:
    case SPU::SHUFBgprc:
    case SPU::SHUFBv16i8:
    case SPU::SHUFBv16i8_m32:
    case SPU::SHUFBv2f64:
    case SPU::SHUFBv2f64_m32:
    case SPU::SHUFBv2i64:
    case SPU::SHUFBv2i64_m32:
    case SPU::SHUFBv4f32:
    case SPU::SHUFBv4f32_m32:
    case SPU::SHUFBv4i32:
    case SPU::SHUFBv4i32_m32:
    case SPU::SHUFBv8i16:
    case SPU::SHUFBv8i16_m32: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 7;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(127)) << 14;
      // op: RC
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(127);
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(3));
      Value |= (op & UINT64_C(127)) << 21;
      break;
    }
    case SPU::ABSDB:
    case SPU::ADDXr32:
    case SPU::ADDXr64:
    case SPU::ADDXv2i64:
    case SPU::ADDXv4i32:
    case SPU::AHr16:
    case SPU::AHv8i16:
    case SPU::ANDCr128:
    case SPU::ANDCr16:
    case SPU::ANDCr32:
    case SPU::ANDCr64:
    case SPU::ANDCr8:
    case SPU::ANDCv16i8:
    case SPU::ANDCv16i8_conv:
    case SPU::ANDCv2i64:
    case SPU::ANDCv4i32:
    case SPU::ANDCv8i16:
    case SPU::ANDfabs32:
    case SPU::ANDfabs64:
    case SPU::ANDfabsvec:
    case SPU::ANDi16i32:
    case SPU::ANDr128:
    case SPU::ANDr16:
    case SPU::ANDr32:
    case SPU::ANDr64:
    case SPU::ANDr8:
    case SPU::ANDv16i8:
    case SPU::ANDv2i64:
    case SPU::ANDv4i32:
    case SPU::ANDv8i16:
    case SPU::AVGB:
    case SPU::Ar32:
    case SPU::Av16i8:
    case SPU::Av4i32:
    case SPU::BGXvec:
    case SPU::BGr32:
    case SPU::BGr64:
    case SPU::BGv2i64:
    case SPU::BGv4i32:
    case SPU::CBX:
    case SPU::CDX:
    case SPU::CDXf64:
    case SPU::CEQBr8:
    case SPU::CEQBv16i8:
    case SPU::CEQHr16:
    case SPU::CEQHv8i16:
    case SPU::CEQr32:
    case SPU::CEQv4i32:
    case SPU::CGTBr8:
    case SPU::CGTBv16i8:
    case SPU::CGTHr16:
    case SPU::CGTHv8i16:
    case SPU::CGTr32:
    case SPU::CGTv4i32:
    case SPU::CGr32:
    case SPU::CGr64:
    case SPU::CGv2i64:
    case SPU::CGv4i32:
    case SPU::CHX:
    case SPU::CLGTBr8:
    case SPU::CLGTBv16i8:
    case SPU::CLGTHr16:
    case SPU::CLGTHv8i16:
    case SPU::CLGTr32:
    case SPU::CLGTv4i32:
    case SPU::CWX:
    case SPU::CWXf32:
    case SPU::CellSDKa:
    case SPU::CellSDKaddx:
    case SPU::CellSDKah:
    case SPU::CellSDKand:
    case SPU::CellSDKandc:
    case SPU::CellSDKbg:
    case SPU::CellSDKbgx:
    case SPU::CellSDKceq:
    case SPU::CellSDKceqb:
    case SPU::CellSDKceqh:
    case SPU::CellSDKcg:
    case SPU::CellSDKcgt:
    case SPU::CellSDKcgtb:
    case SPU::CellSDKcgth:
    case SPU::CellSDKcgx:
    case SPU::CellSDKclgt:
    case SPU::CellSDKclgtb:
    case SPU::CellSDKclgth:
    case SPU::CellSDKdfa:
    case SPU::CellSDKdfm:
    case SPU::CellSDKdfma:
    case SPU::CellSDKdfms:
    case SPU::CellSDKdfnma:
    case SPU::CellSDKdfnms:
    case SPU::CellSDKdfs:
    case SPU::CellSDKfa:
    case SPU::CellSDKfceq:
    case SPU::CellSDKfcgt:
    case SPU::CellSDKfcmeq:
    case SPU::CellSDKfcmgt:
    case SPU::CellSDKfm:
    case SPU::CellSDKfs:
    case SPU::CellSDKmpy:
    case SPU::CellSDKmpyh:
    case SPU::CellSDKmpyhh:
    case SPU::CellSDKmpyhha:
    case SPU::CellSDKmpyhhau:
    case SPU::CellSDKmpyhhu:
    case SPU::CellSDKmpys:
    case SPU::CellSDKmpyu:
    case SPU::CellSDKnand:
    case SPU::CellSDKnor:
    case SPU::CellSDKor:
    case SPU::CellSDKorc:
    case SPU::CellSDKsf:
    case SPU::CellSDKsfh:
    case SPU::CellSDKsfx:
    case SPU::CellSDKxor:
    case SPU::DFNMSf64:
    case SPU::DFNMSv2f64:
    case SPU::EQVr128:
    case SPU::EQVr128_1:
    case SPU::EQVr128_2:
    case SPU::EQVr128_3:
    case SPU::EQVr16:
    case SPU::EQVr16_1:
    case SPU::EQVr16_2:
    case SPU::EQVr16_3:
    case SPU::EQVr32:
    case SPU::EQVr32_1:
    case SPU::EQVr32_2:
    case SPU::EQVr32_3:
    case SPU::EQVr64:
    case SPU::EQVr64_1:
    case SPU::EQVr64_2:
    case SPU::EQVr64_3:
    case SPU::EQVr8:
    case SPU::EQVr8_1:
    case SPU::EQVr8_2:
    case SPU::EQVr8_3:
    case SPU::EQVv16i8:
    case SPU::EQVv16i8_1:
    case SPU::EQVv16i8_2:
    case SPU::EQVv16i8_3:
    case SPU::EQVv2i64:
    case SPU::EQVv2i64_1:
    case SPU::EQVv2i64_2:
    case SPU::EQVv2i64_3:
    case SPU::EQVv4i32:
    case SPU::EQVv4i32_1:
    case SPU::EQVv4i32_2:
    case SPU::EQVv4i32_3:
    case SPU::EQVv8i16:
    case SPU::EQVv8i16_1:
    case SPU::EQVv8i16_2:
    case SPU::EQVv8i16_3:
    case SPU::FAf32:
    case SPU::FAf64:
    case SPU::FAv2f64:
    case SPU::FAv4f32:
    case SPU::FCEQf32:
    case SPU::FCGTf32:
    case SPU::FCMEQf32:
    case SPU::FCMGTf32:
    case SPU::FIf32:
    case SPU::FIv4f32:
    case SPU::FMAf64:
    case SPU::FMAv2f64:
    case SPU::FMSf64:
    case SPU::FMSv2f64:
    case SPU::FMf32:
    case SPU::FMf64:
    case SPU::FMv2f64:
    case SPU::FMv4f32:
    case SPU::FNMAf64:
    case SPU::FNMAv2f64:
    case SPU::FSf32:
    case SPU::FSf64:
    case SPU::FSv2f64:
    case SPU::FSv4f32:
    case SPU::LQXf32:
    case SPU::LQXf64:
    case SPU::LQXr128:
    case SPU::LQXr16:
    case SPU::LQXr32:
    case SPU::LQXr64:
    case SPU::LQXr8:
    case SPU::LQXv16i8:
    case SPU::LQXv2f64:
    case SPU::LQXv2i64:
    case SPU::LQXv4f32:
    case SPU::LQXv4i32:
    case SPU::LQXv8i16:
    case SPU::MPYHHAUr32:
    case SPU::MPYHHAUvec:
    case SPU::MPYHHAr32:
    case SPU::MPYHHAvec:
    case SPU::MPYHHUr32:
    case SPU::MPYHHUv4i32:
    case SPU::MPYHHr32:
    case SPU::MPYHHv8i16:
    case SPU::MPYHr32:
    case SPU::MPYHv4i32:
    case SPU::MPYSr16:
    case SPU::MPYSv4i32:
    case SPU::MPYUr16:
    case SPU::MPYUr32:
    case SPU::MPYUv4i32:
    case SPU::MPYr16:
    case SPU::MPYv8i16:
    case SPU::NANDr128:
    case SPU::NANDr16:
    case SPU::NANDr32:
    case SPU::NANDr64:
    case SPU::NANDr8:
    case SPU::NANDv16i8:
    case SPU::NANDv2i64:
    case SPU::NANDv4i32:
    case SPU::NANDv8i16:
    case SPU::NORr128:
    case SPU::NORr16:
    case SPU::NORr32:
    case SPU::NORr64:
    case SPU::NORr8:
    case SPU::NORv16i8:
    case SPU::NORv2i64:
    case SPU::NORv4i32:
    case SPU::NORv8i16:
    case SPU::ORCr128:
    case SPU::ORCr16:
    case SPU::ORCr32:
    case SPU::ORCr64:
    case SPU::ORCr8:
    case SPU::ORCv16i8:
    case SPU::ORCv2i64:
    case SPU::ORCv4i32:
    case SPU::ORCv8i16:
    case SPU::ORXv4i32:
    case SPU::ORf32:
    case SPU::ORf64:
    case SPU::ORr128:
    case SPU::ORr16:
    case SPU::ORr32:
    case SPU::ORr64:
    case SPU::ORr8:
    case SPU::ORv16i8:
    case SPU::ORv2f64:
    case SPU::ORv2i64:
    case SPU::ORv4f32:
    case SPU::ORv4i32:
    case SPU::ORv8i16:
    case SPU::ROTHMr16:
    case SPU::ROTHMv8i16:
    case SPU::ROTHr16:
    case SPU::ROTHr16_r32:
    case SPU::ROTHv8i16:
    case SPU::ROTMAHIr16:
    case SPU::ROTMAHIv8i16:
    case SPU::ROTMAHr16:
    case SPU::ROTMAHv8i16:
    case SPU::ROTMAIr32_i32:
    case SPU::ROTMAIr64_i32:
    case SPU::ROTMAIv2i64_i32:
    case SPU::ROTMAIv4i32_i32:
    case SPU::ROTMAr32:
    case SPU::ROTMAv4i32:
    case SPU::ROTMr32:
    case SPU::ROTMv4i32:
    case SPU::ROTQBIr128:
    case SPU::ROTQBIr64:
    case SPU::ROTQBIv16i8:
    case SPU::ROTQBIv2i64:
    case SPU::ROTQBIv4i32:
    case SPU::ROTQBIv8i16:
    case SPU::ROTQBYi128:
    case SPU::ROTQBYv16i8:
    case SPU::ROTQBYv2f64:
    case SPU::ROTQBYv2i64:
    case SPU::ROTQBYv4f32:
    case SPU::ROTQBYv4i32:
    case SPU::ROTQBYv8i16:
    case SPU::ROTQMBIr128:
    case SPU::ROTQMBIr64:
    case SPU::ROTQMBIv16i8:
    case SPU::ROTQMBIv2i64:
    case SPU::ROTQMBIv4i32:
    case SPU::ROTQMBIv8i16:
    case SPU::ROTQMBYBIr128:
    case SPU::ROTQMBYBIv16i8:
    case SPU::ROTQMBYBIv2i64:
    case SPU::ROTQMBYBIv4i32:
    case SPU::ROTQMBYBIv8i16:
    case SPU::ROTQMBYr128:
    case SPU::ROTQMBYr64:
    case SPU::ROTQMBYv16i8:
    case SPU::ROTQMBYv2i64:
    case SPU::ROTQMBYv4i32:
    case SPU::ROTQMBYv8i16:
    case SPU::ROTr32:
    case SPU::ROTr32_r16_anyext:
    case SPU::ROTr32_r8_anyext:
    case SPU::ROTv4i32:
    case SPU::SFHr16:
    case SPU::SFHvec:
    case SPU::SFXr32:
    case SPU::SFXr64:
    case SPU::SFXv2i64:
    case SPU::SFXv4i32:
    case SPU::SFr32:
    case SPU::SFvec:
    case SPU::SHLHr16:
    case SPU::SHLHr16_r32:
    case SPU::SHLHv8i16:
    case SPU::SHLQBIr128:
    case SPU::SHLQBIv16i8:
    case SPU::SHLQBIv2f64:
    case SPU::SHLQBIv2i64:
    case SPU::SHLQBIv4f32:
    case SPU::SHLQBIv4i32:
    case SPU::SHLQBIv8i16:
    case SPU::SHLQBYBIr128:
    case SPU::SHLQBYBIv16i8:
    case SPU::SHLQBYBIv2f64:
    case SPU::SHLQBYBIv2i64:
    case SPU::SHLQBYBIv4f32:
    case SPU::SHLQBYBIv4i32:
    case SPU::SHLQBYBIv8i16:
    case SPU::SHLr32:
    case SPU::SHLv4i32:
    case SPU::STQXf32:
    case SPU::STQXf64:
    case SPU::STQXr128:
    case SPU::STQXr16:
    case SPU::STQXr32:
    case SPU::STQXr64:
    case SPU::STQXr8:
    case SPU::STQXv16i8:
    case SPU::STQXv2f64:
    case SPU::STQXv2i64:
    case SPU::STQXv4f32:
    case SPU::STQXv4i32:
    case SPU::STQXv8i16:
    case SPU::SUMB:
    case SPU::XORfneg32:
    case SPU::XORfneg64:
    case SPU::XORfnegvec:
    case SPU::XORr128:
    case SPU::XORr16:
    case SPU::XORr32:
    case SPU::XORr64:
    case SPU::XORr8:
    case SPU::XORv16i8:
    case SPU::XORv2i64:
    case SPU::XORv4i32:
    case SPU::XORv8i16: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 7;
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(127)) << 14;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::CFSif32:
    case SPU::CFSiv4f32:
    case SPU::CFUif32:
    case SPU::CFUiv4f32:
    case SPU::CLZr32:
    case SPU::CLZv4i32:
    case SPU::CNTBv16i8:
    case SPU::CNTBv4i32:
    case SPU::CNTBv8i16:
    case SPU::CSiFf32:
    case SPU::CSiFv4f32:
    case SPU::CUiFf32:
    case SPU::CUiFv4f32:
    case SPU::FESDf32:
    case SPU::FESDvec:
    case SPU::FRDSf64:
    case SPU::FRESTf32:
    case SPU::FRESTv4f32:
    case SPU::FSCRWf32:
    case SPU::FSM64r16:
    case SPU::FSM64r32:
    case SPU::FSMBv16i8:
    case SPU::FSMBv16i8_r16:
    case SPU::FSMHv8i16:
    case SPU::FSMHv8i16_r16:
    case SPU::FSMr16:
    case SPU::FSMr32:
    case SPU::FSMv4i32:
    case SPU::GBBv16i8:
    case SPU::GBBv16i8_r16:
    case SPU::GBBv16i8_r32:
    case SPU::GBHv8i16:
    case SPU::GBHv8i16_r16:
    case SPU::GBHv8i16_r32:
    case SPU::GBv4i32:
    case SPU::GBv4i32_r16:
    case SPU::GBv4i32_r32:
    case SPU::XSBHr16:
    case SPU::XSBHr32:
    case SPU::XSBHr64:
    case SPU::XSBHr8:
    case SPU::XSBHv16i8:
    case SPU::XSHWr16:
    case SPU::XSHWr32:
    case SPU::XSHWr64:
    case SPU::XSHWv4i32:
    case SPU::XSWDr64:
    case SPU::XSWDr64_inreg:
    case SPU::XSWDv2i64: {
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::BI:
    case SPU::BISL: {
      // op: RB
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 14;
      break;
    }
    case SPU::FSCRRf32: {
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::BISLED_00:
    case SPU::BISLED_0D:
    case SPU::BISLED_E0:
    case SPU::BISLED_ED: {
      // op: Rcalldest
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 7;
      break;
    }
    case SPU::HEQIr32:
    case SPU::HGTIr32:
    case SPU::HLGTIr32: {
      // op: i10
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(1023)) << 14;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(127)) << 7;
      break;
    }
    case SPU::AHIr16:
    case SPU::AHIvec:
    case SPU::AIf32:
    case SPU::AIr32:
    case SPU::AIv4f32:
    case SPU::AIv4i32:
    case SPU::ANDBIr8:
    case SPU::ANDBIv16i8:
    case SPU::ANDHIi8i16:
    case SPU::ANDHIr16:
    case SPU::ANDHIv8i16:
    case SPU::ANDIi16i32:
    case SPU::ANDIi8i32:
    case SPU::ANDIr32:
    case SPU::ANDIv4i32:
    case SPU::CEQBIr8:
    case SPU::CEQBIv16i8:
    case SPU::CEQHIr16:
    case SPU::CEQHIv8i16:
    case SPU::CEQIr32:
    case SPU::CEQIv4i32:
    case SPU::CGTBIr8:
    case SPU::CGTBIv16i8:
    case SPU::CGTHIr16:
    case SPU::CGTHIv8i16:
    case SPU::CGTIf32:
    case SPU::CGTIr32:
    case SPU::CGTIv4f32:
    case SPU::CGTIv4i32:
    case SPU::CLGTBIr8:
    case SPU::CLGTBIv16i8:
    case SPU::CLGTHIr16:
    case SPU::CLGTHIv8i16:
    case SPU::CLGTIr32:
    case SPU::CLGTIv4i32:
    case SPU::CellSDKahi:
    case SPU::CellSDKai:
    case SPU::CellSDKandbi:
    case SPU::CellSDKandhi:
    case SPU::CellSDKandi:
    case SPU::CellSDKceqbi:
    case SPU::CellSDKceqhi:
    case SPU::CellSDKceqi:
    case SPU::CellSDKcgtbi:
    case SPU::CellSDKcgthi:
    case SPU::CellSDKcgti:
    case SPU::CellSDKclgtbi:
    case SPU::CellSDKclgthi:
    case SPU::CellSDKclgti:
    case SPU::CellSDKmpyi:
    case SPU::CellSDKmpyui:
    case SPU::CellSDKorbi:
    case SPU::CellSDKorhi:
    case SPU::CellSDKori:
    case SPU::CellSDKsfhi:
    case SPU::CellSDKsfi:
    case SPU::CellSDKxorbi:
    case SPU::CellSDKxorhi:
    case SPU::CellSDKxori:
    case SPU::LQDf32:
    case SPU::LQDf64:
    case SPU::LQDr128:
    case SPU::LQDr16:
    case SPU::LQDr32:
    case SPU::LQDr64:
    case SPU::LQDr8:
    case SPU::LQDv16i8:
    case SPU::LQDv2f64:
    case SPU::LQDv2i64:
    case SPU::LQDv4f32:
    case SPU::LQDv4i32:
    case SPU::LQDv8i16:
    case SPU::MPYIr16:
    case SPU::MPYIvec:
    case SPU::MPYUIr16:
    case SPU::MPYUIvec:
    case SPU::ORBIr8:
    case SPU::ORBIv16i8:
    case SPU::ORHIi8i16:
    case SPU::ORHIr16:
    case SPU::ORHIv8i16:
    case SPU::ORIi16i32:
    case SPU::ORIi8i32:
    case SPU::ORIr32:
    case SPU::ORIv4i32:
    case SPU::SFHIr16:
    case SPU::SFHIvec:
    case SPU::SFIr32:
    case SPU::SFIvec:
    case SPU::STQDf32:
    case SPU::STQDf64:
    case SPU::STQDr128:
    case SPU::STQDr16:
    case SPU::STQDr32:
    case SPU::STQDr64:
    case SPU::STQDr8:
    case SPU::STQDv16i8:
    case SPU::STQDv2f64:
    case SPU::STQDv2i64:
    case SPU::STQDv4f32:
    case SPU::STQDv4i32:
    case SPU::STQDv8i16:
    case SPU::XORBIr8:
    case SPU::XORBIv16i8:
    case SPU::XORHIr16:
    case SPU::XORHIv8i16:
    case SPU::XORIr32:
    case SPU::XORIv4i32: {
      // op: i10
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(1023)) << 14;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(127)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::BR:
    case SPU::BRA:
    case SPU::BRASL:
    case SPU::BRSL: {
      // op: i16
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(65535)) << 7;
      break;
    }
    case SPU::HBRA: {
      // op: i16
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(65535)) << 7;
      // op: RO
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(384)) << 16;
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::BRHNZr16:
    case SPU::BRHNZv8i16:
    case SPU::BRHZr16:
    case SPU::BRHZv8i16:
    case SPU::BRNZr32:
    case SPU::BRNZv4i32:
    case SPU::BRZr32:
    case SPU::BRZv4i32:
    case SPU::FSMBIv16i8:
    case SPU::FSMBIv2i64:
    case SPU::FSMBIv4i32:
    case SPU::FSMBIv8i16:
    case SPU::ILHUf32:
    case SPU::ILHUhi:
    case SPU::ILHUr32:
    case SPU::ILHUr64:
    case SPU::ILHUv2i64:
    case SPU::ILHUv4i32:
    case SPU::ILHr16:
    case SPU::ILHr8:
    case SPU::ILHv8i16:
    case SPU::ILf32:
    case SPU::ILf64:
    case SPU::ILr32:
    case SPU::ILr64:
    case SPU::ILv2i64:
    case SPU::ILv4i32:
    case SPU::LQAf32:
    case SPU::LQAf64:
    case SPU::LQAr128:
    case SPU::LQAr16:
    case SPU::LQAr32:
    case SPU::LQAr64:
    case SPU::LQAr8:
    case SPU::LQAv16i8:
    case SPU::LQAv2f64:
    case SPU::LQAv2i64:
    case SPU::LQAv4f32:
    case SPU::LQAv4i32:
    case SPU::LQAv8i16:
    case SPU::STQAf32:
    case SPU::STQAf64:
    case SPU::STQAr128:
    case SPU::STQAr16:
    case SPU::STQAr32:
    case SPU::STQAr64:
    case SPU::STQAr8:
    case SPU::STQAv16i8:
    case SPU::STQAv2f64:
    case SPU::STQAv2i64:
    case SPU::STQAv4f32:
    case SPU::STQAv4i32:
    case SPU::STQAv8i16: {
      // op: i16
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(65535)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::IOHLf32:
    case SPU::IOHLlo:
    case SPU::IOHLr32:
    case SPU::IOHLv2i64:
    case SPU::IOHLv4i32: {
      // op: i16
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(65535)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::ILAf32:
    case SPU::ILAf64:
    case SPU::ILAhi:
    case SPU::ILAlo:
    case SPU::ILAlsa:
    case SPU::ILAr32:
    case SPU::ILAr64:
    case SPU::ILAv2i64:
    case SPU::ILAv4i32: {
      // op: i18
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(262143)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= op & UINT64_C(127);
      break;
    }
    case SPU::CBD:
    case SPU::CDD:
    case SPU::CDDf64:
    case SPU::CHD:
    case SPU::CWD:
    case SPU::CWDf32:
    case SPU::ROTHIr16:
    case SPU::ROTHIr16_r32:
    case SPU::ROTHIv8i16:
    case SPU::ROTHMIr16:
    case SPU::ROTHMIv8i16:
    case SPU::ROTIr32:
    case SPU::ROTIr32_i16:
    case SPU::ROTIr32_i8:
    case SPU::ROTIv4i32:
    case SPU::ROTIv4i32_i16:
    case SPU::ROTIv4i32_i8:
    case SPU::ROTMIr32:
    case SPU::ROTMIv4i32:
    case SPU::ROTQBIIr128:
    case SPU::ROTQBIIr64:
    case SPU::ROTQBIIv16i8:
    case SPU::ROTQBIIv2i64:
    case SPU::ROTQBIIv4i32:
    case SPU::ROTQBIIv8i16:
    case SPU::ROTQBYBIv16i8_r32:
    case SPU::ROTQBYBIv2i64_r32:
    case SPU::ROTQBYBIv4i32_r32:
    case SPU::ROTQBYBIv8i16_r32:
    case SPU::ROTQBYIi128:
    case SPU::ROTQBYIv16i8:
    case SPU::ROTQBYIv2i64:
    case SPU::ROTQBYIv4f32:
    case SPU::ROTQBYIv4i32:
    case SPU::ROTQBYIv8i16:
    case SPU::ROTQBYIvfi64:
    case SPU::ROTQMBIIr128:
    case SPU::ROTQMBIIr64:
    case SPU::ROTQMBIIv16i8:
    case SPU::ROTQMBIIv2i64:
    case SPU::ROTQMBIIv4i32:
    case SPU::ROTQMBIIv8i16:
    case SPU::ROTQMBYIr128:
    case SPU::ROTQMBYIr128_zext_r16:
    case SPU::ROTQMBYIr128_zext_r32:
    case SPU::ROTQMBYIr128_zext_r64:
    case SPU::ROTQMBYIr128_zext_r8:
    case SPU::ROTQMBYIr64:
    case SPU::ROTQMBYIv16i8:
    case SPU::ROTQMBYIv2i64:
    case SPU::ROTQMBYIv4i32:
    case SPU::ROTQMBYIv8i16:
    case SPU::SHLHIr16:
    case SPU::SHLHIv8i16:
    case SPU::SHLIr32:
    case SPU::SHLIv4i32:
    case SPU::SHLQBIIv16i8:
    case SPU::SHLQBIIv2f64:
    case SPU::SHLQBIIv2i64:
    case SPU::SHLQBIIv4f32:
    case SPU::SHLQBIIv4i32:
    case SPU::SHLQBIIv8i16:
    case SPU::SHLQBYIr128:
    case SPU::SHLQBYIv16i8:
    case SPU::SHLQBYIv2f64:
    case SPU::SHLQBYIv2i64:
    case SPU::SHLQBYIv4f32:
    case SPU::SHLQBYIv4i32:
    case SPU::SHLQBYIv8i16:
    case SPU::SHLQBYr128:
    case SPU::SHLQBYv16i8:
    case SPU::SHLQBYv2f64:
    case SPU::SHLQBYv2i64:
    case SPU::SHLQBYv4f32:
    case SPU::SHLQBYv4i32:
    case SPU::SHLQBYv8i16: {
      // op: i7
      op = getMachineOpValue(MI, MI.getOperand(0));
      Value |= (op & UINT64_C(127)) << 14;
      // op: RA
      op = getMachineOpValue(MI, MI.getOperand(1));
      Value |= (op & UINT64_C(127)) << 7;
      // op: RT
      op = getMachineOpValue(MI, MI.getOperand(2));
      Value |= op & UINT64_C(127);
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

