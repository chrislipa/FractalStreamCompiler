//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void SPUAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1415U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1408U,	// BUNDLE
    536870979U,	// ABSDB
    536871756U,	// ADDXr32
    536871756U,	// ADDXr64
    536871756U,	// ADDXv2i64
    536871756U,	// ADDXv4i32
    1140850693U,	// ADJCALLSTACKDOWN
    1207959557U,	// ADJCALLSTACKUP
    537002395U,	// AHIr16
    537002395U,	// AHIvec
    536871126U,	// AHr16
    536871126U,	// AHv8i16
    537002277U,	// AIf32
    537002277U,	// AIr32
    537002277U,	// AIv4f32
    537002277U,	// AIv4i32
    537133353U,	// ANDBIr8
    537133353U,	// ANDBIv16i8
    536871042U,	// ANDCr128
    536871042U,	// ANDCr16
    536871042U,	// ANDCr32
    536871042U,	// ANDCr64
    536871042U,	// ANDCr8
    536871042U,	// ANDCv16i8
    536871042U,	// ANDCv16i8_conv
    536871042U,	// ANDCv2i64
    536871042U,	// ANDCv4i32
    536871042U,	// ANDCv8i16
    537133472U,	// ANDHIi8i16
    537133472U,	// ANDHIr16
    537002400U,	// ANDHIv8i16
    537002380U,	// ANDIi16i32
    537002380U,	// ANDIi8i32
    537002380U,	// ANDIr32
    537002380U,	// ANDIv4i32
    536871069U,	// ANDfabs32
    536871069U,	// ANDfabs64
    536871069U,	// ANDfabsvec
    536871069U,	// ANDi16i32
    536871069U,	// ANDr128
    536871069U,	// ANDr16
    536871069U,	// ANDr32
    536871069U,	// ANDr64
    536871069U,	// ANDr8
    536871069U,	// ANDv16i8
    536871069U,	// ANDv2i64
    536871069U,	// ANDv4i32
    536871069U,	// ANDv8i16
    536870993U,	// AVGB
    536870915U,	// Ar32
    536870915U,	// Av16i8
    536870915U,	// Av4i32
    536871767U,	// BGXvec
    536871114U,	// BGr32
    536871114U,	// BGr64
    536871114U,	// BGv2i64
    536871114U,	// BGv4i32
    738197804U,	// BI
    738198754U,	// BISL
    1610613961U,	// BISLED_00
    1610613961U,	// BISLED_0D
    1610613961U,	// BISLED_E0
    1610613961U,	// BISLED_ED
    2147484316U,	// BR
    2147483699U,	// BRA
    1610613974U,	// BRASL
    805307295U,	// BRHNZr16
    805307295U,	// BRHNZv8i16
    805307284U,	// BRHZr16
    805307284U,	// BRHZv8i16
    805307302U,	// BRNZr32
    805307302U,	// BRNZv4i32
    2147484909U,	// BRSL
    805307308U,	// BRZr32
    805307308U,	// BRZv4i32
    541065357U,	// CBD
    545260354U,	// CBX
    541065362U,	// CDD
    541065362U,	// CDDf64
    545260359U,	// CDX
    545260359U,	// CDXf64
    537002304U,	// CEQBIr8
    537002304U,	// CEQBIv16i8
    536871017U,	// CEQBr8
    536871017U,	// CEQBv16i8
    537002420U,	// CEQHIr16
    537002420U,	// CEQHIv8i16
    536871170U,	// CEQHr16
    536871170U,	// CEQHv8i16
    537002505U,	// CEQIr32
    537002505U,	// CEQIv4i32
    536871563U,	// CEQr32
    536871563U,	// CEQv4i32
    537920206U,	// CFSif32
    537920206U,	// CFSiv4f32
    537920298U,	// CFUif32
    537920298U,	// CFUiv4f32
    537002334U,	// CGTBIr8
    537002334U,	// CGTBIv16i8
    536871023U,	// CGTBr8
    536871023U,	// CGTBv16i8
    537002434U,	// CGTHIr16
    537002434U,	// CGTHIv8i16
    536871176U,	// CGTHr16
    536871176U,	// CGTHv8i16
    537002523U,	// CGTIf32
    537002523U,	// CGTIr32
    537002523U,	// CGTIv4f32
    537002523U,	// CGTIv4i32
    536871644U,	// CGTr32
    536871644U,	// CGTv4i32
    536871118U,	// CGr32
    536871118U,	// CGr64
    536871118U,	// CGv2i64
    536871118U,	// CGv4i32
    541065367U,	// CHD
    545260380U,	// CHX
    537002341U,	// CLGTBIr8
    537002341U,	// CLGTBIv16i8
    536871029U,	// CLGTBr8
    536871029U,	// CLGTBv16i8
    537002441U,	// CLGTHIr16
    537002441U,	// CLGTHIv8i16
    536871182U,	// CLGTHr16
    536871182U,	// CLGTHv8i16
    537002535U,	// CLGTIr32
    537002535U,	// CLGTIv4i32
    536871654U,	// CLGTr32
    536871654U,	// CLGTv4i32
    538968986U,	// CLZr32
    538968986U,	// CLZv4i32
    538968188U,	// CNTBv16i8
    538968188U,	// CNTBv4i32
    538968188U,	// CNTBv8i16
    537920249U,	// CSiFf32
    537920249U,	// CSiFv4f32
    537920256U,	// CUiFf32
    537920256U,	// CUiFv4f32
    541065403U,	// CWD
    541065403U,	// CWDf32
    545260401U,	// CWX
    545260401U,	// CWXf32
    536872189U,	// CellSDKa
    536872294U,	// CellSDKaddx
    536872210U,	// CellSDKah
    549848369U,	// CellSDKahi
    549848360U,	// CellSDKai
    536871915U,	// CellSDKand
    537134087U,	// CellSDKandbi
    536871907U,	// CellSDKandc
    537003063U,	// CellSDKandhi
    537003056U,	// CellSDKandi
    536872202U,	// CellSDKbg
    536872305U,	// CellSDKbgx
    536872068U,	// CellSDKceq
    536871878U,	// CellSDKceqb
    537134095U,	// CellSDKceqbi
    536871921U,	// CellSDKceqh
    537003071U,	// CellSDKceqhi
    537003104U,	// CellSDKceqi
    536872206U,	// CellSDKcg
    536872116U,	// CellSDKcgt
    536871885U,	// CellSDKcgtb
    537134111U,	// CellSDKcgtbi
    536871928U,	// CellSDKcgth
    537003087U,	// CellSDKcgthi
    537003118U,	// CellSDKcgti
    536872310U,	// CellSDKcgx
    536872122U,	// CellSDKclgt
    536871892U,	// CellSDKclgtb
    537134119U,	// CellSDKclgtbi
    536871935U,	// CellSDKclgth
    537003095U,	// CellSDKclgthi
    537003125U,	// CellSDKclgti
    536871857U,	// CellSDKdfa
    536872061U,	// CellSDKdfm
    536871863U,	// CellSDKdfma
    536872100U,	// CellSDKdfms
    536871870U,	// CellSDKdfnma
    536872107U,	// CellSDKdfnms
    536872094U,	// CellSDKdfs
    536871858U,	// CellSDKfa
    536872067U,	// CellSDKfceq
    536872115U,	// CellSDKfcgt
    536872074U,	// CellSDKfcmeq
    536872129U,	// CellSDKfcmgt
    536872062U,	// CellSDKfm
    536937400U,	// CellSDKfma
    536937637U,	// CellSDKfms
    536937644U,	// CellSDKfnms
    536872095U,	// CellSDKfs
    536872315U,	// CellSDKmpy
    536937728U,	// CellSDKmpya
    536872226U,	// CellSDKmpyh
    536872219U,	// CellSDKmpyhh
    536872184U,	// CellSDKmpyhha
    536872271U,	// CellSDKmpyhhau
    536872280U,	// CellSDKmpyhhu
    537003331U,	// CellSDKmpyi
    536872265U,	// CellSDKmpys
    536872288U,	// CellSDKmpyu
    537003324U,	// CellSDKmpyui
    536871914U,	// CellSDKnand
    536872082U,	// CellSDKnor
    536872083U,	// CellSDKor
    537134104U,	// CellSDKorbi
    536871900U,	// CellSDKorc
    537003080U,	// CellSDKorhi
    537003112U,	// CellSDKori
    536872198U,	// CellSDKsf
    536872214U,	// CellSDKsfh
    549848374U,	// CellSDKsfhi
    549848364U,	// CellSDKsfi
    536872300U,	// CellSDKsfx
    536872088U,	// CellSDKxor
    537134103U,	// CellSDKxorbi
    537003079U,	// CellSDKxorhi
    537003111U,	// CellSDKxori
    536871623U,	// DFNMSf64
    536871623U,	// DFNMSv2f64
    1426U,	// ENOP
    536871735U,	// EQVr128
    536871735U,	// EQVr128_1
    536871735U,	// EQVr128_2
    536871735U,	// EQVr128_3
    536871735U,	// EQVr16
    536871735U,	// EQVr16_1
    536871735U,	// EQVr16_2
    536871735U,	// EQVr16_3
    536871735U,	// EQVr32
    536871735U,	// EQVr32_1
    536871735U,	// EQVr32_2
    536871735U,	// EQVr32_3
    536871735U,	// EQVr64
    536871735U,	// EQVr64_1
    536871735U,	// EQVr64_2
    536871735U,	// EQVr64_3
    536871735U,	// EQVr8
    536871735U,	// EQVr8_1
    536871735U,	// EQVr8_2
    536871735U,	// EQVr8_3
    536871735U,	// EQVv16i8
    536871735U,	// EQVv16i8_1
    536871735U,	// EQVv16i8_2
    536871735U,	// EQVv16i8_3
    536871735U,	// EQVv2i64
    536871735U,	// EQVv2i64_1
    536871735U,	// EQVv2i64_2
    536871735U,	// EQVv2i64_3
    536871735U,	// EQVv4i32
    536871735U,	// EQVv4i32_1
    536871735U,	// EQVv4i32_2
    536871735U,	// EQVv4i32_3
    536871735U,	// EQVv8i16
    536871735U,	// EQVv8i16_1
    536871735U,	// EQVv8i16_2
    536871735U,	// EQVv8i16_3
    536870914U,	// FAf32
    536870913U,	// FAf64
    536870913U,	// FAv2f64
    536870914U,	// FAv4f32
    536871562U,	// FCEQf32
    536871643U,	// FCGTf32
    536871573U,	// FCMEQf32
    536871666U,	// FCMGTf32
    538968245U,	// FESDf32
    538968245U,	// FESDvec
    536871315U,	// FIf32
    536871315U,	// FIv4f32
    536936468U,	// FMAf32
    536870931U,	// FMAf64
    536870931U,	// FMAv2f64
    536936468U,	// FMAv4f32
    536937154U,	// FMSf32
    536871617U,	// FMSf64
    536871617U,	// FMSv2f64
    536937154U,	// FMSv4f32
    536871540U,	// FMf32
    536871539U,	// FMf64
    536871539U,	// FMv2f64
    536871540U,	// FMv4f32
    536870937U,	// FNMAf64
    536870937U,	// FNMAv2f64
    536937160U,	// FNMSf32
    536937160U,	// FNMSv4f32
    538968758U,	// FRDSf64
    538968844U,	// FRESTf32
    538968844U,	// FRESTv4f32
    738197677U,	// FSCRRf32
    2684355246U,	// FSCRWf32
    538968703U,	// FSM64r16
    538968703U,	// FSM64r32
    553648441U,	// FSMBIv16i8
    553648441U,	// FSMBIv2i64
    553648441U,	// FSMBIv4i32
    553648441U,	// FSMBIv8i16
    538968157U,	// FSMBv16i8
    538968157U,	// FSMBv16i8_r16
    538968316U,	// FSMHv8i16
    538968316U,	// FSMHv8i16_r16
    538968703U,	// FSMr16
    538968703U,	// FSMr32
    538968703U,	// FSMv4i32
    536871613U,	// FSf32
    536871612U,	// FSf64
    536871612U,	// FSv2f64
    536871613U,	// FSv4f32
    538968126U,	// GBBv16i8
    538968126U,	// GBBv16i8_r16
    538968126U,	// GBBv16i8_r32
    538968282U,	// GBHv8i16
    538968282U,	// GBHv8i16_r16
    538968282U,	// GBHv8i16_r32
    538968147U,	// GBv4i32
    538968147U,	// GBv4i32_r16
    538968147U,	// GBv4i32_r32
    3242197042U,	// HBRA
    3556769797U,	// HBR_LABEL
    562037263U,	// HEQIr32
    538968720U,	// HEQr32
    562037281U,	// HGTIr32
    538968801U,	// HGTr32
    562037294U,	// HLGTIr32
    538968812U,	// HLGTr32
    566231054U,	// ILAf32
    566231054U,	// ILAf64
    570425358U,	// ILAhi
    574619662U,	// ILAlo
    578813966U,	// ILAlsa
    566231054U,	// ILAr32
    566231054U,	// ILAr64
    566231054U,	// ILAv2i64
    566231054U,	// ILAv4i32
    553648932U,	// ILHUf32
    570426148U,	// ILHUhi
    553648932U,	// ILHUr32
    553648932U,	// ILHUr64
    553648932U,	// ILHUv2i64
    553648932U,	// ILHUv4i32
    583008503U,	// ILHr16
    583008503U,	// ILHr8
    583008503U,	// ILHv8i16
    583008879U,	// ILf32
    583008879U,	// ILf64
    583008879U,	// ILr32
    583008879U,	// ILr64
    583008879U,	// ILv2i64
    583008879U,	// ILv4i32
    551551588U,	// IOHLf32
    587203172U,	// IOHLlo
    551551588U,	// IOHLr32
    591397476U,	// IOHLv2i64
    591397476U,	// IOHLv4i32
    1425U,	// LNOP
    595591207U,	// LQAf32
    595591207U,	// LQAf64
    595591207U,	// LQAr128
    595591207U,	// LQAr16
    595591207U,	// LQAr32
    595591207U,	// LQAr64
    595591207U,	// LQAr8
    595591207U,	// LQAv16i8
    595591207U,	// LQAv2f64
    595591207U,	// LQAv2i64
    595591207U,	// LQAv4f32
    595591207U,	// LQAv4i32
    595591207U,	// LQAv8i16
    599785634U,	// LQDf32
    599785634U,	// LQDf64
    599785634U,	// LQDr128
    599785634U,	// LQDr16
    599785634U,	// LQDr32
    599785634U,	// LQDr64
    599785634U,	// LQDr8
    599785634U,	// LQDv16i8
    599785634U,	// LQDv2f64
    599785634U,	// LQDv2i64
    599785634U,	// LQDv4f32
    599785634U,	// LQDv4i32
    599785634U,	// LQDv8i16
    545260385U,	// LQXf32
    545260385U,	// LQXf64
    545260385U,	// LQXr128
    545260385U,	// LQXr16
    545260385U,	// LQXr32
    545260385U,	// LQXr64
    545260385U,	// LQXr8
    545260385U,	// LQXv16i8
    545260385U,	// LQXv2f64
    545260385U,	// LQXv2i64
    545260385U,	// LQXv4f32
    545260385U,	// LQXv4i32
    545260385U,	// LQXv8i16
    538968736U,	// LRf32
    538968736U,	// LRf64
    538968736U,	// LRr128
    538968736U,	// LRr16
    538968736U,	// LRr32
    538968736U,	// LRr64
    538968736U,	// LRr8
    538968736U,	// LRv16i8
    538968736U,	// LRv2f64
    538968736U,	// LRv2i64
    538968736U,	// LRv4f32
    538968736U,	// LRv4i32
    538968736U,	// LRv8i16
    536936504U,	// MPYAr32
    536936504U,	// MPYAr32_sext
    536936504U,	// MPYAr32_sextinreg
    536936504U,	// MPYAv4i32
    536871699U,	// MPYHHAUr32
    536871699U,	// MPYHHAUvec
    536870918U,	// MPYHHAr32
    536870918U,	// MPYHHAvec
    536871708U,	// MPYHHUr32
    536871708U,	// MPYHHUv4i32
    536871146U,	// MPYHHr32
    536871146U,	// MPYHHv8i16
    536871195U,	// MPYHr32
    536871195U,	// MPYHv4i32
    537002590U,	// MPYIr16
    537002590U,	// MPYIvec
    536871637U,	// MPYSr16
    536871637U,	// MPYSv4i32
    537002555U,	// MPYUIr16
    537002555U,	// MPYUIvec
    536871729U,	// MPYUr16
    536871729U,	// MPYUr32
    536871729U,	// MPYUv4i32
    536871823U,	// MPYr16
    536871823U,	// MPYv8i16
    536871068U,	// NANDr128
    536871068U,	// NANDr16
    536871068U,	// NANDr32
    536871068U,	// NANDr64
    536871068U,	// NANDr8
    536871068U,	// NANDv16i8
    536871068U,	// NANDv2i64
    536871068U,	// NANDv4i32
    536871068U,	// NANDv8i16
    536871588U,	// NORr128
    536871588U,	// NORr16
    536871588U,	// NORr32
    536871588U,	// NORr64
    536871588U,	// NORr8
    536871588U,	// NORv16i8
    536871588U,	// NORv2i64
    536871588U,	// NORv4i32
    536871588U,	// NORv8i16
    537133400U,	// ORBIr8
    537133400U,	// ORBIv16i8
    536871048U,	// ORCr128
    536871048U,	// ORCr16
    536871048U,	// ORCr32
    536871048U,	// ORCr64
    536871048U,	// ORCr8
    536871048U,	// ORCv16i8
    536871048U,	// ORCv2i64
    536871048U,	// ORCv4i32
    536871048U,	// ORCv8i16
    537002428U,	// ORHIi8i16
    537133500U,	// ORHIr16
    537133500U,	// ORHIv8i16
    537002518U,	// ORIi16i32
    537002518U,	// ORIi8i32
    537002518U,	// ORIr32
    537133590U,	// ORIv4i32
    536871788U,	// ORXv4i32
    536871589U,	// ORf32
    536871589U,	// ORf64
    536871589U,	// ORr128
    536871589U,	// ORr16
    536871589U,	// ORr32
    536871589U,	// ORr64
    536871589U,	// ORr8
    536871589U,	// ORv16i8
    536871589U,	// ORv2f64
    536871589U,	// ORv2i64
    536871589U,	// ORv4f32
    536871589U,	// ORv4i32
    536871589U,	// ORv8i16
    1430U,	// RET
    537395665U,	// ROTHIr16
    537395665U,	// ROTHIr16_r32
    537395665U,	// ROTHIv8i16
    537526778U,	// ROTHMIr16
    537526778U,	// ROTHMIv8i16
    536871544U,	// ROTHMr16
    536871544U,	// ROTHMv8i16
    536871189U,	// ROTHr16
    536871189U,	// ROTHr16_r32
    536871189U,	// ROTHv8i16
    537395765U,	// ROTIr32
    537395765U,	// ROTIr32_i16
    537395765U,	// ROTIr32_i8
    537395765U,	// ROTIv4i32
    537395765U,	// ROTIv4i32_i16
    537395765U,	// ROTIv4i32_i8
    537526679U,	// ROTMAHIr16
    537526679U,	// ROTMAHIv8i16
    536871122U,	// ROTMAHr16
    536871122U,	// ROTMAHv8i16
    537657633U,	// ROTMAIr32_i32
    537657633U,	// ROTMAIr64_i32
    537657633U,	// ROTMAIv2i64_i32
    537657633U,	// ROTMAIv4i32_i32
    536870944U,	// ROTMAr32
    536870944U,	// ROTMAv4i32
    537657858U,	// ROTMIr32
    537657858U,	// ROTMIv4i32
    536871556U,	// ROTMr32
    536871556U,	// ROTMv4i32
    537395691U,	// ROTQBIIr128
    537395691U,	// ROTQBIIr64
    537395691U,	// ROTQBIIv16i8
    537395691U,	// ROTQBIIv2i64
    537395691U,	// ROTQBIIv4i32
    537395691U,	// ROTQBIIv8i16
    536871247U,	// ROTQBIr128
    536871247U,	// ROTQBIr64
    536871247U,	// ROTQBIv16i8
    536871247U,	// ROTQBIv2i64
    536871247U,	// ROTQBIv4i32
    536871247U,	// ROTQBIv8i16
    536871298U,	// ROTQBYBIv16i8_r32
    536871298U,	// ROTQBYBIv2i64_r32
    536871298U,	// ROTQBYBIv4i32_r32
    536871298U,	// ROTQBYBIv8i16_r32
    537395797U,	// ROTQBYIi128
    537395797U,	// ROTQBYIv16i8
    537395797U,	// ROTQBYIv2i64
    537395797U,	// ROTQBYIv4f32
    537395797U,	// ROTQBYIv4i32
    537395797U,	// ROTQBYIv8i16
    537395797U,	// ROTQBYIvfi64
    536871815U,	// ROTQBYi128
    536871815U,	// ROTQBYv16i8
    536871815U,	// ROTQBYv2f64
    536871815U,	// ROTQBYv2i64
    536871815U,	// ROTQBYv4f32
    536871815U,	// ROTQBYv4i32
    536871815U,	// ROTQBYv8i16
    537657816U,	// ROTQMBIIr128
    537657816U,	// ROTQMBIIr64
    537657816U,	// ROTQMBIIv16i8
    537657816U,	// ROTQMBIIv2i64
    537657816U,	// ROTQMBIIv4i32
    537657816U,	// ROTQMBIIv8i16
    536871216U,	// ROTQMBIr128
    536871216U,	// ROTQMBIr64
    536871216U,	// ROTQMBIv16i8
    536871216U,	// ROTQMBIv2i64
    536871216U,	// ROTQMBIv4i32
    536871216U,	// ROTQMBIv8i16
    536871277U,	// ROTQMBYBIr128
    536871277U,	// ROTQMBYBIv16i8
    536871277U,	// ROTQMBYBIv2i64
    536871277U,	// ROTQMBYBIv4i32
    536871277U,	// ROTQMBYBIv8i16
    537657922U,	// ROTQMBYIr128
    537657922U,	// ROTQMBYIr128_zext_r16
    537657922U,	// ROTQMBYIr128_zext_r32
    537657922U,	// ROTQMBYIr128_zext_r64
    537657922U,	// ROTQMBYIr128_zext_r8
    537657922U,	// ROTQMBYIr64
    537657922U,	// ROTQMBYIv16i8
    537657922U,	// ROTQMBYIv2i64
    537657922U,	// ROTQMBYIv4i32
    537657922U,	// ROTQMBYIv8i16
    536871798U,	// ROTQMBYr128
    536871798U,	// ROTQMBYr64
    536871798U,	// ROTQMBYv16i8
    536871798U,	// ROTQMBYv2i64
    536871798U,	// ROTQMBYv4i32
    536871798U,	// ROTQMBYv8i16
    536871687U,	// ROTr32
    536871687U,	// ROTr32_r16_anyext
    536871687U,	// ROTr32_r8_anyext
    536871687U,	// ROTv4i32
    536936535U,	// SELBf32_cond
    536936535U,	// SELBf64_cond
    536936535U,	// SELBr128
    536936535U,	// SELBr16
    536936535U,	// SELBr16_cond
    536936535U,	// SELBr32
    536936535U,	// SELBr32_cond
    536936535U,	// SELBr64
    536936535U,	// SELBr64_cond
    536936535U,	// SELBr8
    536936535U,	// SELBr8_cond
    536936535U,	// SELBv16i8
    536936535U,	// SELBv16i8_cond
    536936535U,	// SELBv16i8_vcond
    536936535U,	// SELBv2i64
    536936535U,	// SELBv2i64_cond
    536936535U,	// SELBv2i64_vcond
    536936535U,	// SELBv4f32_cond
    536936535U,	// SELBv4i32
    536936535U,	// SELBv4i32_cond
    536936535U,	// SELBv4i32_vcond
    536936535U,	// SELBv8i16
    536936535U,	// SELBv8i16_cond
    536936535U,	// SELBv8i16_vcond
    537002407U,	// SFHIr16
    537002407U,	// SFHIvec
    536871141U,	// SFHr16
    536871141U,	// SFHvec
    537002386U,	// SFIr32
    537002386U,	// SFIvec
    536871762U,	// SFXr32
    536871762U,	// SFXr64
    536871762U,	// SFXv2i64
    536871762U,	// SFXv4i32
    536871110U,	// SFr32
    536871110U,	// SFvec
    537395629U,	// SHLHIr16
    537395629U,	// SHLHIv8i16
    536871153U,	// SHLHr16
    536871153U,	// SHLHr16_r32
    536871153U,	// SHLHv8i16
    537395700U,	// SHLIr32
    537395700U,	// SHLIv4i32
    537395682U,	// SHLQBIIv16i8
    537395682U,	// SHLQBIIv2f64
    537395682U,	// SHLQBIIv2i64
    537395682U,	// SHLQBIIv4f32
    537395682U,	// SHLQBIIv4i32
    537395682U,	// SHLQBIIv8i16
    536871239U,	// SHLQBIr128
    536871239U,	// SHLQBIv16i8
    536871239U,	// SHLQBIv2f64
    536871239U,	// SHLQBIv2i64
    536871239U,	// SHLQBIv4f32
    536871239U,	// SHLQBIv4i32
    536871239U,	// SHLQBIv8i16
    536871288U,	// SHLQBYBIr128
    536871288U,	// SHLQBYBIv16i8
    536871288U,	// SHLQBYBIv2f64
    536871288U,	// SHLQBYBIv2i64
    536871288U,	// SHLQBYBIv4f32
    536871288U,	// SHLQBYBIv4i32
    536871288U,	// SHLQBYBIv8i16
    537395788U,	// SHLQBYIr128
    537395788U,	// SHLQBYIv16i8
    537395788U,	// SHLQBYIv2f64
    537395788U,	// SHLQBYIv2i64
    537395788U,	// SHLQBYIv4f32
    537395788U,	// SHLQBYIv4i32
    537395788U,	// SHLQBYIv8i16
    536871807U,	// SHLQBYr128
    536871807U,	// SHLQBYv16i8
    536871807U,	// SHLQBYv2f64
    536871807U,	// SHLQBYv2i64
    536871807U,	// SHLQBYv4f32
    536871807U,	// SHLQBYv4i32
    536871807U,	// SHLQBYv8i16
    536871530U,	// SHLr32
    536871530U,	// SHLv4i32
    536936522U,	// SHUFBgprc
    536936522U,	// SHUFBv16i8
    536936522U,	// SHUFBv16i8_m32
    536936522U,	// SHUFBv2f64
    536936522U,	// SHUFBv2f64_m32
    536936522U,	// SHUFBv2i64
    536936522U,	// SHUFBv2i64_m32
    536936522U,	// SHUFBv4f32
    536936522U,	// SHUFBv4f32_m32
    536936522U,	// SHUFBv4i32
    536936522U,	// SHUFBv4i32_m32
    536936522U,	// SHUFBv8i16
    536936522U,	// SHUFBv8i16_m32
    595591212U,	// STQAf32
    595591212U,	// STQAf64
    595591212U,	// STQAr128
    595591212U,	// STQAr16
    595591212U,	// STQAr32
    595591212U,	// STQAr64
    595591212U,	// STQAr8
    595591212U,	// STQAv16i8
    595591212U,	// STQAv2f64
    595591212U,	// STQAv2i64
    595591212U,	// STQAv4f32
    595591212U,	// STQAv4i32
    595591212U,	// STQAv8i16
    599785639U,	// STQDf32
    599785639U,	// STQDf64
    599785639U,	// STQDr128
    599785639U,	// STQDr16
    599785639U,	// STQDr32
    599785639U,	// STQDr64
    599785639U,	// STQDr8
    599785639U,	// STQDv16i8
    599785639U,	// STQDv2f64
    599785639U,	// STQDv2i64
    599785639U,	// STQDv4f32
    599785639U,	// STQDv4i32
    599785639U,	// STQDv8i16
    545260390U,	// STQXf32
    545260390U,	// STQXf64
    545260390U,	// STQXr128
    545260390U,	// STQXr16
    545260390U,	// STQXr32
    545260390U,	// STQXr64
    545260390U,	// STQXr8
    545260390U,	// STQXv16i8
    545260390U,	// STQXv2f64
    545260390U,	// STQXv2i64
    545260390U,	// STQXv4f32
    545260390U,	// STQXv4i32
    545260390U,	// STQXv8i16
    536871011U,	// SUMB
    537133399U,	// XORBIr8
    537133399U,	// XORBIv16i8
    537002427U,	// XORHIr16
    537133499U,	// XORHIv8i16
    537002517U,	// XORIr32
    537002517U,	// XORIv4i32
    536871593U,	// XORfneg32
    536871593U,	// XORfneg64
    536871593U,	// XORfnegvec
    536871593U,	// XORr128
    536871593U,	// XORr16
    536871593U,	// XORr32
    536871593U,	// XORr64
    536871593U,	// XORr8
    536871593U,	// XORv16i8
    536871593U,	// XORv2i64
    536871593U,	// XORv4i32
    536871593U,	// XORv8i16
    538968287U,	// XSBHr16
    538968287U,	// XSBHr32
    538968287U,	// XSBHr64
    538968287U,	// XSBHr8
    538968287U,	// XSBHv16i8
    538968892U,	// XSHWr16
    538968892U,	// XSHWr32
    538968892U,	// XSHWr64
    538968892U,	// XSHWv4i32
    538968256U,	// XSWDr64
    538968256U,	// XSWDr64_inreg
    538968256U,	// XSWDv2i64
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'd', 'f', 'a', 9, 0,
  /* 5 */ 'm', 'p', 'y', 'h', 'h', 'a', 9, 0,
  /* 13 */ 'i', 'l', 'a', 9, 0,
  /* 18 */ 'd', 'f', 'm', 'a', 9, 0,
  /* 24 */ 'd', 'f', 'n', 'm', 'a', 9, 0,
  /* 31 */ 'r', 'o', 't', 'm', 'a', 9, 0,
  /* 38 */ 'l', 'q', 'a', 9, 0,
  /* 43 */ 's', 't', 'q', 'a', 9, 0,
  /* 49 */ 'h', 'b', 'r', 'a', 9, 0,
  /* 55 */ 'm', 'p', 'y', 'a', 9, 0,
  /* 61 */ 'g', 'b', 'b', 9, 0,
  /* 66 */ 'a', 'b', 's', 'd', 'b', 9, 0,
  /* 73 */ 's', 'h', 'u', 'f', 'b', 9, 0,
  /* 80 */ 'a', 'v', 'g', 'b', 9, 0,
  /* 86 */ 's', 'e', 'l', 'b', 9, 0,
  /* 92 */ 'f', 's', 'm', 'b', 9, 0,
  /* 98 */ 's', 'u', 'm', 'b', 9, 0,
  /* 104 */ 'c', 'e', 'q', 'b', 9, 0,
  /* 110 */ 'c', 'g', 't', 'b', 9, 0,
  /* 116 */ 'c', 'l', 'g', 't', 'b', 9, 0,
  /* 123 */ 'c', 'n', 't', 'b', 9, 0,
  /* 129 */ 'a', 'n', 'd', 'c', 9, 0,
  /* 135 */ 'o', 'r', 'c', 9, 0,
  /* 140 */ 'c', 'b', 'd', 9, 0,
  /* 145 */ 'c', 'd', 'd', 9, 0,
  /* 150 */ 'c', 'h', 'd', 9, 0,
  /* 155 */ 'n', 'a', 'n', 'd', 9, 0,
  /* 161 */ 'l', 'q', 'd', 9, 0,
  /* 166 */ 's', 't', 'q', 'd', 9, 0,
  /* 172 */ 'f', 's', 'c', 'r', 'r', 'd', 9, 0,
  /* 180 */ 'f', 'e', 's', 'd', 9, 0,
  /* 186 */ 'c', 'w', 'd', 9, 0,
  /* 191 */ 'x', 's', 'w', 'd', 9, 0,
  /* 197 */ 's', 'f', 9, 0,
  /* 201 */ 'b', 'g', 9, 0,
  /* 205 */ 'c', 'g', 9, 0,
  /* 209 */ 'r', 'o', 't', 'm', 'a', 'h', 9, 0,
  /* 217 */ 'g', 'b', 'h', 9, 0,
  /* 222 */ 'x', 's', 'b', 'h', 9, 0,
  /* 228 */ 's', 'f', 'h', 9, 0,
  /* 233 */ 'm', 'p', 'y', 'h', 'h', 9, 0,
  /* 240 */ 's', 'h', 'l', 'h', 9, 0,
  /* 246 */ 'i', 'l', 'h', 9, 0,
  /* 251 */ 'f', 's', 'm', 'h', 9, 0,
  /* 257 */ 'c', 'e', 'q', 'h', 9, 0,
  /* 263 */ 'c', 'g', 't', 'h', 9, 0,
  /* 269 */ 'c', 'l', 'g', 't', 'h', 9, 0,
  /* 276 */ 'r', 'o', 't', 'h', 9, 0,
  /* 282 */ 'm', 'p', 'y', 'h', 9, 0,
  /* 288 */ 'r', 'o', 't', 'm', 'a', 'i', 9, 0,
  /* 296 */ 'a', 'n', 'd', 'b', 'i', 9, 0,
  /* 303 */ 'r', 'o', 't', 'q', 'm', 'b', 'i', 9, 0,
  /* 312 */ 'f', 's', 'm', 'b', 'i', 9, 0,
  /* 319 */ 'c', 'e', 'q', 'b', 'i', 9, 0,
  /* 326 */ 's', 'h', 'l', 'q', 'b', 'i', 9, 0,
  /* 334 */ 'r', 'o', 't', 'q', 'b', 'i', 9, 0,
  /* 342 */ 'x', 'o', 'r', 'b', 'i', 9, 0,
  /* 349 */ 'c', 'g', 't', 'b', 'i', 9, 0,
  /* 356 */ 'c', 'l', 'g', 't', 'b', 'i', 9, 0,
  /* 364 */ 'r', 'o', 't', 'q', 'm', 'b', 'y', 'b', 'i', 9, 0,
  /* 375 */ 's', 'h', 'l', 'q', 'b', 'y', 'b', 'i', 9, 0,
  /* 385 */ 'r', 'o', 't', 'q', 'b', 'y', 'b', 'i', 9, 0,
  /* 395 */ 'a', 'n', 'd', 'i', 9, 0,
  /* 401 */ 's', 'f', 'i', 9, 0,
  /* 406 */ 'r', 'o', 't', 'm', 'a', 'h', 'i', 9, 0,
  /* 415 */ 'a', 'n', 'd', 'h', 'i', 9, 0,
  /* 422 */ 's', 'f', 'h', 'i', 9, 0,
  /* 428 */ 's', 'h', 'l', 'h', 'i', 9, 0,
  /* 435 */ 'c', 'e', 'q', 'h', 'i', 9, 0,
  /* 442 */ 'x', 'o', 'r', 'h', 'i', 9, 0,
  /* 449 */ 'c', 'g', 't', 'h', 'i', 9, 0,
  /* 456 */ 'c', 'l', 'g', 't', 'h', 'i', 9, 0,
  /* 464 */ 'r', 'o', 't', 'h', 'i', 9, 0,
  /* 471 */ 'r', 'o', 't', 'q', 'm', 'b', 'i', 'i', 9, 0,
  /* 481 */ 's', 'h', 'l', 'q', 'b', 'i', 'i', 9, 0,
  /* 490 */ 'r', 'o', 't', 'q', 'b', 'i', 'i', 9, 0,
  /* 499 */ 's', 'h', 'l', 'i', 9, 0,
  /* 505 */ 'r', 'o', 't', 'h', 'm', 'i', 9, 0,
  /* 513 */ 'r', 'o', 't', 'm', 'i', 9, 0,
  /* 520 */ 'c', 'e', 'q', 'i', 9, 0,
  /* 526 */ 'h', 'e', 'q', 'i', 9, 0,
  /* 532 */ 'x', 'o', 'r', 'i', 9, 0,
  /* 538 */ 'c', 'g', 't', 'i', 9, 0,
  /* 544 */ 'h', 'g', 't', 'i', 9, 0,
  /* 550 */ 'c', 'l', 'g', 't', 'i', 9, 0,
  /* 557 */ 'h', 'l', 'g', 't', 'i', 9, 0,
  /* 564 */ 'r', 'o', 't', 'i', 9, 0,
  /* 570 */ 'm', 'p', 'y', 'u', 'i', 9, 0,
  /* 577 */ 'r', 'o', 't', 'q', 'm', 'b', 'y', 'i', 9, 0,
  /* 587 */ 's', 'h', 'l', 'q', 'b', 'y', 'i', 9, 0,
  /* 596 */ 'r', 'o', 't', 'q', 'b', 'y', 'i', 9, 0,
  /* 605 */ 'm', 'p', 'y', 'i', 9, 0,
  /* 611 */ 'i', 'o', 'h', 'l', 9, 0,
  /* 617 */ 's', 'h', 'l', 9, 0,
  /* 622 */ 'i', 'l', 9, 0,
  /* 626 */ 'd', 'f', 'm', 9, 0,
  /* 631 */ 'r', 'o', 't', 'h', 'm', 9, 0,
  /* 638 */ 'f', 's', 'm', 9, 0,
  /* 643 */ 'r', 'o', 't', 'm', 9, 0,
  /* 649 */ 'f', 'c', 'e', 'q', 9, 0,
  /* 655 */ 'h', 'e', 'q', 9, 0,
  /* 660 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 667 */ 'b', 'r', 9, 0,
  /* 671 */ 'l', 'r', 9, 0,
  /* 675 */ 'n', 'o', 'r', 9, 0,
  /* 680 */ 'x', 'o', 'r', 9, 0,
  /* 685 */ 'f', 's', 'c', 'r', 'w', 'r', 9, 0,
  /* 693 */ 'f', 'r', 'd', 's', 9, 0,
  /* 699 */ 'd', 'f', 's', 9, 0,
  /* 704 */ 'd', 'f', 'm', 's', 9, 0,
  /* 710 */ 'd', 'f', 'n', 'm', 's', 9, 0,
  /* 717 */ 'c', 'f', 'l', 't', 's', 9, 0,
  /* 724 */ 'm', 'p', 'y', 's', 9, 0,
  /* 730 */ 'f', 'c', 'g', 't', 9, 0,
  /* 736 */ 'h', 'g', 't', 9, 0,
  /* 741 */ 'c', 'l', 'g', 't', 9, 0,
  /* 747 */ 'h', 'l', 'g', 't', 9, 0,
  /* 753 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 760 */ 'c', 's', 'f', 'l', 't', 9, 0,
  /* 767 */ 'c', 'u', 'f', 'l', 't', 9, 0,
  /* 774 */ 'r', 'o', 't', 9, 0,
  /* 779 */ 'f', 'r', 'e', 's', 't', 9, 0,
  /* 786 */ 'm', 'p', 'y', 'h', 'h', 'a', 'u', 9, 0,
  /* 795 */ 'm', 'p', 'y', 'h', 'h', 'u', 9, 0,
  /* 803 */ 'i', 'l', 'h', 'u', 9, 0,
  /* 809 */ 'c', 'f', 'l', 't', 'u', 9, 0,
  /* 816 */ 'm', 'p', 'y', 'u', 9, 0,
  /* 822 */ 'e', 'q', 'v', 9, 0,
  /* 827 */ 'x', 's', 'h', 'w', 9, 0,
  /* 833 */ 'c', 'b', 'x', 9, 0,
  /* 838 */ 'c', 'd', 'x', 9, 0,
  /* 843 */ 'a', 'd', 'd', 'x', 9, 0,
  /* 849 */ 's', 'f', 'x', 9, 0,
  /* 854 */ 'b', 'g', 'x', 9, 0,
  /* 859 */ 'c', 'h', 'x', 9, 0,
  /* 864 */ 'l', 'q', 'x', 9, 0,
  /* 869 */ 's', 't', 'q', 'x', 9, 0,
  /* 875 */ 'o', 'r', 'x', 9, 0,
  /* 880 */ 'c', 'w', 'x', 9, 0,
  /* 885 */ 'r', 'o', 't', 'q', 'm', 'b', 'y', 9, 0,
  /* 894 */ 's', 'h', 'l', 'q', 'b', 'y', 9, 0,
  /* 902 */ 'r', 'o', 't', 'q', 'b', 'y', 9, 0,
  /* 910 */ 'm', 'p', 'y', 9, 0,
  /* 915 */ 'b', 'r', 'h', 'z', 9, 0,
  /* 921 */ 'c', 'l', 'z', 9, 0,
  /* 926 */ 'b', 'r', 'h', 'n', 'z', 9, 0,
  /* 933 */ 'b', 'r', 'n', 'z', 9, 0,
  /* 939 */ 'b', 'r', 'z', 9, 0,
  /* 944 */ 'd', 'f', 'a', 9, 32, 0,
  /* 950 */ 'd', 'f', 'm', 'a', 9, 32, 0,
  /* 957 */ 'd', 'f', 'n', 'm', 'a', 9, 32, 0,
  /* 965 */ 'c', 'e', 'q', 'b', 9, 32, 0,
  /* 972 */ 'c', 'g', 't', 'b', 9, 32, 0,
  /* 979 */ 'c', 'l', 'g', 't', 'b', 9, 32, 0,
  /* 987 */ 'a', 'd', 'd', 'c', 9, 32, 0,
  /* 994 */ 'a', 'n', 'd', 'c', 9, 32, 0,
  /* 1001 */ 'n', 'a', 'n', 'd', 9, 32, 0,
  /* 1008 */ 'c', 'e', 'q', 'h', 9, 32, 0,
  /* 1015 */ 'c', 'g', 't', 'h', 9, 32, 0,
  /* 1022 */ 'c', 'l', 'g', 't', 'h', 9, 32, 0,
  /* 1030 */ 'a', 'n', 'd', 'b', 'i', 9, 32, 0,
  /* 1038 */ 'c', 'e', 'q', 'b', 'i', 9, 32, 0,
  /* 1046 */ 'x', 'o', 'r', 'b', 'i', 9, 32, 0,
  /* 1054 */ 'c', 'g', 't', 'b', 'i', 9, 32, 0,
  /* 1062 */ 'c', 'l', 'g', 't', 'b', 'i', 9, 32, 0,
  /* 1071 */ 'a', 'n', 'd', 'i', 9, 32, 0,
  /* 1078 */ 'a', 'n', 'd', 'h', 'i', 9, 32, 0,
  /* 1086 */ 'c', 'e', 'q', 'h', 'i', 9, 32, 0,
  /* 1094 */ 'x', 'o', 'r', 'h', 'i', 9, 32, 0,
  /* 1102 */ 'c', 'g', 't', 'h', 'i', 9, 32, 0,
  /* 1110 */ 'c', 'l', 'g', 't', 'h', 'i', 9, 32, 0,
  /* 1119 */ 'c', 'e', 'q', 'i', 9, 32, 0,
  /* 1126 */ 'x', 'o', 'r', 'i', 9, 32, 0,
  /* 1133 */ 'c', 'g', 't', 'i', 9, 32, 0,
  /* 1140 */ 'c', 'l', 'g', 't', 'i', 9, 32, 0,
  /* 1148 */ 'd', 'f', 'm', 9, 32, 0,
  /* 1154 */ 'f', 'c', 'e', 'q', 9, 32, 0,
  /* 1161 */ 'f', 'c', 'm', 'e', 'q', 9, 32, 0,
  /* 1169 */ 'n', 'o', 'r', 9, 32, 0,
  /* 1175 */ 'x', 'o', 'r', 9, 32, 0,
  /* 1181 */ 'd', 'f', 's', 9, 32, 0,
  /* 1187 */ 'd', 'f', 'm', 's', 9, 32, 0,
  /* 1194 */ 'd', 'f', 'n', 'm', 's', 9, 32, 0,
  /* 1202 */ 'f', 'c', 'g', 't', 9, 32, 0,
  /* 1209 */ 'c', 'l', 'g', 't', 9, 32, 0,
  /* 1216 */ 'f', 'c', 'm', 'g', 't', 9, 32, 0,
  /* 1224 */ 'b', 'i', 's', 'l', 'e', 'd', 9, '$', 'l', 'r', ',', 32, 0,
  /* 1237 */ 'b', 'r', 'a', 's', 'l', 9, '$', 'l', 'r', ',', 32, 0,
  /* 1249 */ 'b', 'i', 's', 'l', 9, '$', 'l', 'r', ',', 32, 0,
  /* 1260 */ 'b', 'r', 's', 'l', 9, '$', 'l', 'r', ',', 32, 0,
  /* 1271 */ 'm', 'p', 'y', 'h', 'h', 'a', 32, 0,
  /* 1279 */ 'm', 'p', 'y', 'a', 32, 0,
  /* 1285 */ 's', 'f', 32, 0,
  /* 1289 */ 'b', 'g', 32, 0,
  /* 1293 */ 'c', 'g', 32, 0,
  /* 1297 */ 'a', 'h', 32, 0,
  /* 1301 */ 's', 'f', 'h', 32, 0,
  /* 1306 */ 'm', 'p', 'y', 'h', 'h', 32, 0,
  /* 1313 */ 'm', 'p', 'y', 'h', 32, 0,
  /* 1319 */ 'a', 'i', 32, 0,
  /* 1323 */ 's', 'f', 'i', 32, 0,
  /* 1328 */ 'a', 'h', 'i', 32, 0,
  /* 1333 */ 's', 'f', 'h', 'i', 32, 0,
  /* 1339 */ 'm', 'p', 'y', 'u', 'i', 32, 0,
  /* 1346 */ 'm', 'p', 'y', 'i', 32, 0,
  /* 1352 */ 'm', 'p', 'y', 's', 32, 0,
  /* 1358 */ 'm', 'p', 'y', 'h', 'h', 'a', 'u', 32, 0,
  /* 1367 */ 'm', 'p', 'y', 'h', 'h', 'u', 32, 0,
  /* 1375 */ 'm', 'p', 'y', 'u', 32, 0,
  /* 1381 */ 'a', 'd', 'd', 'x', 32, 0,
  /* 1387 */ 's', 'f', 'x', 32, 0,
  /* 1392 */ 'b', 'g', 'x', 32, 0,
  /* 1397 */ 'c', 'g', 'x', 32, 0,
  /* 1402 */ 'm', 'p', 'y', 32, 0,
  /* 1407 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 1414 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 1424 */ 'l', 'n', 'o', 'p', 0,
  /* 1429 */ 'b', 'i', 9, '$', 'l', 'r', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, ENOP, LNOP, RET
    return;
    break;
  case 1:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    PrintSpecial(MI, O, "comment"); 
    break;
  case 3:
    // BISLED_00, BISLED_0D, BISLED_E0, BISLED_ED, BRASL
    printCallOperand(MI, 0, O); 
    return;
    break;
  case 4:
    // BR, BRA, BRSL
    printPCRelativeOperand(MI, 0, O); 
    return;
    break;
  case 5:
    // FSCRWf32
    printOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // HBRA, HBR_LABEL
    printHBROperand(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 26) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN"; 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP"; 
    return;
    break;
  case 3:
    // BI, BISL, FSCRRf32
    return;
    break;
  case 4:
    // BRHNZr16, BRHNZv8i16, BRHZr16, BRHZv8i16, BRNZr32, BRNZv4i32, BRZr32, ...
    O << ','; 
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HBR_LABEL
    O << ":\t"; 
    PrintSpecial(MI, O, "comment"); 
    O << "branch hint target"; 
    return;
    break;
  }


  // Fragment 2 encoded into 4 bits for 16 unique commands.
  switch ((Bits >> 22) & 15) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // CBD, CDD, CDDf64, CHD, CWD, CWDf32
    printShufAddr(MI, 1, O); 
    return;
    break;
  case 2:
    // CBX, CDX, CDXf64, CHX, CWX, CWXf32, LQXf32, LQXf64, LQXr128, LQXr16, L...
    printMemRegReg(MI, 1, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi, IOHLf32, IOHLr32
    printOperand(MI, 2, O); 
    break;
  case 4:
    // FSMBIv16i8, FSMBIv2i64, FSMBIv4i32, FSMBIv8i16, ILHUf32, ILHUr32, ILHU...
    printU16ImmOperand(MI, 1, O); 
    return;
    break;
  case 5:
    // HBRA
    printPCRelativeOperand(MI, 1, O); 
    return;
    break;
  case 6:
    // HEQIr32, HGTIr32, HLGTIr32
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // ILAf32, ILAf64, ILAr32, ILAr64, ILAv2i64, ILAv4i32
    printU18ImmOperand(MI, 1, O); 
    return;
    break;
  case 8:
    // ILAhi, ILHUhi
    printSymbolHi(MI, 1, O); 
    return;
    break;
  case 9:
    // ILAlo
    printSymbolLo(MI, 1, O); 
    return;
    break;
  case 10:
    // ILAlsa
    printSymbolLSA(MI, 1, O); 
    return;
    break;
  case 11:
    // ILHr16, ILHr8, ILHv8i16, ILf32, ILf64, ILr32, ILr64, ILv2i64, ILv4i32
    printS16ImmOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // IOHLlo
    printSymbolLo(MI, 2, O); 
    return;
    break;
  case 13:
    // IOHLv2i64, IOHLv4i32
    printU16ImmOperand(MI, 2, O); 
    return;
    break;
  case 14:
    // LQAf32, LQAf64, LQAr128, LQAr16, LQAr32, LQAr64, LQAr8, LQAv16i8, LQAv...
    printAddr256K(MI, 1, O); 
    return;
    break;
  case 15:
    // LQDf32, LQDf64, LQDr128, LQDr16, LQDr32, LQDr64, LQDr8, LQDv16i8, LQDv...
    printDFormAddr(MI, 1, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHIr16, AHIvec, AHr16, ...
    O << ", "; 
    break;
  case 1:
    // CFSif32, CFSiv4f32, CFUif32, CFUiv4f32, CSiFf32, CSiFv4f32, CUiFf32, C...
    O << ", 0"; 
    return;
    break;
  case 2:
    // CLZr32, CLZv4i32, CNTBv16i8, CNTBv4i32, CNTBv8i16, FESDf32, FESDvec, F...
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 17) & 7) {
  default:   // unreachable.
  case 0:
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // AHIr16, AHIvec, AIf32, AIr32, AIv4f32, AIv4i32, ANDHIv8i16, ANDIi16i32...
    printS10ImmOperand(MI, 2, O); 
    return;
    break;
  case 2:
    // ANDBIr8, ANDBIv16i8, ANDHIi8i16, ANDHIr16, CellSDKandbi, CellSDKceqbi,...
    printU10ImmOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // CellSDKahi, CellSDKai, CellSDKsfhi, CellSDKsfi
    printS10ImmOperand(MI, 1, O); 
    return;
    break;
  case 4:
    // ROTHIr16, ROTHIr16_r32, ROTHIv8i16, ROTIr32, ROTIr32_i16, ROTIr32_i8, ...
    printU7ImmOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // ROTHMIr16, ROTHMIv8i16, ROTMAHIr16, ROTMAHIv8i16
    printROTHNeg7Imm(MI, 2, O); 
    return;
    break;
  case 6:
    // ROTMAIr32_i32, ROTMAIr64_i32, ROTMAIv2i64_i32, ROTMAIv4i32_i32, ROTMIr...
    printROTNeg7Imm(MI, 2, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // CellSDKfma, CellSDKfms, CellSDKfnms, CellSDKmpya, FMAf32, FMAv4f32, FM...
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
  } else {
    // ABSDB, ADDXr32, ADDXr64, ADDXv2i64, ADDXv4i32, AHr16, AHv8i16, ANDCr12...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *SPUAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 129 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '$', '1', '0', '0', 0,
  /* 5 */ '$', '1', '0', 0,
  /* 9 */ '$', '1', '1', '0', 0,
  /* 14 */ '$', '2', '0', 0,
  /* 18 */ '$', '1', '2', '0', 0,
  /* 23 */ '$', '3', '0', 0,
  /* 27 */ '$', '4', '0', 0,
  /* 31 */ '$', '5', '0', 0,
  /* 35 */ '$', '6', '0', 0,
  /* 39 */ '$', '7', '0', 0,
  /* 43 */ '$', '8', '0', 0,
  /* 47 */ '$', '9', '0', 0,
  /* 51 */ '$', '1', '0', '1', 0,
  /* 56 */ '$', '1', '1', 0,
  /* 60 */ '$', '1', '1', '1', 0,
  /* 65 */ '$', '2', '1', 0,
  /* 69 */ '$', '1', '2', '1', 0,
  /* 74 */ '$', '3', '1', 0,
  /* 78 */ '$', '4', '1', 0,
  /* 82 */ '$', '5', '1', 0,
  /* 86 */ '$', '6', '1', 0,
  /* 90 */ '$', '7', '1', 0,
  /* 94 */ '$', '8', '1', 0,
  /* 98 */ '$', '9', '1', 0,
  /* 102 */ '$', '2', 0,
  /* 105 */ '$', '1', '0', '2', 0,
  /* 110 */ '$', '1', '2', 0,
  /* 114 */ '$', '1', '1', '2', 0,
  /* 119 */ '$', '2', '2', 0,
  /* 123 */ '$', '1', '2', '2', 0,
  /* 128 */ '$', '3', '2', 0,
  /* 132 */ '$', '4', '2', 0,
  /* 136 */ '$', '5', '2', 0,
  /* 140 */ '$', '6', '2', 0,
  /* 144 */ '$', '7', '2', 0,
  /* 148 */ '$', '8', '2', 0,
  /* 152 */ '$', '9', '2', 0,
  /* 156 */ '$', '3', 0,
  /* 159 */ '$', '1', '0', '3', 0,
  /* 164 */ '$', '1', '3', 0,
  /* 168 */ '$', '1', '1', '3', 0,
  /* 173 */ '$', '2', '3', 0,
  /* 177 */ '$', '1', '2', '3', 0,
  /* 182 */ '$', '3', '3', 0,
  /* 186 */ '$', '4', '3', 0,
  /* 190 */ '$', '5', '3', 0,
  /* 194 */ '$', '6', '3', 0,
  /* 198 */ '$', '7', '3', 0,
  /* 202 */ '$', '8', '3', 0,
  /* 206 */ '$', '9', '3', 0,
  /* 210 */ '$', '4', 0,
  /* 213 */ '$', '1', '0', '4', 0,
  /* 218 */ '$', '1', '4', 0,
  /* 222 */ '$', '1', '1', '4', 0,
  /* 227 */ '$', '2', '4', 0,
  /* 231 */ '$', '1', '2', '4', 0,
  /* 236 */ '$', '3', '4', 0,
  /* 240 */ '$', '4', '4', 0,
  /* 244 */ '$', '5', '4', 0,
  /* 248 */ '$', '6', '4', 0,
  /* 252 */ '$', '7', '4', 0,
  /* 256 */ '$', '8', '4', 0,
  /* 260 */ '$', '9', '4', 0,
  /* 264 */ '$', '5', 0,
  /* 267 */ '$', '1', '0', '5', 0,
  /* 272 */ '$', '1', '5', 0,
  /* 276 */ '$', '1', '1', '5', 0,
  /* 281 */ '$', '2', '5', 0,
  /* 285 */ '$', '1', '2', '5', 0,
  /* 290 */ '$', '3', '5', 0,
  /* 294 */ '$', '4', '5', 0,
  /* 298 */ '$', '5', '5', 0,
  /* 302 */ '$', '6', '5', 0,
  /* 306 */ '$', '7', '5', 0,
  /* 310 */ '$', '8', '5', 0,
  /* 314 */ '$', '9', '5', 0,
  /* 318 */ '$', '6', 0,
  /* 321 */ '$', '1', '0', '6', 0,
  /* 326 */ '$', '1', '6', 0,
  /* 330 */ '$', '1', '1', '6', 0,
  /* 335 */ '$', '2', '6', 0,
  /* 339 */ '$', '1', '2', '6', 0,
  /* 344 */ '$', '3', '6', 0,
  /* 348 */ '$', '4', '6', 0,
  /* 352 */ '$', '5', '6', 0,
  /* 356 */ '$', '6', '6', 0,
  /* 360 */ '$', '7', '6', 0,
  /* 364 */ '$', '8', '6', 0,
  /* 368 */ '$', '9', '6', 0,
  /* 372 */ '$', '7', 0,
  /* 375 */ '$', '1', '0', '7', 0,
  /* 380 */ '$', '1', '7', 0,
  /* 384 */ '$', '1', '1', '7', 0,
  /* 389 */ '$', '2', '7', 0,
  /* 393 */ '$', '1', '2', '7', 0,
  /* 398 */ '$', '3', '7', 0,
  /* 402 */ '$', '4', '7', 0,
  /* 406 */ '$', '5', '7', 0,
  /* 410 */ '$', '6', '7', 0,
  /* 414 */ '$', '7', '7', 0,
  /* 418 */ '$', '8', '7', 0,
  /* 422 */ '$', '9', '7', 0,
  /* 426 */ '$', '8', 0,
  /* 429 */ '$', '1', '0', '8', 0,
  /* 434 */ '$', '1', '8', 0,
  /* 438 */ '$', '1', '1', '8', 0,
  /* 443 */ '$', '2', '8', 0,
  /* 447 */ '$', '3', '8', 0,
  /* 451 */ '$', '4', '8', 0,
  /* 455 */ '$', '5', '8', 0,
  /* 459 */ '$', '6', '8', 0,
  /* 463 */ '$', '7', '8', 0,
  /* 467 */ '$', '8', '8', 0,
  /* 471 */ '$', '9', '8', 0,
  /* 475 */ '$', '9', 0,
  /* 478 */ '$', '1', '0', '9', 0,
  /* 483 */ '$', '1', '9', 0,
  /* 487 */ '$', '1', '1', '9', 0,
  /* 492 */ '$', '2', '9', 0,
  /* 496 */ '$', '3', '9', 0,
  /* 500 */ '$', '4', '9', 0,
  /* 504 */ '$', '5', '9', 0,
  /* 508 */ '$', '6', '9', 0,
  /* 512 */ '$', '7', '9', 0,
  /* 516 */ '$', '8', '9', 0,
  /* 520 */ '$', '9', '9', 0,
  /* 524 */ '$', 's', 'p', 0,
  /* 528 */ '$', 'l', 'r', 0,
  };

  static const unsigned RegAsmOffset[] = {
    528, 524, 102, 156, 210, 264, 318, 372, 426, 475, 5, 56, 110, 164, 
    218, 272, 326, 380, 434, 483, 14, 65, 119, 173, 227, 281, 335, 389, 
    443, 492, 23, 74, 128, 182, 236, 290, 344, 398, 447, 496, 27, 78, 
    132, 186, 240, 294, 348, 402, 451, 500, 31, 82, 136, 190, 244, 298, 
    352, 406, 455, 504, 35, 86, 140, 194, 248, 302, 356, 410, 459, 508, 
    39, 90, 144, 198, 252, 306, 360, 414, 463, 512, 43, 94, 148, 202, 
    256, 310, 364, 418, 467, 516, 47, 98, 152, 206, 260, 314, 368, 422, 
    471, 520, 0, 51, 105, 159, 213, 267, 321, 375, 429, 478, 9, 60, 
    114, 168, 222, 276, 330, 384, 438, 487, 18, 69, 123, 177, 231, 285, 
    339, 393, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}
