//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void HexagonInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    239U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    232U,	// BUNDLE
    536870918U,	// ADD64_rr
    537919494U,	// ADDASL
    536870918U,	// ADD_ri
    1075847195U,	// ADD_ri_cNotPt
    1075847242U,	// ADD_ri_cPt
    1076895771U,	// ADD_ri_cdnNotPt
    1076895818U,	// ADD_ri_cdnPt
    536870918U,	// ADD_rr
    1075847195U,	// ADD_rr_cNotPt
    1075847242U,	// ADD_rr_cPt
    1076895771U,	// ADD_rr_cdnNotPt
    1076895818U,	// ADD_rr_cdnPt
    541081606U,	// ADDi_ASLri_V4
    541089798U,	// ADDi_LSRri_V4
    541097990U,	// ADDi_MPYri_V4
    541097990U,	// ADDi_MPYrr_V4
    536870918U,	// ADDr_ADDri_V4
    536870918U,	// ADDr_MPYir_V4
    536870918U,	// ADDr_MPYri_V4
    536870918U,	// ADDr_MPYrr_V4
    536870918U,	// ADDr_SUBri_V4
    536870918U,	// ADDri_SUBr_V4
    542154758U,	// ADDri_acc
    542162950U,	// ADDrr_acc
    249U,	// ADJCALLSTACKDOWN
    249U,	// ADJCALLSTACKUP
    536870918U,	// ADJDYNALLOC
    543162415U,	// ALLOCFRAME
    544210950U,	// ALL_pp
    545316870U,	// AND_pnotp
    545308678U,	// AND_pp
    545300486U,	// AND_ri
    545308678U,	// AND_rr
    545308678U,	// AND_rr64
    1075904539U,	// AND_rr_cNotPt
    1075904586U,	// AND_rr_cPt
    1076953115U,	// AND_rr_cdnNotPt
    1076953162U,	// AND_rr_cdnPt
    545333254U,	// ANDd_NOTd_V4
    546324486U,	// ANDi_ASLri_V4
    546332678U,	// ANDi_LSRri_V4
    547430406U,	// ANDr_ANDr_NOTr_V4
    547405830U,	// ANDr_ANDrr_V4
    548405254U,	// ANDr_ORrr_V4
    549453830U,	// ANDr_XORrr_V4
    550502406U,	// ANY_pp
    551632902U,	// ARGEXTEND
    552640518U,	// ASL
    553648134U,	// ASLH
    1075929115U,	// ASLH_cNotPt_V4
    1075929162U,	// ASLH_cPt_V4
    1076977691U,	// ASLH_cdnNotPt_V4
    1076977738U,	// ASLH_cdnPt_V4
    552648710U,	// ASL_rr
    554745862U,	// ASLd_rr_xor_V4
    555745286U,	// ASRH
    1075937307U,	// ASRH_cNotPt_V4
    1075937354U,	// ASRH_cPt_V4
    1076985883U,	// ASRH_cdnNotPt_V4
    1076985930U,	// ASRH_cdnPt_V4
    556834822U,	// ASR_ri
    556843014U,	// ASR_rr
    557891590U,	// ASR_rr_acc
    556834822U,	// ASRd_ri
    556843014U,	// ASRd_rr
    558891014U,	// ASRd_rr_xor_V4
    305U,	// BARRIER
    559939658U,	// BRCOND
    560988180U,	// BR_JT
    560988161U,	// CALL
    560988173U,	// CALLR
    560988173U,	// CALLRv3
    560988161U,	// CALLv3
    562085894U,	// CMPEHexagon4rr
    562077702U,	// CMPEQri
    562085894U,	// CMPEQrr
    563085318U,	// CMPGEUri
    564133894U,	// CMPGEri
    565231622U,	// CMPGT64rr
    566280198U,	// CMPGTU64rr
    566272006U,	// CMPGTUri
    566280198U,	// CMPGTUrr
    565223430U,	// CMPGTri
    565231622U,	// CMPGTrr
    567279622U,	// CMPLTrr
    568369158U,	// CMPbEQri_V4
    568377350U,	// CMPbEQrr_sbsb_V4
    568377350U,	// CMPbEQrr_ubub_V4
    569417734U,	// CMPbGTUri_V4
    569425926U,	// CMPbGTUrr_V4
    570466310U,	// CMPbGTri_V4
    570474502U,	// CMPbGTrr_V4
    571514886U,	// CMPhEQri_V4
    571523078U,	// CMPhEQrr_shl_V4
    571523078U,	// CMPhEQrr_xor_V4
    572563462U,	// CMPhGTUri_V4
    572571654U,	// CMPhGTUrr_V4
    573612038U,	// CMPhGTri_V4
    573620230U,	// CMPhGTrr_shl_V4
    574668806U,	// COMBINE_rr
    1075945499U,	// COMBINE_rr_cNotPt
    1075945546U,	// COMBINE_rr_cPt
    1076994075U,	// COMBINE_rr_cdnNotPt
    1076994122U,	// COMBINE_rr_cdnPt
    575782918U,	// CONST32
    575782918U,	// CONST32GP_set
    575668230U,	// CONST32_Int_Real
    576716806U,	// CONST32_Label
    575782918U,	// CONST32_set
    575791110U,	// CONST32_set_jt
    577765382U,	// CONST64_Int_Real
    273U,	// DEALLOCFRAME
    286U,	// DEALLOC_RET_V4
    578813979U,	// DEALLOC_RET_cNotPt_V4
    579862555U,	// DEALLOC_RET_cNotdnPnt_V4
    580911131U,	// DEALLOC_RET_cNotdnPt_V4
    578814026U,	// DEALLOC_RET_cPt_V4
    579862602U,	// DEALLOC_RET_cdnPnt_V4
    580911178U,	// DEALLOC_RET_cdnPt_V4
    212U,	// ENDLOOP0
    582000646U,	// HEXAGON_A4_cround_ri
    582008838U,	// HEXAGON_A4_cround_rr
    583008262U,	// HEXAGON_A4_modwrapu
    584097798U,	// HEXAGON_A4_round_ri
    584097798U,	// HEXAGON_A4_round_ri_sat
    584105990U,	// HEXAGON_A4_round_rr
    584105990U,	// HEXAGON_A4_round_rr_sat
    585154566U,	// HEXAGON_C2_bitsclr
    585146374U,	// HEXAGON_C2_bitsclri
    586153990U,	// HEXAGON_C2_bitsset
    547405830U,	// HEXAGON_M4_and_and
    547430406U,	// HEXAGON_M4_and_andn
    548405254U,	// HEXAGON_M4_and_or
    549453830U,	// HEXAGON_M4_and_xor
    587251718U,	// HEXAGON_M4_or_and
    587276294U,	// HEXAGON_M4_or_andn
    588300294U,	// HEXAGON_M4_or_or
    589299718U,	// HEXAGON_M4_or_xor
    590397446U,	// HEXAGON_M4_xor_and
    590422022U,	// HEXAGON_M4_xor_andn
    591396870U,	// HEXAGON_M4_xor_or
    592445446U,	// HEXAGON_S2_brev
    593494022U,	// HEXAGON_S2_deinterleave
    594583558U,	// HEXAGON_S2_insert
    594591750U,	// HEXAGON_S2_insert_rp
    594583558U,	// HEXAGON_S2_insertp
    594591750U,	// HEXAGON_S2_insertp_rp
    595591174U,	// HEXAGON_S2_interleave
    596639750U,	// HEXAGON_S2_lfsp
    597688326U,	// HEXAGON_S2_tableidxb_goodsyntax
    598736902U,	// HEXAGON_S2_tableidxd_goodsyntax
    599785478U,	// HEXAGON_S2_tableidxh_goodsyntax
    600834054U,	// HEXAGON_S2_tableidxw_goodsyntax
    601923590U,	// HEXAGON_S2_vspliceib
    601931782U,	// HEXAGON_S2_vsplicerb
    587243526U,	// HEXAGON_S4_or_andi
    603062278U,	// HEXAGON_S4_or_andix
    588292102U,	// HEXAGON_S4_or_ori
    604119046U,	// Hexagon_A2_abs
    604119046U,	// Hexagon_A2_absp
    604127238U,	// Hexagon_A2_abssat
    536870918U,	// Hexagon_A2_add
    536870918U,	// Hexagon_A2_addh_h16_hh
    536870918U,	// Hexagon_A2_addh_h16_hl
    536870918U,	// Hexagon_A2_addh_h16_lh
    536870918U,	// Hexagon_A2_addh_h16_ll
    536870918U,	// Hexagon_A2_addh_h16_sat_hh
    536870918U,	// Hexagon_A2_addh_h16_sat_hl
    536870918U,	// Hexagon_A2_addh_h16_sat_lh
    536870918U,	// Hexagon_A2_addh_h16_sat_ll
    536870918U,	// Hexagon_A2_addh_l16_hl
    536870918U,	// Hexagon_A2_addh_l16_ll
    536870918U,	// Hexagon_A2_addh_l16_sat_hl
    536870918U,	// Hexagon_A2_addh_l16_sat_ll
    536870918U,	// Hexagon_A2_addi
    536870918U,	// Hexagon_A2_addp
    536870918U,	// Hexagon_A2_addpsat
    536870918U,	// Hexagon_A2_addsat
    536870918U,	// Hexagon_A2_addsp
    545308678U,	// Hexagon_A2_and
    545300486U,	// Hexagon_A2_andir
    545308678U,	// Hexagon_A2_andp
    553648134U,	// Hexagon_A2_aslh
    555745286U,	// Hexagon_A2_asrh
    574775302U,	// Hexagon_A2_combine_hh
    574775302U,	// Hexagon_A2_combine_hl
    574783494U,	// Hexagon_A2_combine_lh
    574783494U,	// Hexagon_A2_combine_ll
    605069318U,	// Hexagon_A2_combineii
    574668806U,	// Hexagon_A2_combinew
    606076934U,	// Hexagon_A2_max
    606076934U,	// Hexagon_A2_maxp
    607125510U,	// Hexagon_A2_maxu
    607125510U,	// Hexagon_A2_maxup
    608174086U,	// Hexagon_A2_min
    609222662U,	// Hexagon_A2_minu
    610410502U,	// Hexagon_A2_neg
    610410502U,	// Hexagon_A2_negp
    610418694U,	// Hexagon_A2_negsat
    611319814U,	// Hexagon_A2_not
    611319814U,	// Hexagon_A2_notp
    602980358U,	// Hexagon_A2_or
    602972166U,	// Hexagon_A2_orir
    602980358U,	// Hexagon_A2_orp
    612368390U,	// Hexagon_A2_sat
    613416966U,	// Hexagon_A2_satb
    614465542U,	// Hexagon_A2_sath
    615514118U,	// Hexagon_A2_satub
    616562694U,	// Hexagon_A2_satuh
    617660422U,	// Hexagon_A2_sub
    617766918U,	// Hexagon_A2_subh_h16_hh
    617766918U,	// Hexagon_A2_subh_h16_hl
    617775110U,	// Hexagon_A2_subh_h16_lh
    617775110U,	// Hexagon_A2_subh_h16_ll
    617766918U,	// Hexagon_A2_subh_h16_sat_hh
    617766918U,	// Hexagon_A2_subh_h16_sat_hl
    617775110U,	// Hexagon_A2_subh_h16_sat_lh
    617775110U,	// Hexagon_A2_subh_h16_sat_ll
    617775110U,	// Hexagon_A2_subh_l16_hl
    617775110U,	// Hexagon_A2_subh_l16_ll
    617775110U,	// Hexagon_A2_subh_l16_sat_hl
    617775110U,	// Hexagon_A2_subh_l16_sat_ll
    617660422U,	// Hexagon_A2_subp
    618708998U,	// Hexagon_A2_subri
    617660422U,	// Hexagon_A2_subsat
    619847686U,	// Hexagon_A2_svaddh
    619855878U,	// Hexagon_A2_svaddhs
    620756998U,	// Hexagon_A2_svadduhs
    621944838U,	// Hexagon_A2_svavgh
    621977606U,	// Hexagon_A2_svavghs
    622993414U,	// Hexagon_A2_svnavgh
    624041990U,	// Hexagon_A2_svsubh
    624050182U,	// Hexagon_A2_svsubhs
    624951302U,	// Hexagon_A2_svsubuhs
    625999878U,	// Hexagon_A2_swiz
    627048454U,	// Hexagon_A2_sxtb
    628097030U,	// Hexagon_A2_sxth
    629145606U,	// Hexagon_A2_sxtw
    551632902U,	// Hexagon_A2_tfr
    630194182U,	// Hexagon_A2_tfrih
    631242758U,	// Hexagon_A2_tfril
    551632902U,	// Hexagon_A2_tfrp
    632291334U,	// Hexagon_A2_tfrpi
    632291334U,	// Hexagon_A2_tfrsi
    633479174U,	// Hexagon_A2_vabsh
    633487366U,	// Hexagon_A2_vabshsat
    634527750U,	// Hexagon_A2_vabsw
    634535942U,	// Hexagon_A2_vabswsat
    619847686U,	// Hexagon_A2_vaddh
    619855878U,	// Hexagon_A2_vaddhs
    635576326U,	// Hexagon_A2_vaddub
    635584518U,	// Hexagon_A2_vaddubs
    620756998U,	// Hexagon_A2_vadduhs
    636624902U,	// Hexagon_A2_vaddw
    636633094U,	// Hexagon_A2_vaddws
    621944838U,	// Hexagon_A2_vavgh
    621985798U,	// Hexagon_A2_vavghcr
    621977606U,	// Hexagon_A2_vavghr
    637673478U,	// Hexagon_A2_vavgub
    637706246U,	// Hexagon_A2_vavgubr
    638722054U,	// Hexagon_A2_vavguh
    638754822U,	// Hexagon_A2_vavguhr
    639770630U,	// Hexagon_A2_vavguw
    639803398U,	// Hexagon_A2_vavguwr
    640819206U,	// Hexagon_A2_vavgw
    640860166U,	// Hexagon_A2_vavgwcr
    640851974U,	// Hexagon_A2_vavgwr
    641728518U,	// Hexagon_A2_vcmpbeq
    642777094U,	// Hexagon_A2_vcmpbgtu
    643825670U,	// Hexagon_A2_vcmpheq
    644874246U,	// Hexagon_A2_vcmphgt
    645922822U,	// Hexagon_A2_vcmphgtu
    646971398U,	// Hexagon_A2_vcmpweq
    648019974U,	// Hexagon_A2_vcmpwgt
    649068550U,	// Hexagon_A2_vcmpwgtu
    650117126U,	// Hexagon_A2_vconj
    651165702U,	// Hexagon_A2_vmaxh
    652214278U,	// Hexagon_A2_vmaxub
    653262854U,	// Hexagon_A2_vmaxuh
    654311430U,	// Hexagon_A2_vmaxuw
    655360006U,	// Hexagon_A2_vmaxw
    656408582U,	// Hexagon_A2_vminh
    657457158U,	// Hexagon_A2_vminub
    658505734U,	// Hexagon_A2_vminuh
    659554310U,	// Hexagon_A2_vminuw
    660602886U,	// Hexagon_A2_vminw
    622993414U,	// Hexagon_A2_vnavgh
    623042566U,	// Hexagon_A2_vnavghcr
    623050758U,	// Hexagon_A2_vnavghr
    661790726U,	// Hexagon_A2_vnavgw
    661839878U,	// Hexagon_A2_vnavgwcr
    661848070U,	// Hexagon_A2_vnavgwr
    662700038U,	// Hexagon_A2_vraddub
    663748614U,	// Hexagon_A2_vraddub_acc
    664797190U,	// Hexagon_A2_vrsadub
    665845766U,	// Hexagon_A2_vrsadub_acc
    624041990U,	// Hexagon_A2_vsubh
    624050182U,	// Hexagon_A2_vsubhs
    667033606U,	// Hexagon_A2_vsubub
    667041798U,	// Hexagon_A2_vsububs
    624951302U,	// Hexagon_A2_vsubuhs
    668082182U,	// Hexagon_A2_vsubw
    668090374U,	// Hexagon_A2_vsubws
    668991494U,	// Hexagon_A2_xor
    668991494U,	// Hexagon_A2_xorp
    670040070U,	// Hexagon_A2_zxtb
    671088646U,	// Hexagon_A2_zxth
    545333254U,	// Hexagon_A4_andn
    605077510U,	// Hexagon_A4_combineir
    574660614U,	// Hexagon_A4_combineri
    603004934U,	// Hexagon_A4_orn
    562085894U,	// Hexagon_A4_rcmpeq
    562077702U,	// Hexagon_A4_rcmpeqi
    672186374U,	// Hexagon_A4_rcmpneq
    672178182U,	// Hexagon_A4_rcmpneqi
    544210950U,	// Hexagon_C2_all8
    545308678U,	// Hexagon_C2_and
    545316870U,	// Hexagon_C2_andn
    550502406U,	// Hexagon_C2_any8
    562085894U,	// Hexagon_C2_cmpeq
    562077702U,	// Hexagon_C2_cmpeqi
    562085894U,	// Hexagon_C2_cmpeqp
    564133894U,	// Hexagon_C2_cmpgei
    563085318U,	// Hexagon_C2_cmpgeui
    565231622U,	// Hexagon_C2_cmpgt
    565223430U,	// Hexagon_C2_cmpgti
    565231622U,	// Hexagon_C2_cmpgtp
    566280198U,	// Hexagon_C2_cmpgtu
    566272006U,	// Hexagon_C2_cmpgtui
    566280198U,	// Hexagon_C2_cmpgtup
    567279622U,	// Hexagon_C2_cmplt
    673185798U,	// Hexagon_C2_cmpltu
    674234374U,	// Hexagon_C2_mask
    675332102U,	// Hexagon_C2_mux
    675323910U,	// Hexagon_C2_muxii
    675332102U,	// Hexagon_C2_muxir
    675323910U,	// Hexagon_C2_muxri
    611319814U,	// Hexagon_C2_not
    602980358U,	// Hexagon_C2_or
    602988550U,	// Hexagon_C2_orn
    551632902U,	// Hexagon_C2_pxfer_map
    551632902U,	// Hexagon_C2_tfrpr
    551632902U,	// Hexagon_C2_tfrrp
    676331526U,	// Hexagon_C2_vitpack
    677380102U,	// Hexagon_C2_vmux
    668991494U,	// Hexagon_C2_xor
    545390598U,	// Hexagon_C4_and_and
    545390598U,	// Hexagon_C4_and_andn
    545464326U,	// Hexagon_C4_and_or
    545464326U,	// Hexagon_C4_and_orn
    678477830U,	// Hexagon_C4_cmplte
    678469638U,	// Hexagon_C4_cmpltei
    679526406U,	// Hexagon_C4_cmplteu
    679518214U,	// Hexagon_C4_cmplteui
    672186374U,	// Hexagon_C4_cmpneq
    672178182U,	// Hexagon_C4_cmpneqi
    680525830U,	// Hexagon_C4_fastcorner9
    681574406U,	// Hexagon_C4_fastcorner9_not
    603062278U,	// Hexagon_C4_or_and
    603062278U,	// Hexagon_C4_or_andn
    603136006U,	// Hexagon_C4_or_or
    603136006U,	// Hexagon_C4_or_orn
    542162950U,	// Hexagon_M2_acci
    542154758U,	// Hexagon_M2_accii
    682622982U,	// Hexagon_M2_cmaci_s0
    683671558U,	// Hexagon_M2_cmacr_s0
    684867590U,	// Hexagon_M2_cmacs_s0
    684933126U,	// Hexagon_M2_cmacs_s1
    684941318U,	// Hexagon_M2_cmacsc_s0
    684949510U,	// Hexagon_M2_cmacsc_s1
    685768710U,	// Hexagon_M2_cmpyi_s0
    686817286U,	// Hexagon_M2_cmpyr_s0
    688062470U,	// Hexagon_M2_cmpyrs_s0
    688103430U,	// Hexagon_M2_cmpyrs_s1
    688111622U,	// Hexagon_M2_cmpyrsc_s0
    688119814U,	// Hexagon_M2_cmpyrsc_s1
    688013318U,	// Hexagon_M2_cmpys_s0
    688078854U,	// Hexagon_M2_cmpys_s1
    688087046U,	// Hexagon_M2_cmpysc_s0
    688095238U,	// Hexagon_M2_cmpysc_s1
    689061894U,	// Hexagon_M2_cnacs_s0
    689127430U,	// Hexagon_M2_cnacs_s1
    689135622U,	// Hexagon_M2_cnacsc_s0
    689143814U,	// Hexagon_M2_cnacsc_s1
    690012166U,	// Hexagon_M2_dpmpyss_acc_s0
    691060742U,	// Hexagon_M2_dpmpyss_nac_s0
    692109318U,	// Hexagon_M2_dpmpyss_rnd_s0
    692109318U,	// Hexagon_M2_dpmpyss_s0
    693157894U,	// Hexagon_M2_dpmpyuu_acc_s0
    694206470U,	// Hexagon_M2_dpmpyuu_nac_s0
    695255046U,	// Hexagon_M2_dpmpyuu_s0
    692109318U,	// Hexagon_M2_hmmpyh_rs1
    692109318U,	// Hexagon_M2_hmmpyl_rs1
    696303622U,	// Hexagon_M2_maci
    697303046U,	// Hexagon_M2_macsin
    696295430U,	// Hexagon_M2_macsip
    698548230U,	// Hexagon_M2_mmachs_rs0
    698589190U,	// Hexagon_M2_mmachs_rs1
    698499078U,	// Hexagon_M2_mmachs_s0
    698564614U,	// Hexagon_M2_mmachs_s1
    699596806U,	// Hexagon_M2_mmacls_rs0
    699637766U,	// Hexagon_M2_mmacls_rs1
    699547654U,	// Hexagon_M2_mmacls_s0
    699613190U,	// Hexagon_M2_mmacls_s1
    700645382U,	// Hexagon_M2_mmacuhs_rs0
    700686342U,	// Hexagon_M2_mmacuhs_rs1
    700596230U,	// Hexagon_M2_mmacuhs_s0
    700661766U,	// Hexagon_M2_mmacuhs_s1
    701693958U,	// Hexagon_M2_mmaculs_rs0
    701734918U,	// Hexagon_M2_mmaculs_rs1
    701644806U,	// Hexagon_M2_mmaculs_s0
    701710342U,	// Hexagon_M2_mmaculs_s1
    702742534U,	// Hexagon_M2_mmpyh_rs0
    702783494U,	// Hexagon_M2_mmpyh_rs1
    702693382U,	// Hexagon_M2_mmpyh_s0
    702758918U,	// Hexagon_M2_mmpyh_s1
    703791110U,	// Hexagon_M2_mmpyl_rs0
    703832070U,	// Hexagon_M2_mmpyl_rs1
    703741958U,	// Hexagon_M2_mmpyl_s0
    703807494U,	// Hexagon_M2_mmpyl_s1
    704839686U,	// Hexagon_M2_mmpyuh_rs0
    704880646U,	// Hexagon_M2_mmpyuh_rs1
    704790534U,	// Hexagon_M2_mmpyuh_s0
    704856070U,	// Hexagon_M2_mmpyuh_s1
    705888262U,	// Hexagon_M2_mmpyul_rs0
    705929222U,	// Hexagon_M2_mmpyul_rs1
    705839110U,	// Hexagon_M2_mmpyul_s0
    705904646U,	// Hexagon_M2_mmpyul_s1
    690118662U,	// Hexagon_M2_mpy_acc_hh_s0
    690118662U,	// Hexagon_M2_mpy_acc_hh_s1
    690118662U,	// Hexagon_M2_mpy_acc_hl_s0
    690118662U,	// Hexagon_M2_mpy_acc_hl_s1
    690126854U,	// Hexagon_M2_mpy_acc_lh_s0
    690126854U,	// Hexagon_M2_mpy_acc_lh_s1
    690126854U,	// Hexagon_M2_mpy_acc_ll_s0
    690126854U,	// Hexagon_M2_mpy_acc_ll_s1
    690118662U,	// Hexagon_M2_mpy_acc_sat_hh_s0
    690118662U,	// Hexagon_M2_mpy_acc_sat_hh_s1
    690118662U,	// Hexagon_M2_mpy_acc_sat_hl_s0
    690118662U,	// Hexagon_M2_mpy_acc_sat_hl_s1
    690126854U,	// Hexagon_M2_mpy_acc_sat_lh_s0
    690126854U,	// Hexagon_M2_mpy_acc_sat_lh_s1
    690126854U,	// Hexagon_M2_mpy_acc_sat_ll_s0
    690126854U,	// Hexagon_M2_mpy_acc_sat_ll_s1
    692215814U,	// Hexagon_M2_mpy_hh_s0
    692215814U,	// Hexagon_M2_mpy_hh_s1
    692215814U,	// Hexagon_M2_mpy_hl_s0
    692215814U,	// Hexagon_M2_mpy_hl_s1
    692224006U,	// Hexagon_M2_mpy_lh_s0
    692224006U,	// Hexagon_M2_mpy_lh_s1
    692224006U,	// Hexagon_M2_mpy_ll_s0
    692224006U,	// Hexagon_M2_mpy_ll_s1
    691167238U,	// Hexagon_M2_mpy_nac_hh_s0
    691167238U,	// Hexagon_M2_mpy_nac_hh_s1
    691167238U,	// Hexagon_M2_mpy_nac_hl_s0
    691167238U,	// Hexagon_M2_mpy_nac_hl_s1
    691175430U,	// Hexagon_M2_mpy_nac_lh_s0
    691175430U,	// Hexagon_M2_mpy_nac_lh_s1
    691175430U,	// Hexagon_M2_mpy_nac_ll_s0
    691175430U,	// Hexagon_M2_mpy_nac_ll_s1
    691167238U,	// Hexagon_M2_mpy_nac_sat_hh_s0
    691167238U,	// Hexagon_M2_mpy_nac_sat_hh_s1
    691167238U,	// Hexagon_M2_mpy_nac_sat_hl_s0
    691167238U,	// Hexagon_M2_mpy_nac_sat_hl_s1
    691175430U,	// Hexagon_M2_mpy_nac_sat_lh_s0
    691175430U,	// Hexagon_M2_mpy_nac_sat_lh_s1
    691175430U,	// Hexagon_M2_mpy_nac_sat_ll_s0
    691175430U,	// Hexagon_M2_mpy_nac_sat_ll_s1
    692215814U,	// Hexagon_M2_mpy_rnd_hh_s0
    692215814U,	// Hexagon_M2_mpy_rnd_hh_s1
    692215814U,	// Hexagon_M2_mpy_rnd_hl_s0
    692215814U,	// Hexagon_M2_mpy_rnd_hl_s1
    692224006U,	// Hexagon_M2_mpy_rnd_lh_s0
    692224006U,	// Hexagon_M2_mpy_rnd_lh_s1
    692224006U,	// Hexagon_M2_mpy_rnd_ll_s0
    692224006U,	// Hexagon_M2_mpy_rnd_ll_s1
    692215814U,	// Hexagon_M2_mpy_sat_hh_s0
    692215814U,	// Hexagon_M2_mpy_sat_hh_s1
    692215814U,	// Hexagon_M2_mpy_sat_hl_s0
    692215814U,	// Hexagon_M2_mpy_sat_hl_s1
    692224006U,	// Hexagon_M2_mpy_sat_lh_s0
    692224006U,	// Hexagon_M2_mpy_sat_lh_s1
    692224006U,	// Hexagon_M2_mpy_sat_ll_s0
    692224006U,	// Hexagon_M2_mpy_sat_ll_s1
    692215814U,	// Hexagon_M2_mpy_sat_rnd_hh_s0
    692215814U,	// Hexagon_M2_mpy_sat_rnd_hh_s1
    692215814U,	// Hexagon_M2_mpy_sat_rnd_hl_s0
    692215814U,	// Hexagon_M2_mpy_sat_rnd_hl_s1
    692224006U,	// Hexagon_M2_mpy_sat_rnd_lh_s0
    692224006U,	// Hexagon_M2_mpy_sat_rnd_lh_s1
    692224006U,	// Hexagon_M2_mpy_sat_rnd_ll_s0
    692224006U,	// Hexagon_M2_mpy_sat_rnd_ll_s1
    692109318U,	// Hexagon_M2_mpy_up
    690118662U,	// Hexagon_M2_mpyd_acc_hh_s0
    690118662U,	// Hexagon_M2_mpyd_acc_hh_s1
    690118662U,	// Hexagon_M2_mpyd_acc_hl_s0
    690118662U,	// Hexagon_M2_mpyd_acc_hl_s1
    690126854U,	// Hexagon_M2_mpyd_acc_lh_s0
    690126854U,	// Hexagon_M2_mpyd_acc_lh_s1
    690126854U,	// Hexagon_M2_mpyd_acc_ll_s0
    690126854U,	// Hexagon_M2_mpyd_acc_ll_s1
    692215814U,	// Hexagon_M2_mpyd_hh_s0
    692215814U,	// Hexagon_M2_mpyd_hh_s1
    692215814U,	// Hexagon_M2_mpyd_hl_s0
    692215814U,	// Hexagon_M2_mpyd_hl_s1
    692224006U,	// Hexagon_M2_mpyd_lh_s0
    692224006U,	// Hexagon_M2_mpyd_lh_s1
    692224006U,	// Hexagon_M2_mpyd_ll_s0
    692224006U,	// Hexagon_M2_mpyd_ll_s1
    691167238U,	// Hexagon_M2_mpyd_nac_hh_s0
    691167238U,	// Hexagon_M2_mpyd_nac_hh_s1
    691167238U,	// Hexagon_M2_mpyd_nac_hl_s0
    691167238U,	// Hexagon_M2_mpyd_nac_hl_s1
    691175430U,	// Hexagon_M2_mpyd_nac_lh_s0
    691175430U,	// Hexagon_M2_mpyd_nac_lh_s1
    691175430U,	// Hexagon_M2_mpyd_nac_ll_s0
    691175430U,	// Hexagon_M2_mpyd_nac_ll_s1
    692215814U,	// Hexagon_M2_mpyd_rnd_hh_s0
    692215814U,	// Hexagon_M2_mpyd_rnd_hh_s1
    692215814U,	// Hexagon_M2_mpyd_rnd_hl_s0
    692215814U,	// Hexagon_M2_mpyd_rnd_hl_s1
    692224006U,	// Hexagon_M2_mpyd_rnd_lh_s0
    692224006U,	// Hexagon_M2_mpyd_rnd_lh_s1
    692224006U,	// Hexagon_M2_mpyd_rnd_ll_s0
    692224006U,	// Hexagon_M2_mpyd_rnd_ll_s1
    706789382U,	// Hexagon_M2_mpyi
    693264390U,	// Hexagon_M2_mpyu_acc_hh_s0
    693264390U,	// Hexagon_M2_mpyu_acc_hh_s1
    693264390U,	// Hexagon_M2_mpyu_acc_hl_s0
    693264390U,	// Hexagon_M2_mpyu_acc_hl_s1
    693272582U,	// Hexagon_M2_mpyu_acc_lh_s0
    693272582U,	// Hexagon_M2_mpyu_acc_lh_s1
    693272582U,	// Hexagon_M2_mpyu_acc_ll_s0
    693272582U,	// Hexagon_M2_mpyu_acc_ll_s1
    695361542U,	// Hexagon_M2_mpyu_hh_s0
    695361542U,	// Hexagon_M2_mpyu_hh_s1
    695361542U,	// Hexagon_M2_mpyu_hl_s0
    695361542U,	// Hexagon_M2_mpyu_hl_s1
    695369734U,	// Hexagon_M2_mpyu_lh_s0
    695369734U,	// Hexagon_M2_mpyu_lh_s1
    695369734U,	// Hexagon_M2_mpyu_ll_s0
    695369734U,	// Hexagon_M2_mpyu_ll_s1
    694312966U,	// Hexagon_M2_mpyu_nac_hh_s0
    694312966U,	// Hexagon_M2_mpyu_nac_hh_s1
    694312966U,	// Hexagon_M2_mpyu_nac_hl_s0
    694312966U,	// Hexagon_M2_mpyu_nac_hl_s1
    694321158U,	// Hexagon_M2_mpyu_nac_lh_s0
    694321158U,	// Hexagon_M2_mpyu_nac_lh_s1
    694321158U,	// Hexagon_M2_mpyu_nac_ll_s0
    694321158U,	// Hexagon_M2_mpyu_nac_ll_s1
    695255046U,	// Hexagon_M2_mpyu_up
    693264390U,	// Hexagon_M2_mpyud_acc_hh_s0
    693264390U,	// Hexagon_M2_mpyud_acc_hh_s1
    693264390U,	// Hexagon_M2_mpyud_acc_hl_s0
    693264390U,	// Hexagon_M2_mpyud_acc_hl_s1
    693272582U,	// Hexagon_M2_mpyud_acc_lh_s0
    693272582U,	// Hexagon_M2_mpyud_acc_lh_s1
    693272582U,	// Hexagon_M2_mpyud_acc_ll_s0
    693272582U,	// Hexagon_M2_mpyud_acc_ll_s1
    695361542U,	// Hexagon_M2_mpyud_hh_s0
    695361542U,	// Hexagon_M2_mpyud_hh_s1
    695361542U,	// Hexagon_M2_mpyud_hl_s0
    695361542U,	// Hexagon_M2_mpyud_hl_s1
    695369734U,	// Hexagon_M2_mpyud_lh_s0
    695369734U,	// Hexagon_M2_mpyud_lh_s1
    695369734U,	// Hexagon_M2_mpyud_ll_s0
    695369734U,	// Hexagon_M2_mpyud_ll_s1
    694312966U,	// Hexagon_M2_mpyud_nac_hh_s0
    694312966U,	// Hexagon_M2_mpyud_nac_hh_s1
    694312966U,	// Hexagon_M2_mpyud_nac_hl_s0
    694312966U,	// Hexagon_M2_mpyud_nac_hl_s1
    694321158U,	// Hexagon_M2_mpyud_nac_lh_s0
    694321158U,	// Hexagon_M2_mpyud_nac_lh_s1
    694321158U,	// Hexagon_M2_mpyud_nac_ll_s0
    694321158U,	// Hexagon_M2_mpyud_nac_ll_s1
    707788806U,	// Hexagon_M2_mpyui
    708886534U,	// Hexagon_M2_nacci
    708878342U,	// Hexagon_M2_naccii
    709885958U,	// Hexagon_M2_subacc
    710934534U,	// Hexagon_M2_vabsdiffh
    711983110U,	// Hexagon_M2_vabsdiffw
    713031686U,	// Hexagon_M2_vcmac_s0_sat_i
    714080262U,	// Hexagon_M2_vcmac_s0_sat_r
    715276294U,	// Hexagon_M2_vcmpy_s0_sat_i
    716324870U,	// Hexagon_M2_vcmpy_s0_sat_r
    715341830U,	// Hexagon_M2_vcmpy_s1_sat_i
    716390406U,	// Hexagon_M2_vcmpy_s1_sat_r
    717373446U,	// Hexagon_M2_vdmacs_s0
    717438982U,	// Hexagon_M2_vdmacs_s1
    718471174U,	// Hexagon_M2_vdmpyrs_s0
    718512134U,	// Hexagon_M2_vdmpyrs_s1
    718422022U,	// Hexagon_M2_vdmpys_s0
    718487558U,	// Hexagon_M2_vdmpys_s1
    719462406U,	// Hexagon_M2_vmac2
    720510982U,	// Hexagon_M2_vmac2es
    720519174U,	// Hexagon_M2_vmac2es_s0
    720584710U,	// Hexagon_M2_vmac2es_s1
    719470598U,	// Hexagon_M2_vmac2s_s0
    719536134U,	// Hexagon_M2_vmac2s_s1
    721567750U,	// Hexagon_M2_vmpy2es_s0
    721633286U,	// Hexagon_M2_vmpy2es_s1
    722616326U,	// Hexagon_M2_vmpy2s_s0
    722665478U,	// Hexagon_M2_vmpy2s_s0pack
    722681862U,	// Hexagon_M2_vmpy2s_s1
    722706438U,	// Hexagon_M2_vmpy2s_s1pack
    723517446U,	// Hexagon_M2_vradduh
    724705286U,	// Hexagon_M2_vrcmaci_s0
    724828166U,	// Hexagon_M2_vrcmaci_s0c
    725753862U,	// Hexagon_M2_vrcmacr_s0
    725876742U,	// Hexagon_M2_vrcmacr_s0c
    726802438U,	// Hexagon_M2_vrcmpyi_s0
    726925318U,	// Hexagon_M2_vrcmpyi_s0c
    727851014U,	// Hexagon_M2_vrcmpyr_s0
    727973894U,	// Hexagon_M2_vrcmpyr_s0c
    728760326U,	// Hexagon_M2_vrcmpys_acc_s1
    730021894U,	// Hexagon_M2_vrcmpys_s1
    730046470U,	// Hexagon_M2_vrcmpys_s1rp
    730857478U,	// Hexagon_M2_vrmac_s0
    731906054U,	// Hexagon_M2_vrmpy_s0
    732954630U,	// Hexagon_M2_xor_xacc
    732954630U,	// Hexagon_M4_xor_xacc
    537919494U,	// Hexagon_S2_addasl_rrri
    552640518U,	// Hexagon_S2_asl_i_p
    734044166U,	// Hexagon_S2_asl_i_p_acc
    735092742U,	// Hexagon_S2_asl_i_p_and
    736141318U,	// Hexagon_S2_asl_i_p_nac
    737189894U,	// Hexagon_S2_asl_i_p_or
    554737670U,	// Hexagon_S2_asl_i_p_xacc
    552640518U,	// Hexagon_S2_asl_i_r
    734044166U,	// Hexagon_S2_asl_i_r_acc
    735092742U,	// Hexagon_S2_asl_i_r_and
    736141318U,	// Hexagon_S2_asl_i_r_nac
    737189894U,	// Hexagon_S2_asl_i_r_or
    552648710U,	// Hexagon_S2_asl_i_r_sat
    554737670U,	// Hexagon_S2_asl_i_r_xacc
    738197510U,	// Hexagon_S2_asl_i_vh
    739246086U,	// Hexagon_S2_asl_i_vw
    552648710U,	// Hexagon_S2_asl_r_p
    734052358U,	// Hexagon_S2_asl_r_p_acc
    735100934U,	// Hexagon_S2_asl_r_p_and
    736149510U,	// Hexagon_S2_asl_r_p_nac
    737198086U,	// Hexagon_S2_asl_r_p_or
    552648710U,	// Hexagon_S2_asl_r_r
    734052358U,	// Hexagon_S2_asl_r_r_acc
    735100934U,	// Hexagon_S2_asl_r_r_and
    736149510U,	// Hexagon_S2_asl_r_r_nac
    737198086U,	// Hexagon_S2_asl_r_r_or
    552648710U,	// Hexagon_S2_asl_r_r_sat
    738197510U,	// Hexagon_S2_asl_r_vh
    739246086U,	// Hexagon_S2_asl_r_vw
    556834822U,	// Hexagon_S2_asr_i_p
    557883398U,	// Hexagon_S2_asr_i_p_acc
    740335622U,	// Hexagon_S2_asr_i_p_and
    741384198U,	// Hexagon_S2_asr_i_p_nac
    742432774U,	// Hexagon_S2_asr_i_p_or
    556834822U,	// Hexagon_S2_asr_i_r
    557883398U,	// Hexagon_S2_asr_i_r_acc
    740335622U,	// Hexagon_S2_asr_i_r_and
    741384198U,	// Hexagon_S2_asr_i_r_nac
    742432774U,	// Hexagon_S2_asr_i_r_or
    556834822U,	// Hexagon_S2_asr_i_r_rnd
    743440390U,	// Hexagon_S2_asr_i_r_rnd_goodsyntax
    744529926U,	// Hexagon_S2_asr_i_svw_trun
    745537542U,	// Hexagon_S2_asr_i_vh
    744538118U,	// Hexagon_S2_asr_i_vw
    556843014U,	// Hexagon_S2_asr_r_p
    557891590U,	// Hexagon_S2_asr_r_p_acc
    740343814U,	// Hexagon_S2_asr_r_p_and
    741392390U,	// Hexagon_S2_asr_r_p_nac
    742440966U,	// Hexagon_S2_asr_r_p_or
    556843014U,	// Hexagon_S2_asr_r_r
    557891590U,	// Hexagon_S2_asr_r_r_acc
    740343814U,	// Hexagon_S2_asr_r_r_and
    741392390U,	// Hexagon_S2_asr_r_r_nac
    742440966U,	// Hexagon_S2_asr_r_r_or
    556843014U,	// Hexagon_S2_asr_r_r_sat
    744538118U,	// Hexagon_S2_asr_r_svw_trun
    745537542U,	// Hexagon_S2_asr_r_vh
    744538118U,	// Hexagon_S2_asr_r_vw
    746586118U,	// Hexagon_S2_cl0
    746586118U,	// Hexagon_S2_cl0p
    747634694U,	// Hexagon_S2_cl1
    747634694U,	// Hexagon_S2_cl1p
    748683270U,	// Hexagon_S2_clb
    749731846U,	// Hexagon_S2_clbnorm
    748683270U,	// Hexagon_S2_clbp
    750821382U,	// Hexagon_S2_clrbit_i
    750829574U,	// Hexagon_S2_clrbit_r
    751828998U,	// Hexagon_S2_ct0
    752877574U,	// Hexagon_S2_ct1
    753967110U,	// Hexagon_S2_extractu
    753975302U,	// Hexagon_S2_extractu_rp
    753967110U,	// Hexagon_S2_extractup
    753975302U,	// Hexagon_S2_extractup_rp
    754974726U,	// Hexagon_S2_lsl_r_p
    756023302U,	// Hexagon_S2_lsl_r_p_acc
    757071878U,	// Hexagon_S2_lsl_r_p_and
    758120454U,	// Hexagon_S2_lsl_r_p_nac
    759169030U,	// Hexagon_S2_lsl_r_p_or
    754974726U,	// Hexagon_S2_lsl_r_r
    756023302U,	// Hexagon_S2_lsl_r_r_acc
    757071878U,	// Hexagon_S2_lsl_r_r_and
    758120454U,	// Hexagon_S2_lsl_r_r_nac
    759169030U,	// Hexagon_S2_lsl_r_r_or
    760217606U,	// Hexagon_S2_lsl_r_vh
    761266182U,	// Hexagon_S2_lsl_r_vw
    762355718U,	// Hexagon_S2_lsr_i_p
    763404294U,	// Hexagon_S2_lsr_i_p_acc
    764452870U,	// Hexagon_S2_lsr_i_p_and
    765501446U,	// Hexagon_S2_lsr_i_p_nac
    766550022U,	// Hexagon_S2_lsr_i_p_or
    767598598U,	// Hexagon_S2_lsr_i_p_xacc
    762355718U,	// Hexagon_S2_lsr_i_r
    763404294U,	// Hexagon_S2_lsr_i_r_acc
    764452870U,	// Hexagon_S2_lsr_i_r_and
    765501446U,	// Hexagon_S2_lsr_i_r_nac
    766550022U,	// Hexagon_S2_lsr_i_r_or
    767598598U,	// Hexagon_S2_lsr_i_r_xacc
    768606214U,	// Hexagon_S2_lsr_i_vh
    769654790U,	// Hexagon_S2_lsr_i_vw
    762363910U,	// Hexagon_S2_lsr_r_p
    763412486U,	// Hexagon_S2_lsr_r_p_acc
    764461062U,	// Hexagon_S2_lsr_r_p_and
    765509638U,	// Hexagon_S2_lsr_r_p_nac
    766558214U,	// Hexagon_S2_lsr_r_p_or
    762363910U,	// Hexagon_S2_lsr_r_r
    763412486U,	// Hexagon_S2_lsr_r_r_acc
    764461062U,	// Hexagon_S2_lsr_r_r_and
    765509638U,	// Hexagon_S2_lsr_r_r_nac
    766558214U,	// Hexagon_S2_lsr_r_r_or
    768606214U,	// Hexagon_S2_lsr_r_vh
    769654790U,	// Hexagon_S2_lsr_r_vw
    770703366U,	// Hexagon_S2_packhl
    771751942U,	// Hexagon_S2_parityp
    772841478U,	// Hexagon_S2_setbit_i
    772849670U,	// Hexagon_S2_setbit_r
    773849094U,	// Hexagon_S2_shuffeb
    774897670U,	// Hexagon_S2_shuffeh
    775946246U,	// Hexagon_S2_shuffob
    776994822U,	// Hexagon_S2_shuffoh
    778043398U,	// Hexagon_S2_svsathb
    779091974U,	// Hexagon_S2_svsathub
    780181510U,	// Hexagon_S2_togglebit_i
    780189702U,	// Hexagon_S2_togglebit_r
    781230086U,	// Hexagon_S2_tstbit_i
    781238278U,	// Hexagon_S2_tstbit_r
    782278662U,	// Hexagon_S2_valignib
    782286854U,	// Hexagon_S2_valignrb
    783286278U,	// Hexagon_S2_vcrotate
    784474118U,	// Hexagon_S2_vrndpackwh
    784482310U,	// Hexagon_S2_vrndpackwhs
    778043398U,	// Hexagon_S2_vsathb
    778043398U,	// Hexagon_S2_vsathb_nopack
    779091974U,	// Hexagon_S2_vsathub
    779091974U,	// Hexagon_S2_vsathub_nopack
    785383430U,	// Hexagon_S2_vsatwh
    785383430U,	// Hexagon_S2_vsatwh_nopack
    786432006U,	// Hexagon_S2_vsatwuh
    786432006U,	// Hexagon_S2_vsatwuh_nopack
    787480582U,	// Hexagon_S2_vsplatrb
    788529158U,	// Hexagon_S2_vsplatrh
    789577734U,	// Hexagon_S2_vsxtbh
    790626310U,	// Hexagon_S2_vsxthw
    791674886U,	// Hexagon_S2_vtrunehb
    792723462U,	// Hexagon_S2_vtrunewh
    793772038U,	// Hexagon_S2_vtrunohb
    794820614U,	// Hexagon_S2_vtrunowh
    795869190U,	// Hexagon_S2_vzxtbh
    796917766U,	// Hexagon_S2_vzxthw
    536870918U,	// Hexagon_S4_addaddi
    545333254U,	// Hexagon_S4_andnp
    603004934U,	// Hexagon_S4_ornp
    536870918U,	// Hexagon_S4_subaddi
    560988167U,	// JMP
    222U,	// JMPR
    797966363U,	// JMPR_cNotPnewNt
    799014939U,	// JMPR_cNotPnewt
    800063515U,	// JMPR_cNotPt
    797966410U,	// JMPR_cPnewNt
    799014986U,	// JMPR_cPnewt
    800063562U,	// JMPR_cPt
    801382504U,	// JMP_EQriNotPnt_ie_nv_V4
    801382504U,	// JMP_EQriNotPnt_nv_V4
    801390696U,	// JMP_EQriNotPntneg_ie_nv_V4
    801390696U,	// JMP_EQriNotPntneg_nv_V4
    801382504U,	// JMP_EQriNotPt_ie_nv_V4
    801382504U,	// JMP_EQriNotPt_nv_V4
    801390696U,	// JMP_EQriNotPtneg_ie_nv_V4
    801390696U,	// JMP_EQriNotPtneg_nv_V4
    801382517U,	// JMP_EQriPnt_ie_nv_V4
    801382517U,	// JMP_EQriPnt_nv_V4
    801390709U,	// JMP_EQriPntneg_ie_nv_V4
    801390709U,	// JMP_EQriPntneg_nv_V4
    801382517U,	// JMP_EQriPt_ie_nv_V4
    801382517U,	// JMP_EQriPt_nv_V4
    801390709U,	// JMP_EQriPtneg_ie_nv_V4
    801390709U,	// JMP_EQriPtneg_nv_V4
    802447464U,	// JMP_EQrrNotPnt_ie_nv_V4
    802447464U,	// JMP_EQrrNotPnt_nv_V4
    802455656U,	// JMP_EQrrNotPt_ie_nv_V4
    802455656U,	// JMP_EQrrNotPt_nv_V4
    802447477U,	// JMP_EQrrPnt_ie_nv_V4
    802447477U,	// JMP_EQrrPnt_nv_V4
    802455669U,	// JMP_EQrrPt_ie_nv_V4
    802455669U,	// JMP_EQrrPt_nv_V4
    801382579U,	// JMP_GTUriNotPnt_ie_nv_V4
    801382579U,	// JMP_GTUriNotPnt_nv_V4
    801382579U,	// JMP_GTUriNotPt_ie_nv_V4
    801382579U,	// JMP_GTUriNotPt_nv_V4
    801382593U,	// JMP_GTUriPnt_ie_nv_V4
    801382593U,	// JMP_GTUriPnt_nv_V4
    801382593U,	// JMP_GTUriPt_ie_nv_V4
    801382593U,	// JMP_GTUriPt_nv_V4
    802447539U,	// JMP_GTUrrNotPnt_ie_nv_V4
    802447539U,	// JMP_GTUrrNotPnt_nv_V4
    802455731U,	// JMP_GTUrrNotPt_ie_nv_V4
    802455731U,	// JMP_GTUrrNotPt_nv_V4
    802447553U,	// JMP_GTUrrPnt_ie_nv_V4
    802447553U,	// JMP_GTUrrPnt_nv_V4
    802455745U,	// JMP_GTUrrPt_ie_nv_V4
    802455745U,	// JMP_GTUrrPt_nv_V4
    803512499U,	// JMP_GTUrrdnNotPnt_ie_nv_V4
    803512499U,	// JMP_GTUrrdnNotPnt_nv_V4
    803520691U,	// JMP_GTUrrdnNotPt_ie_nv_V4
    803520691U,	// JMP_GTUrrdnNotPt_nv_V4
    803512513U,	// JMP_GTUrrdnPnt_ie_nv_V4
    803512513U,	// JMP_GTUrrdnPnt_nv_V4
    803520705U,	// JMP_GTUrrdnPt_ie_nv_V4
    803520705U,	// JMP_GTUrrdnPt_nv_V4
    801382529U,	// JMP_GTriNotPnt_ie_nv_V4
    801382529U,	// JMP_GTriNotPnt_nv_V4
    801390721U,	// JMP_GTriNotPntneg_ie_nv_V4
    801390721U,	// JMP_GTriNotPntneg_nv_V4
    801382529U,	// JMP_GTriNotPt_ie_nv_V4
    801382529U,	// JMP_GTriNotPt_nv_V4
    801390721U,	// JMP_GTriNotPtneg_ie_nv_V4
    801390721U,	// JMP_GTriNotPtneg_nv_V4
    801382542U,	// JMP_GTriPnt_ie_nv_V4
    801382542U,	// JMP_GTriPnt_nv_V4
    801390734U,	// JMP_GTriPntneg_ie_nv_V4
    801390734U,	// JMP_GTriPntneg_nv_V4
    801382542U,	// JMP_GTriPt_ie_nv_V4
    801382542U,	// JMP_GTriPt_nv_V4
    801390734U,	// JMP_GTriPtneg_ie_nv_V4
    801390734U,	// JMP_GTriPtneg_nv_V4
    802447489U,	// JMP_GTrrNotPnt_ie_nv_V4
    802447489U,	// JMP_GTrrNotPnt_nv_V4
    802455681U,	// JMP_GTrrNotPt_ie_nv_V4
    802455681U,	// JMP_GTrrNotPt_nv_V4
    802447502U,	// JMP_GTrrPnt_ie_nv_V4
    802447502U,	// JMP_GTrrPnt_nv_V4
    802455694U,	// JMP_GTrrPt_ie_nv_V4
    802455694U,	// JMP_GTrrPt_nv_V4
    803512449U,	// JMP_GTrrdnNotPnt_ie_nv_V4
    803512449U,	// JMP_GTrrdnNotPnt_nv_V4
    803520641U,	// JMP_GTrrdnNotPt_ie_nv_V4
    803520641U,	// JMP_GTrrdnNotPt_nv_V4
    803512462U,	// JMP_GTrrdnPnt_ie_nv_V4
    803512462U,	// JMP_GTrrdnPnt_nv_V4
    803520654U,	// JMP_GTrrdnPt_ie_nv_V4
    803520654U,	// JMP_GTrrdnPt_nv_V4
    801382554U,	// JMP_TSTBITr0NotPnt_ie_nv_V4
    801382554U,	// JMP_TSTBITr0NotPnt_nv_V4
    801382554U,	// JMP_TSTBITr0NotPt_ie_nv_V4
    801382554U,	// JMP_TSTBITr0NotPt_nv_V4
    801382567U,	// JMP_TSTBITr0Pnt_ie_nv_V4
    801382567U,	// JMP_TSTBITr0Pnt_nv_V4
    801382567U,	// JMP_TSTBITr0Pt_ie_nv_V4
    801382567U,	// JMP_TSTBITr0Pt_nv_V4
    559939658U,	// JMP_c
    559939611U,	// JMP_cNot
    804257819U,	// JMP_cdnNotPnt
    805306395U,	// JMP_cdnNotPt
    804257866U,	// JMP_cdnPnt
    805306442U,	// JMP_cdnPt
    806494214U,	// LDb_GP
    807542790U,	// LDd_GP
    808591366U,	// LDh_GP
    809820166U,	// LDrib
    806682630U,	// LDrib_GP
    809820166U,	// LDrib_ae
    810885126U,	// LDrib_ae_indexed
    1076183067U,	// LDrib_cNotPt
    1076183114U,	// LDrib_cPt
    1077231643U,	// LDrib_cdnNotPt
    1077231690U,	// LDrib_cdnPt
    810885126U,	// LDrib_indexed
    810876934U,	// LDrib_indexed_V4
    1076183067U,	// LDrib_indexed_cNotPt
    1076191259U,	// LDrib_indexed_cNotPt_V4
    1076183114U,	// LDrib_indexed_cPt
    1076191306U,	// LDrib_indexed_cPt_V4
    1077231643U,	// LDrib_indexed_cdnNotPt
    1077239835U,	// LDrib_indexed_cdnNotPt_V4
    1077231690U,	// LDrib_indexed_cdnPt
    1077239882U,	// LDrib_indexed_cdnPt_V4
    810876934U,	// LDrib_indexed_shl_V4
    1076191259U,	// LDrib_indexed_shl_cNotPt_V4
    1076191306U,	// LDrib_indexed_shl_cPt_V4
    1077239835U,	// LDrib_indexed_shl_cdnNotPt_V4
    1077239882U,	// LDrib_indexed_shl_cdnPt_V4
    811917318U,	// LDrid
    807731206U,	// LDrid_GP
    1076199451U,	// LDrid_cNotPt
    1076199498U,	// LDrid_cPt
    1077248027U,	// LDrid_cdnNotPt
    1077248074U,	// LDrid_cdnPt
    812982278U,	// LDrid_indexed
    812974086U,	// LDrid_indexed_V4
    1076207643U,	// LDrid_indexed_cNotPt
    1076207643U,	// LDrid_indexed_cNotPt_V4
    1076207690U,	// LDrid_indexed_cPt
    1076207690U,	// LDrid_indexed_cPt_V4
    1077256219U,	// LDrid_indexed_cdnNotPt
    1077256219U,	// LDrid_indexed_cdnNotPt_V4
    1077256266U,	// LDrid_indexed_cdnPt
    1077256266U,	// LDrid_indexed_cdnPt_V4
    812974086U,	// LDrid_indexed_shl_V4
    1076207643U,	// LDrid_indexed_shl_cNotPt_V4
    1076207690U,	// LDrid_indexed_shl_cPt_V4
    1077256219U,	// LDrid_indexed_shl_cdnNotPt_V4
    1077256266U,	// LDrid_indexed_shl_cdnPt_V4
    814014470U,	// LDrih
    808779782U,	// LDrih_GP
    814014470U,	// LDrih_ae
    815079430U,	// LDrih_ae_indexed
    1076215835U,	// LDrih_cNotPt
    1076215882U,	// LDrih_cPt
    1077264411U,	// LDrih_cdnNotPt
    1077264458U,	// LDrih_cdnPt
    815079430U,	// LDrih_indexed
    815071238U,	// LDrih_indexed_V4
    1076215835U,	// LDrih_indexed_cNotPt
    1076224027U,	// LDrih_indexed_cNotPt_V4
    1076215882U,	// LDrih_indexed_cPt
    1076224074U,	// LDrih_indexed_cPt_V4
    1077264411U,	// LDrih_indexed_cdnNotPt
    1077272603U,	// LDrih_indexed_cdnNotPt_V4
    1077264458U,	// LDrih_indexed_cdnPt
    1077272650U,	// LDrih_indexed_cdnPt_V4
    815071238U,	// LDrih_indexed_shl_V4
    1076224027U,	// LDrih_indexed_shl_cNotPt_V4
    1076224074U,	// LDrih_indexed_shl_cPt_V4
    1077272603U,	// LDrih_indexed_shl_cdnNotPt_V4
    1077272650U,	// LDrih_indexed_shl_cdnPt_V4
    816111622U,	// LDriub
    817168390U,	// LDriub_GP
    816111622U,	// LDriub_ae
    818225158U,	// LDriub_ae_indexed
    818216966U,	// LDriub_ae_indexed_V4
    818216966U,	// LDriub_ae_indexed_shl_V4
    1076232219U,	// LDriub_cNotPt
    1076232266U,	// LDriub_cPt
    1077280795U,	// LDriub_cdnNotPt
    1077280842U,	// LDriub_cdnPt
    818225158U,	// LDriub_indexed
    818216966U,	// LDriub_indexed_V4
    1076232219U,	// LDriub_indexed_cNotPt
    1076240411U,	// LDriub_indexed_cNotPt_V4
    1076232266U,	// LDriub_indexed_cPt
    1076240458U,	// LDriub_indexed_cPt_V4
    1077280795U,	// LDriub_indexed_cdnNotPt
    1077288987U,	// LDriub_indexed_cdnNotPt_V4
    1077280842U,	// LDriub_indexed_cdnPt
    1077289034U,	// LDriub_indexed_cdnPt_V4
    818216966U,	// LDriub_indexed_shl_V4
    1076240411U,	// LDriub_indexed_shl_cNotPt_V4
    1076240458U,	// LDriub_indexed_shl_cPt_V4
    1077288987U,	// LDriub_indexed_shl_cdnNotPt_V4
    1077289034U,	// LDriub_indexed_shl_cdnPt_V4
    816111622U,	// LDriubit
    818225158U,	// LDriubit_indexed
    819257350U,	// LDriuh
    820314118U,	// LDriuh_GP
    819257350U,	// LDriuh_ae
    821370886U,	// LDriuh_ae_indexed
    821362694U,	// LDriuh_ae_indexed_V4
    821362694U,	// LDriuh_ae_indexed_shl_V4
    1076248603U,	// LDriuh_cNotPt
    1076248650U,	// LDriuh_cPt
    1077297179U,	// LDriuh_cdnNotPt
    1077297226U,	// LDriuh_cdnPt
    821370886U,	// LDriuh_indexed
    821362694U,	// LDriuh_indexed_V4
    1076248603U,	// LDriuh_indexed_cNotPt
    1076256795U,	// LDriuh_indexed_cNotPt_V4
    1076248650U,	// LDriuh_indexed_cPt
    1076256842U,	// LDriuh_indexed_cPt_V4
    1077297179U,	// LDriuh_indexed_cdnNotPt
    1077305371U,	// LDriuh_indexed_cdnNotPt_V4
    1077297226U,	// LDriuh_indexed_cdnPt
    1077305418U,	// LDriuh_indexed_cdnPt_V4
    821362694U,	// LDriuh_indexed_shl_V4
    1076256795U,	// LDriuh_indexed_shl_cNotPt_V4
    1076256842U,	// LDriuh_indexed_shl_cPt_V4
    1077305371U,	// LDriuh_indexed_shl_cdnNotPt_V4
    1077305418U,	// LDriuh_indexed_shl_cdnPt_V4
    822403078U,	// LDriw
    823459846U,	// LDriw_GP
    1076264987U,	// LDriw_cNotPt
    1076265034U,	// LDriw_cPt
    1077313563U,	// LDriw_cdnNotPt
    1077313610U,	// LDriw_cdnPt
    824516614U,	// LDriw_indexed
    824508422U,	// LDriw_indexed_V4
    1076273179U,	// LDriw_indexed_cNotPt
    1076273179U,	// LDriw_indexed_cNotPt_V4
    1076273226U,	// LDriw_indexed_cPt
    1076273226U,	// LDriw_indexed_cPt_V4
    1077321755U,	// LDriw_indexed_cdnNotPt
    1077321755U,	// LDriw_indexed_cdnNotPt_V4
    1077321802U,	// LDriw_indexed_cdnPt
    1077321802U,	// LDriw_indexed_cdnPt_V4
    824508422U,	// LDriw_indexed_shl_V4
    1076273179U,	// LDriw_indexed_shl_cNotPt_V4
    1076273226U,	// LDriw_indexed_shl_cPt_V4
    1077321755U,	// LDriw_indexed_shl_cdnNotPt_V4
    1077321802U,	// LDriw_indexed_shl_cdnPt_V4
    313U,	// LDriw_pred
    816979974U,	// LDub_GP
    820125702U,	// LDuh_GP
    823271430U,	// LDw_GP
    825229391U,	// LOOP0_i
    803348559U,	// LOOP0_r
    754974726U,	// LSLd
    826277894U,	// LSLd_rr_xor_V4
    827326470U,	// LSLi_V4
    762355718U,	// LSR_ri
    762363910U,	// LSR_rr
    762355718U,	// LSRd_ri
    763404294U,	// LSRd_ri_acc
    762363910U,	// LSRd_rr
    767606790U,	// LSRd_rr_xor_V4
    674234374U,	// MASK_p
    606519302U,	// MAXw_dd
    606519302U,	// MAXw_rr
    313U,	// MEMb_ADDSUBi_MEM_V4
    313U,	// MEMb_ADDSUBi_indexed_MEM_V4
    1902567510U,	// MEMb_ADDi_MEM_V4
    829882454U,	// MEMb_ADDi_indexed_MEM_V4
    1902559318U,	// MEMb_ADDr_MEM_V4
    829882454U,	// MEMb_ADDr_indexed_MEM_V4
    1904214102U,	// MEMb_ANDr_MEM_V4
    829882454U,	// MEMb_ANDr_indexed_MEM_V4
    1905262678U,	// MEMb_ORr_MEM_V4
    829890646U,	// MEMb_ORr_indexed_MEM_V4
    1906761814U,	// MEMb_SUBi_MEM_V4
    829898838U,	// MEMb_SUBi_indexed_MEM_V4
    1906753622U,	// MEMb_SUBr_MEM_V4
    829898838U,	// MEMb_SUBr_indexed_MEM_V4
    313U,	// MEMh_ADDSUBi_MEM_V4
    313U,	// MEMh_ADDSUBi_indexed_MEM_V4
    1902567522U,	// MEMh_ADDi_MEM_V4
    829882466U,	// MEMh_ADDi_indexed_MEM_V4
    1902559330U,	// MEMh_ADDr_MEM_V4
    829882466U,	// MEMh_ADDr_indexed_MEM_V4
    1904214114U,	// MEMh_ANDr_MEM_V4
    829882466U,	// MEMh_ANDr_indexed_MEM_V4
    1905262690U,	// MEMh_ORr_MEM_V4
    829890658U,	// MEMh_ORr_indexed_MEM_V4
    1906761826U,	// MEMh_SUBi_MEM_V4
    829898850U,	// MEMh_SUBi_indexed_MEM_V4
    1906753634U,	// MEMh_SUBr_MEM_V4
    829898850U,	// MEMh_SUBr_indexed_MEM_V4
    313U,	// MEMw_ADDSUBi_MEM_V4
    313U,	// MEMw_ADDSUBi_indexed_MEM_V4
    1902567630U,	// MEMw_ADDi_MEM_V4
    829882574U,	// MEMw_ADDi_indexed_MEM_V4
    1902559438U,	// MEMw_ADDr_MEM_V4
    829882574U,	// MEMw_ADDr_indexed_MEM_V4
    1904214222U,	// MEMw_ANDr_MEM_V4
    829882574U,	// MEMw_ANDr_indexed_MEM_V4
    1905262798U,	// MEMw_ORr_MEM_V4
    829890766U,	// MEMw_ORr_indexed_MEM_V4
    1906761934U,	// MEMw_SUBi_MEM_V4
    829898958U,	// MEMw_SUBi_indexed_MEM_V4
    1906753742U,	// MEMw_SUBr_MEM_V4
    829898958U,	// MEMw_SUBr_indexed_MEM_V4
    608616454U,	// MINw_dd
    608616454U,	// MINw_rr
    692109318U,	// MPY
    692109318U,	// MPY64
    690012166U,	// MPY64_acc
    691060742U,	// MPY64_sub
    706789382U,	// MPYI
    696295430U,	// MPYI_acc_ri
    696303622U,	// MPYI_acc_rr
    706781190U,	// MPYI_ri
    833617926U,	// MPYI_rin
    834666502U,	// MPYI_riu
    697303046U,	// MPYI_sub_ri
    695255046U,	// MPYU
    695255046U,	// MPYU64
    693157894U,	// MPYU64_acc
    693157894U,	// MPYU64_sub
    692109318U,	// MPY_trsext
    675323910U,	// MUX_ii
    675323910U,	// MUX_ir
    675332102U,	// MUX_ri
    675332102U,	// MUX_rr
    610410502U,	// NEG
    301U,	// NOP
    611319814U,	// NOT_p
    611319814U,	// NOT_rr
    611319814U,	// NOT_rr64
    602980358U,	// OR_pp
    602972166U,	// OR_ri
    602980358U,	// OR_rr
    602980358U,	// OR_rr64
    1076322331U,	// OR_rr_cNotPt
    1076322378U,	// OR_rr_cPt
    1077370907U,	// OR_rr_cdnNotPt
    1077370954U,	// OR_rr_cdnPt
    603004934U,	// ORd_NOTd_V4
    835731462U,	// ORi_ASLri_V4
    835739654U,	// ORi_LSRri_V4
    587276294U,	// ORr_ANDr_NOTr_V4
    587243526U,	// ORr_ANDri2_V4
    603062278U,	// ORr_ANDri_V4
    587251718U,	// ORr_ANDrr_V4
    588292102U,	// ORr_ORri_V4
    588300294U,	// ORr_ORrr_V4
    589299718U,	// ORr_XORrr_V4
    809943046U,	// POST_LDrib
    2149924891U,	// POST_LDrib_cNotPt
    2149924938U,	// POST_LDrib_cPt
    2150973467U,	// POST_LDrib_cdnNotPt_V4
    2150973514U,	// POST_LDrib_cdnPt_V4
    812040198U,	// POST_LDrid
    2149941275U,	// POST_LDrid_cNotPt
    2149941322U,	// POST_LDrid_cPt
    2150989851U,	// POST_LDrid_cdnNotPt_V4
    2150989898U,	// POST_LDrid_cdnPt_V4
    814137350U,	// POST_LDrih
    2149957659U,	// POST_LDrih_cNotPt
    2149957706U,	// POST_LDrih_cPt
    2151006235U,	// POST_LDrih_cdnNotPt_V4
    2151006282U,	// POST_LDrih_cdnPt_V4
    816234502U,	// POST_LDriub
    2149974043U,	// POST_LDriub_cNotPt
    2149974090U,	// POST_LDriub_cPt
    2151022619U,	// POST_LDriub_cdnNotPt_V4
    2151022666U,	// POST_LDriub_cdnPt_V4
    819380230U,	// POST_LDriuh
    2149990427U,	// POST_LDriuh_cNotPt
    2149990474U,	// POST_LDriuh_cPt
    2151039003U,	// POST_LDriuh_cdnNotPt_V4
    2151039050U,	// POST_LDriuh_cdnPt_V4
    822525958U,	// POST_LDriw
    2150006811U,	// POST_LDriw_cNotPt
    2150006858U,	// POST_LDriw_cPt
    2151055387U,	// POST_LDriw_cdnNotPt_V4
    2151055434U,	// POST_LDriw_cdnPt_V4
    2447458390U,	// POST_STbri
    1375174683U,	// POST_STbri_cNotPt
    1375174683U,	// POST_STbri_cNotPt_nv_V4
    1375174730U,	// POST_STbri_cPt
    1375174730U,	// POST_STbri_cPt_nv_V4
    1376223259U,	// POST_STbri_cdnNotPt_V4
    1376223259U,	// POST_STbri_cdnNotPt_nv_V4
    1376223306U,	// POST_STbri_cdnPt_V4
    1376223306U,	// POST_STbri_cdnPt_nv_V4
    2447876182U,	// POST_STbri_nv_V4
    2447458396U,	// POST_STdri
    1377271835U,	// POST_STdri_cNotPt
    1377271882U,	// POST_STdri_cPt
    1378320411U,	// POST_STdri_cdnNotPt_V4
    1378320458U,	// POST_STdri_cdnPt_V4
    2447458402U,	// POST_SThri
    1379368987U,	// POST_SThri_cNotPt
    1379368987U,	// POST_SThri_cNotPt_nv_V4
    1379369034U,	// POST_SThri_cPt
    1379369034U,	// POST_SThri_cPt_nv_V4
    1380417563U,	// POST_SThri_cdnNotPt_V4
    1380417563U,	// POST_SThri_cdnNotPt_nv_V4
    1380417610U,	// POST_SThri_cdnPt_V4
    1380417610U,	// POST_SThri_cdnPt_nv_V4
    2447876194U,	// POST_SThri_nv_V4
    2447458510U,	// POST_STwri
    1381466139U,	// POST_STwri_cNotPt
    1381466139U,	// POST_STwri_cNotPt_nv_V4
    1381466186U,	// POST_STwri_cPt
    1381466186U,	// POST_STwri_cPt_nv_V4
    1382514715U,	// POST_STwri_cdnNotPt_V4
    1382514715U,	// POST_STwri_cdnNotPt_nv_V4
    1382514762U,	// POST_STwri_cdnPt_V4
    1382514762U,	// POST_STwri_cdnPt_nv_V4
    2447876302U,	// POST_STwri_nv_V4
    555745286U,	// SI_to_SXTHI_asrh
    2993684513U,	// STb_GP
    2993684540U,	// STh_GP
    1920385110U,	// STrib
    2995003425U,	// STrib_GP
    2995003425U,	// STrib_GP_nv_V4
    838131739U,	// STrib_cNotPt
    838131739U,	// STrib_cNotPt_nv_V4
    838131786U,	// STrib_cPt
    838131786U,	// STrib_cPt_nv_V4
    839180315U,	// STrib_cdnNotPt_V4
    839180315U,	// STrib_cdnNotPt_nv_V4
    839180362U,	// STrib_cdnPt_V4
    839180362U,	// STrib_cdnPt_nv_V4
    829931606U,	// STrib_imm_V4
    837812251U,	// STrib_imm_cNotPt_V4
    837812298U,	// STrib_imm_cPt_V4
    838860827U,	// STrib_imm_cdnNotPt_V4
    838860874U,	// STrib_imm_cdnPt_V4
    829939798U,	// STrib_indexed
    837812251U,	// STrib_indexed_cNotPt
    837812251U,	// STrib_indexed_cNotPt_nv_V4
    837812298U,	// STrib_indexed_cPt
    837812298U,	// STrib_indexed_cPt_nv_V4
    838860827U,	// STrib_indexed_cdnNotPt_V4
    838860827U,	// STrib_indexed_cdnNotPt_nv_V4
    838860874U,	// STrib_indexed_cdnPt_V4
    838860874U,	// STrib_indexed_cdnPt_nv_V4
    829939798U,	// STrib_indexed_nv_V4
    847249494U,	// STrib_indexed_shl_V4
    837812251U,	// STrib_indexed_shl_cNotPt_V4
    837812251U,	// STrib_indexed_shl_cNotPt_nv_V4
    837812298U,	// STrib_indexed_shl_cPt_V4
    837812298U,	// STrib_indexed_shl_cPt_nv_V4
    838860827U,	// STrib_indexed_shl_cdnNotPt_V4
    838860827U,	// STrib_indexed_shl_cdnNotPt_nv_V4
    838860874U,	// STrib_indexed_shl_cdnPt_V4
    838860874U,	// STrib_indexed_shl_cdnPt_nv_V4
    847249494U,	// STrib_indexed_shl_nv_V4
    1920385110U,	// STrib_nv_V4
    848379990U,	// STrib_shl_V4
    848797782U,	// STrib_shl_nv_V4
    1920385116U,	// STrid
    2995003432U,	// STrid_GP
    840228891U,	// STrid_cNotPt
    840228938U,	// STrid_cPt
    841277467U,	// STrid_cdnNotPt_V4
    841277514U,	// STrid_cdnPt_V4
    829939804U,	// STrid_indexed
    839909403U,	// STrid_indexed_cNotPt
    839909450U,	// STrid_indexed_cPt
    840957979U,	// STrid_indexed_cdnNotPt_V4
    840958026U,	// STrid_indexed_cdnPt_V4
    847249500U,	// STrid_indexed_shl_V4
    839909403U,	// STrid_indexed_shl_cNotPt_V4
    839909450U,	// STrid_indexed_shl_cPt_V4
    840957979U,	// STrid_indexed_shl_cdnNotPt_V4
    839909450U,	// STrid_indexed_shl_cdnPt_V4
    848379996U,	// STrid_shl_V4
    1920385122U,	// STrih
    2995003452U,	// STrih_GP
    2995003452U,	// STrih_GP_nv_V4
    842326043U,	// STrih_cNotPt
    842326043U,	// STrih_cNotPt_nv_V4
    842326090U,	// STrih_cPt
    842326090U,	// STrih_cPt_nv_V4
    843374619U,	// STrih_cdnNotPt_V4
    843374619U,	// STrih_cdnNotPt_nv_V4
    843374666U,	// STrih_cdnPt_V4
    843374666U,	// STrih_cdnPt_nv_V4
    829931618U,	// STrih_imm_V4
    842006555U,	// STrih_imm_cNotPt_V4
    842006602U,	// STrih_imm_cPt_V4
    843055131U,	// STrih_imm_cdnNotPt_V4
    843055178U,	// STrih_imm_cdnPt_V4
    829939810U,	// STrih_indexed
    842006555U,	// STrih_indexed_cNotPt
    842006555U,	// STrih_indexed_cNotPt_nv_V4
    842006602U,	// STrih_indexed_cPt
    842006602U,	// STrih_indexed_cPt_nv_V4
    843055131U,	// STrih_indexed_cdnNotPt_V4
    843055131U,	// STrih_indexed_cdnNotPt_nv_V4
    843055178U,	// STrih_indexed_cdnPt_V4
    843055178U,	// STrih_indexed_cdnPt_nv_V4
    829939810U,	// STrih_indexed_nv_V4
    847249506U,	// STrih_indexed_shl_V4
    842006555U,	// STrih_indexed_shl_cNotPt_V4
    842006555U,	// STrih_indexed_shl_cNotPt_nv_V4
    842006602U,	// STrih_indexed_shl_cPt_V4
    842006602U,	// STrih_indexed_shl_cPt_nv_V4
    843055131U,	// STrih_indexed_shl_cdnNotPt_V4
    843055131U,	// STrih_indexed_shl_cdnNotPt_nv_V4
    843055178U,	// STrih_indexed_shl_cdnPt_V4
    843055178U,	// STrih_indexed_shl_cdnPt_nv_V4
    847249506U,	// STrih_indexed_shl_nv_V4
    1920385122U,	// STrih_nv_V4
    848380002U,	// STrih_shl_V4
    848797794U,	// STrih_shl_nv_V4
    1920385230U,	// STriw
    2995003459U,	// STriw_GP
    2995003459U,	// STriw_GP_nv_V4
    844423195U,	// STriw_cNotPt
    844423195U,	// STriw_cNotPt_nv_V4
    844423242U,	// STriw_cPt
    844423242U,	// STriw_cPt_nv_V4
    845471771U,	// STriw_cdnNotPt_V4
    845471771U,	// STriw_cdnNotPt_nv_V4
    845471818U,	// STriw_cdnPt_V4
    845471818U,	// STriw_cdnPt_nv_V4
    829931726U,	// STriw_imm_V4
    844103707U,	// STriw_imm_cNotPt_V4
    844103754U,	// STriw_imm_cPt_V4
    845152283U,	// STriw_imm_cdnNotPt_V4
    845152330U,	// STriw_imm_cdnPt_V4
    829939918U,	// STriw_indexed
    844103707U,	// STriw_indexed_cNotPt
    844103707U,	// STriw_indexed_cNotPt_nv_V4
    844103754U,	// STriw_indexed_cPt
    844103754U,	// STriw_indexed_cPt_nv_V4
    845152283U,	// STriw_indexed_cdnNotPt_V4
    845152283U,	// STriw_indexed_cdnNotPt_nv_V4
    845152330U,	// STriw_indexed_cdnPt_V4
    845152330U,	// STriw_indexed_cdnPt_nv_V4
    829939918U,	// STriw_indexed_nv_V4
    847249614U,	// STriw_indexed_shl_V4
    844103707U,	// STriw_indexed_shl_cNotPt_V4
    844103707U,	// STriw_indexed_shl_cNotPt_nv_V4
    844103754U,	// STriw_indexed_shl_cPt_V4
    844103754U,	// STriw_indexed_shl_cPt_nv_V4
    845152283U,	// STriw_indexed_shl_cdnNotPt_V4
    845152283U,	// STriw_indexed_shl_cdnNotPt_nv_V4
    845152330U,	// STriw_indexed_shl_cdnPt_V4
    845152330U,	// STriw_indexed_shl_cdnPt_nv_V4
    847249614U,	// STriw_indexed_shl_nv_V4
    1920385230U,	// STriw_nv_V4
    313U,	// STriw_pred
    848380110U,	// STriw_shl_V4
    848797902U,	// STriw_shl_nv_V4
    617660422U,	// SUB64_rr
    617660422U,	// SUB_rr
    1076363291U,	// SUB_rr_cNotPt
    1076363338U,	// SUB_rr_cPt
    1077411867U,	// SUB_rr_cdnNotPt
    1077411914U,	// SUB_rr_cdnPt
    618676230U,	// SUBi_ASLri_V4
    618684422U,	// SUBi_LSRri_V4
    708878342U,	// SUBri_acc
    708886534U,	// SUBrr_acc
    627048454U,	// SXTB
    1076371483U,	// SXTB_cNotPt_V4
    1076371530U,	// SXTB_cPt_V4
    1077420059U,	// SXTB_cdnNotPt_V4
    1077420106U,	// SXTB_cdnPt_V4
    628097030U,	// SXTH
    1076379675U,	// SXTH_cNotPt_V4
    1076379722U,	// SXTH_cPt_V4
    1077428251U,	// SXTH_cdnNotPt_V4
    1077428298U,	// SXTH_cdnPt_V4
    629145606U,	// SXTW
    849346580U,	// TCRETURNR
    849346567U,	// TCRETURNtext
    849346567U,	// TCRETURNtg
    551632902U,	// TFCR
    551632902U,	// TFR
    632291334U,	// TFRI
    632291334U,	// TFRI64
    1076387867U,	// TFRI_cNotPt
    1076387914U,	// TFRI_cPt
    1077436443U,	// TFRI_cdnNotPt
    1077436490U,	// TFRI_cdnPt
    551632902U,	// TFR_64
    537427974U,	// TFR_FI
    669556742U,	// TFR_PdFalse
    552124422U,	// TFR_PdRs
    552132614U,	// TFR_RsPd
    1076428827U,	// TFR_cNotPt
    1076428874U,	// TFR_cPt
    1077477403U,	// TFR_cdnNotPt
    1077477450U,	// TFR_cdnPt
    313U,	// TFR_condset_ii
    313U,	// TFR_condset_ir
    313U,	// TFR_condset_ri
    313U,	// TFR_condset_rr
    782286854U,	// VALIGN_rrp
    676331526U,	// VITPACK_pp
    677380102U,	// VMUX_prr64
    601931782U,	// VSPLICE_rrp
    668991494U,	// XOR_pp
    668991494U,	// XOR_rr
    668991494U,	// XOR_rr64
    1076437019U,	// XOR_rr_cNotPt
    1076437066U,	// XOR_rr_cPt
    1077485595U,	// XOR_rr_cdnNotPt
    1077485642U,	// XOR_rr_cdnPt
    732954630U,	// XORd_XORdd
    590422022U,	// XORr_ANDr_NOTr_V4
    590397446U,	// XORr_ANDrr_V4
    591396870U,	// XORr_ORrr_V4
    732954630U,	// XORr_XORrr_V4
    670040070U,	// ZXTB
    1076445211U,	// ZXTB_cNotPt_V4
    1076445258U,	// ZXTB_cPt_V4
    1077493787U,	// ZXTB_cdnNotPt_V4
    1077493834U,	// ZXTB_cdnPt_V4
    671088646U,	// ZXTH
    1076453403U,	// ZXTH_cNotPt_V4
    1076453450U,	// ZXTH_cPt_V4
    1077501979U,	// ZXTH_cdnNotPt_V4
    1077502026U,	// ZXTH_cdnPt_V4
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'c', 'a', 'l', 'l', 32, 0,
  /* 6 */ 'j', 'u', 'm', 'p', 32, 0,
  /* 12 */ 'c', 'a', 'l', 'l', 'r', 32, 0,
  /* 19 */ 'j', 'u', 'm', 'p', 'r', 32, 0,
  /* 26 */ 'i', 'f', 32, '(', '!', 0,
  /* 32 */ 'm', 'e', 'm', 'b', '(', '#', 0,
  /* 39 */ 'm', 'e', 'm', 'd', '(', '#', 0,
  /* 46 */ 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', '(', '#', 0,
  /* 59 */ 'm', 'e', 'm', 'h', '(', '#', 0,
  /* 66 */ 'm', 'e', 'm', 'w', '(', '#', 0,
  /* 73 */ 'i', 'f', 32, '(', 0,
  /* 78 */ 'l', 'o', 'o', 'p', '0', '(', 0,
  /* 85 */ 'm', 'e', 'm', 'b', '(', 0,
  /* 91 */ 'm', 'e', 'm', 'd', '(', 0,
  /* 97 */ 'm', 'e', 'm', 'h', '(', 0,
  /* 103 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 116 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'e', 'q', '(', 0,
  /* 128 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 141 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', '(', 0,
  /* 153 */ 'i', 'f', 32, '(', '!', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 166 */ 'i', 'f', 32, '(', 't', 's', 't', 'b', 'i', 't', '(', 0,
  /* 178 */ 'i', 'f', 32, '(', '!', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 192 */ 'i', 'f', 32, '(', 'c', 'm', 'p', '.', 'g', 't', 'u', '(', 0,
  /* 205 */ 'm', 'e', 'm', 'w', '(', 0,
  /* 211 */ ':', 'e', 'n', 'd', 'l', 'o', 'o', 'p', '0', 0,
  /* 221 */ 'j', 'u', 'm', 'p', 'r', 32, 'r', '3', '1', 0,
  /* 231 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 238 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 248 */ 'S', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'e', 'v', 'e', 'r', 32, 'b', 'e', 32, 'e', 'm', 'i', 't', 't', 'e', 'd', 0,
  /* 272 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', 'f', 'r', 'a', 'm', 'e', 0,
  /* 285 */ 'd', 'e', 'a', 'l', 'l', 'o', 'c', '_', 'r', 'e', 't', 'u', 'r', 'n', 0,
  /* 300 */ 'n', 'o', 'p', 0,
  /* 304 */ 'b', 'a', 'r', 'r', 'i', 'e', 'r', 0,
  /* 312 */ 'E', 'r', 'r', 'o', 'r', ';', 32, 's', 'h', 'o', 'u', 'l', 'd', 32, 'n', 'o', 't', 32, 'e', 'm', 'i', 't', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 511)-1;


  // Fragment 0 encoded into 3 bits for 6 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, ADJCALLSTACKDOWN, ADJCALLSTACKUP, BARRIER, DEALLOCF...
    return;
    break;
  case 1:
    // ADD64_rr, ADDASL, ADD_ri, ADD_rr, ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_M...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMb_ANDr_MEM_V4, MEMb_ORr_MEM_V4,...
    printMEMriOperand(MI, 0, O); 
    break;
  case 4:
    // POST_LDrib_cNotPt, POST_LDrib_cPt, POST_LDrib_cdnNotPt_V4, POST_LDrib_...
    printOperand(MI, 2, O); 
    break;
  case 5:
    // STb_GP, STh_GP, STrib_GP, STrib_GP_nv_V4, STrid_GP, STrih_GP, STrih_GP...
    printGlobalOperand(MI, 0, O); 
    break;
  }


  // Fragment 1 encoded into 9 bits for 299 unique commands.
  switch ((Bits >> 20) & 511) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    O << " = add("; 
    break;
  case 1:
    // ADDASL, Hexagon_S2_addasl_rrri
    O << " = addasl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 2:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_rr_cNotPt, ADD_rr_cPt, AND_rr_cNotPt, A...
    O << ") "; 
    printOperand(MI, 0, O); 
    break;
  case 3:
    // ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cdnNotPt, ADD_rr_cdnPt, AND_rr_c...
    O << ".new) "; 
    printOperand(MI, 0, O); 
    break;
  case 4:
    // ADDi_ASLri_V4, ADDi_LSRri_V4, ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << " = add(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 5:
    // ADDri_acc, ADDrr_acc, Hexagon_M2_acci, Hexagon_M2_accii
    O << " += add("; 
    printOperand(MI, 2, O); 
    break;
  case 6:
    // ALLOCFRAME
    O << ')'; 
    return;
    break;
  case 7:
    // ALL_pp, Hexagon_C2_all8
    O << " = all8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_pnotp, AND_pp, AND_ri, AND_rr, AND_rr64, ANDd_NOTd_V4, Hexagon_A2_...
    O << " = and("; 
    printOperand(MI, 1, O); 
    break;
  case 9:
    // ANDi_ASLri_V4, ANDi_LSRri_V4
    O << " = and(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 10:
    // ANDr_ANDr_NOTr_V4, ANDr_ANDrr_V4, HEXAGON_M4_and_and, HEXAGON_M4_and_a...
    O << " &= and("; 
    printOperand(MI, 2, O); 
    break;
  case 11:
    // ANDr_ORrr_V4, HEXAGON_M4_and_or
    O << " &= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ANDr_XORrr_V4, HEXAGON_M4_and_xor
    O << " &= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // ANY_pp, Hexagon_C2_any8
    O << " = any8("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // ARGEXTEND, Hexagon_A2_tfr, Hexagon_A2_tfrp, Hexagon_C2_pxfer_map, Hexa...
    O << " = "; 
    printOperand(MI, 1, O); 
    break;
  case 15:
    // ASL, ASL_rr, Hexagon_S2_asl_i_p, Hexagon_S2_asl_i_r, Hexagon_S2_asl_i_...
    O << " = asl("; 
    printOperand(MI, 1, O); 
    break;
  case 16:
    // ASLH, Hexagon_A2_aslh
    O << " = aslh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 17:
    // ASLd_rr_xor_V4, Hexagon_S2_asl_i_p_xacc, Hexagon_S2_asl_i_r_xacc
    O << " ^= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 18:
    // ASRH, Hexagon_A2_asrh, SI_to_SXTHI_asrh
    O << " = asrh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 19:
    // ASR_ri, ASR_rr, ASRd_ri, ASRd_rr, Hexagon_S2_asr_i_p, Hexagon_S2_asr_i...
    O << " = asr("; 
    printOperand(MI, 1, O); 
    break;
  case 20:
    // ASR_rr_acc, Hexagon_S2_asr_i_p_acc, Hexagon_S2_asr_i_r_acc, Hexagon_S2...
    O << " += asr("; 
    printOperand(MI, 2, O); 
    break;
  case 21:
    // ASRd_rr_xor_V4
    O << " ^= asr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 22:
    // BRCOND, JMP_c, JMP_cNot
    O << ") jump "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 23:
    // BR_JT, CALL, CALLR, CALLRv3, CALLv3, JMP
    return;
    break;
  case 24:
    // CMPEHexagon4rr, CMPEQri, CMPEQrr, Hexagon_A4_rcmpeq, Hexagon_A4_rcmpeq...
    O << " = cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 25:
    // CMPGEUri, Hexagon_C2_cmpgeui
    O << " = cmp.geu("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 26:
    // CMPGEri, Hexagon_C2_cmpgei
    O << " = cmp.ge("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 27:
    // CMPGT64rr, CMPGTri, CMPGTrr, Hexagon_C2_cmpgt, Hexagon_C2_cmpgti, Hexa...
    O << " = cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 28:
    // CMPGTU64rr, CMPGTUri, CMPGTUrr, Hexagon_C2_cmpgtu, Hexagon_C2_cmpgtui,...
    O << " = cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 29:
    // CMPLTrr, Hexagon_C2_cmplt
    O << " = cmp.lt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 30:
    // CMPbEQri_V4, CMPbEQrr_sbsb_V4, CMPbEQrr_ubub_V4
    O << " = cmpb.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // CMPbGTUri_V4, CMPbGTUrr_V4
    O << " = cmpb.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // CMPbGTri_V4, CMPbGTrr_V4
    O << " = cmpb.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 33:
    // CMPhEQri_V4, CMPhEQrr_shl_V4, CMPhEQrr_xor_V4
    O << " = cmph.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 34:
    // CMPhGTUri_V4, CMPhGTUrr_V4
    O << " = cmph.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 35:
    // CMPhGTri_V4, CMPhGTrr_shl_V4
    O << " = cmph.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 36:
    // COMBINE_rr, Hexagon_A2_combine_hh, Hexagon_A2_combine_hl, Hexagon_A2_c...
    O << " = combine("; 
    printOperand(MI, 1, O); 
    break;
  case 37:
    // CONST32, CONST32GP_set, CONST32_Int_Real, CONST32_set, CONST32_set_jt
    O << " = CONST32(#"; 
    break;
  case 38:
    // CONST32_Label
    O << " = CONST32("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 39:
    // CONST64_Int_Real
    O << " = CONST64(#"; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 40:
    // DEALLOC_RET_cNotPt_V4, DEALLOC_RET_cPt_V4
    O << ") dealloc_return"; 
    return;
    break;
  case 41:
    // DEALLOC_RET_cNotdnPnt_V4, DEALLOC_RET_cdnPnt_V4
    O << ".new) dealloc_return:nt"; 
    return;
    break;
  case 42:
    // DEALLOC_RET_cNotdnPt_V4, DEALLOC_RET_cdnPt_V4
    O << ".new) dealloc_return:t"; 
    return;
    break;
  case 43:
    // HEXAGON_A4_cround_ri, HEXAGON_A4_cround_rr
    O << " = cround("; 
    printOperand(MI, 1, O); 
    break;
  case 44:
    // HEXAGON_A4_modwrapu
    O << " = modwrap("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 45:
    // HEXAGON_A4_round_ri, HEXAGON_A4_round_ri_sat, HEXAGON_A4_round_rr, HEX...
    O << " = round("; 
    printOperand(MI, 1, O); 
    break;
  case 46:
    // HEXAGON_C2_bitsclr, HEXAGON_C2_bitsclri
    O << " = bitsclr("; 
    printOperand(MI, 1, O); 
    break;
  case 47:
    // HEXAGON_C2_bitsset
    O << " = bitsset("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 48:
    // HEXAGON_M4_or_and, HEXAGON_M4_or_andn, HEXAGON_S4_or_andi, ORr_ANDr_NO...
    O << " |= and("; 
    printOperand(MI, 2, O); 
    break;
  case 49:
    // HEXAGON_M4_or_or, HEXAGON_S4_or_ori, ORr_ORri_V4, ORr_ORrr_V4
    O << " |= or("; 
    printOperand(MI, 2, O); 
    break;
  case 50:
    // HEXAGON_M4_or_xor, ORr_XORrr_V4
    O << " |= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 51:
    // HEXAGON_M4_xor_and, HEXAGON_M4_xor_andn, XORr_ANDr_NOTr_V4, XORr_ANDrr...
    O << " ^= and("; 
    printOperand(MI, 2, O); 
    break;
  case 52:
    // HEXAGON_M4_xor_or, XORr_ORrr_V4
    O << " ^= or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 53:
    // HEXAGON_S2_brev
    O << " = brev("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 54:
    // HEXAGON_S2_deinterleave
    O << " = deinterleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 55:
    // HEXAGON_S2_insert, HEXAGON_S2_insert_rp, HEXAGON_S2_insertp, HEXAGON_S...
    O << " = insert("; 
    printOperand(MI, 2, O); 
    break;
  case 56:
    // HEXAGON_S2_interleave
    O << " = interleave("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 57:
    // HEXAGON_S2_lfsp
    O << " = lfs("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 58:
    // HEXAGON_S2_tableidxb_goodsyntax
    O << " = tableidxb("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 59:
    // HEXAGON_S2_tableidxd_goodsyntax
    O << " = tableidxd("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // HEXAGON_S2_tableidxh_goodsyntax
    O << " = tableidxh("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 61:
    // HEXAGON_S2_tableidxw_goodsyntax
    O << " = tableidxw("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case 62:
    // HEXAGON_S2_vspliceib, HEXAGON_S2_vsplicerb, VSPLICE_rrp
    O << " = vspliceb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 63:
    // HEXAGON_S4_or_andix, Hexagon_A2_or, Hexagon_A2_orir, Hexagon_A2_orp, H...
    O << " = or("; 
    printOperand(MI, 1, O); 
    break;
  case 64:
    // Hexagon_A2_abs, Hexagon_A2_absp, Hexagon_A2_abssat
    O << " = abs("; 
    printOperand(MI, 1, O); 
    break;
  case 65:
    // Hexagon_A2_combineii, Hexagon_A4_combineir
    O << " = combine(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 66:
    // Hexagon_A2_max, Hexagon_A2_maxp, MAXw_dd, MAXw_rr
    O << " = max("; 
    break;
  case 67:
    // Hexagon_A2_maxu, Hexagon_A2_maxup
    O << " = maxu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 68:
    // Hexagon_A2_min, MINw_dd, MINw_rr
    O << " = min("; 
    break;
  case 69:
    // Hexagon_A2_minu
    O << " = minu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // Hexagon_A2_neg, Hexagon_A2_negp, Hexagon_A2_negsat, NEG
    O << " = neg("; 
    printOperand(MI, 1, O); 
    break;
  case 71:
    // Hexagon_A2_not, Hexagon_A2_notp, Hexagon_C2_not, NOT_p, NOT_rr, NOT_rr...
    O << " = not("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 72:
    // Hexagon_A2_sat
    O << " = sat("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 73:
    // Hexagon_A2_satb
    O << " = satb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // Hexagon_A2_sath
    O << " = sath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 75:
    // Hexagon_A2_satub
    O << " = satub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 76:
    // Hexagon_A2_satuh
    O << " = satuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 77:
    // Hexagon_A2_sub, Hexagon_A2_subh_h16_hh, Hexagon_A2_subh_h16_hl, Hexago...
    O << " = sub("; 
    printOperand(MI, 1, O); 
    break;
  case 78:
    // Hexagon_A2_subri, SUBi_ASLri_V4, SUBi_LSRri_V4
    O << " = sub(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 79:
    // Hexagon_A2_svaddh, Hexagon_A2_svaddhs, Hexagon_A2_vaddh, Hexagon_A2_va...
    O << " = vaddh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 80:
    // Hexagon_A2_svadduhs, Hexagon_A2_vadduhs
    O << " = vadduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 81:
    // Hexagon_A2_svavgh, Hexagon_A2_svavghs, Hexagon_A2_vavgh, Hexagon_A2_va...
    O << " = vavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 82:
    // Hexagon_A2_svnavgh, Hexagon_A2_vnavgh, Hexagon_A2_vnavghcr, Hexagon_A2...
    O << " = vnavgh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 83:
    // Hexagon_A2_svsubh, Hexagon_A2_svsubhs, Hexagon_A2_vsubh, Hexagon_A2_vs...
    O << " = vsubh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 84:
    // Hexagon_A2_svsubuhs, Hexagon_A2_vsubuhs
    O << " = vsubuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case 85:
    // Hexagon_A2_swiz
    O << " = swiz("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 86:
    // Hexagon_A2_sxtb, SXTB
    O << " = sxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 87:
    // Hexagon_A2_sxth, SXTH
    O << " = sxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 88:
    // Hexagon_A2_sxtw, SXTW
    O << " = sxtw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 89:
    // Hexagon_A2_tfrih
    O << ".h = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 90:
    // Hexagon_A2_tfril
    O << ".l = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 91:
    // Hexagon_A2_tfrpi, Hexagon_A2_tfrsi, TFRI, TFRI64
    O << " = #"; 
    printImmOperand(MI, 1, O); 
    return;
    break;
  case 92:
    // Hexagon_A2_vabsh, Hexagon_A2_vabshsat
    O << " = vabsh("; 
    printOperand(MI, 1, O); 
    break;
  case 93:
    // Hexagon_A2_vabsw, Hexagon_A2_vabswsat
    O << " = vabsw("; 
    printOperand(MI, 1, O); 
    break;
  case 94:
    // Hexagon_A2_vaddub, Hexagon_A2_vaddubs
    O << " = vaddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 95:
    // Hexagon_A2_vaddw, Hexagon_A2_vaddws
    O << " = vaddw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 96:
    // Hexagon_A2_vavgub, Hexagon_A2_vavgubr
    O << " = vavgub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 97:
    // Hexagon_A2_vavguh, Hexagon_A2_vavguhr
    O << " = vavguh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 98:
    // Hexagon_A2_vavguw, Hexagon_A2_vavguwr
    O << " = vavguw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 99:
    // Hexagon_A2_vavgw, Hexagon_A2_vavgwcr, Hexagon_A2_vavgwr
    O << " = vavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 100:
    // Hexagon_A2_vcmpbeq
    O << " = vcmpb.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 101:
    // Hexagon_A2_vcmpbgtu
    O << " = vcmpb.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 102:
    // Hexagon_A2_vcmpheq
    O << " = vcmph.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 103:
    // Hexagon_A2_vcmphgt
    O << " = vcmph.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 104:
    // Hexagon_A2_vcmphgtu
    O << " = vcmph.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 105:
    // Hexagon_A2_vcmpweq
    O << " = vcmpw.eq("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 106:
    // Hexagon_A2_vcmpwgt
    O << " = vcmpw.gt("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 107:
    // Hexagon_A2_vcmpwgtu
    O << " = vcmpw.gtu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 108:
    // Hexagon_A2_vconj
    O << " = vconj("; 
    printOperand(MI, 1, O); 
    O << "):sat"; 
    return;
    break;
  case 109:
    // Hexagon_A2_vmaxh
    O << " = vmaxh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 110:
    // Hexagon_A2_vmaxub
    O << " = vmaxub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 111:
    // Hexagon_A2_vmaxuh
    O << " = vmaxuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 112:
    // Hexagon_A2_vmaxuw
    O << " = vmaxuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 113:
    // Hexagon_A2_vmaxw
    O << " = vmaxw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 114:
    // Hexagon_A2_vminh
    O << " = vminh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 115:
    // Hexagon_A2_vminub
    O << " = vminub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 116:
    // Hexagon_A2_vminuh
    O << " = vminuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 117:
    // Hexagon_A2_vminuw
    O << " = vminuw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 118:
    // Hexagon_A2_vminw
    O << " = vminw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 119:
    // Hexagon_A2_vnavgw, Hexagon_A2_vnavgwcr, Hexagon_A2_vnavgwr
    O << " = vnavgw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 120:
    // Hexagon_A2_vraddub
    O << " = vraddub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 121:
    // Hexagon_A2_vraddub_acc
    O << " += vraddub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 122:
    // Hexagon_A2_vrsadub
    O << " = vrsadub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 123:
    // Hexagon_A2_vrsadub_acc
    O << " += vrsadub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 124:
    // Hexagon_A2_vsubub, Hexagon_A2_vsububs
    O << " = vsubub("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 125:
    // Hexagon_A2_vsubw, Hexagon_A2_vsubws
    O << " = vsubw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 126:
    // Hexagon_A2_xor, Hexagon_A2_xorp, Hexagon_C2_xor, TFR_PdFalse, XOR_pp, ...
    O << " = xor("; 
    break;
  case 127:
    // Hexagon_A2_zxtb, ZXTB
    O << " = zxtb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 128:
    // Hexagon_A2_zxth, ZXTH
    O << " = zxth("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 129:
    // Hexagon_A4_rcmpneq, Hexagon_A4_rcmpneqi, Hexagon_C4_cmpneq, Hexagon_C4...
    O << " = !cmp.eq("; 
    printOperand(MI, 1, O); 
    break;
  case 130:
    // Hexagon_C2_cmpltu
    O << " = cmp.ltu("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 131:
    // Hexagon_C2_mask, MASK_p
    O << " = mask("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 132:
    // Hexagon_C2_mux, Hexagon_C2_muxii, Hexagon_C2_muxir, Hexagon_C2_muxri, ...
    O << " = mux("; 
    printOperand(MI, 1, O); 
    break;
  case 133:
    // Hexagon_C2_vitpack, VITPACK_pp
    O << " = vitpack("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 134:
    // Hexagon_C2_vmux, VMUX_prr64
    O << " = vmux("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 135:
    // Hexagon_C4_cmplte, Hexagon_C4_cmpltei
    O << " = !cmp.gt("; 
    printOperand(MI, 1, O); 
    break;
  case 136:
    // Hexagon_C4_cmplteu, Hexagon_C4_cmplteui
    O << " = !cmp.gtu("; 
    printOperand(MI, 1, O); 
    break;
  case 137:
    // Hexagon_C4_fastcorner9
    O << " = fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 138:
    // Hexagon_C4_fastcorner9_not
    O << " = !fastcorner9("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 139:
    // Hexagon_M2_cmaci_s0
    O << " += cmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 140:
    // Hexagon_M2_cmacr_s0
    O << " += cmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 141:
    // Hexagon_M2_cmacs_s0, Hexagon_M2_cmacs_s1, Hexagon_M2_cmacsc_s0, Hexago...
    O << " += cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 142:
    // Hexagon_M2_cmpyi_s0
    O << " = cmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 143:
    // Hexagon_M2_cmpyr_s0
    O << " = cmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 144:
    // Hexagon_M2_cmpyrs_s0, Hexagon_M2_cmpyrs_s1, Hexagon_M2_cmpyrsc_s0, Hex...
    O << " = cmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 145:
    // Hexagon_M2_cnacs_s0, Hexagon_M2_cnacs_s1, Hexagon_M2_cnacsc_s0, Hexago...
    O << " -= cmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 146:
    // Hexagon_M2_dpmpyss_acc_s0, Hexagon_M2_mpy_acc_hh_s0, Hexagon_M2_mpy_ac...
    O << " += mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 147:
    // Hexagon_M2_dpmpyss_nac_s0, Hexagon_M2_mpy_nac_hh_s0, Hexagon_M2_mpy_na...
    O << " -= mpy("; 
    printOperand(MI, 2, O); 
    break;
  case 148:
    // Hexagon_M2_dpmpyss_rnd_s0, Hexagon_M2_dpmpyss_s0, Hexagon_M2_hmmpyh_rs...
    O << " = mpy("; 
    printOperand(MI, 1, O); 
    break;
  case 149:
    // Hexagon_M2_dpmpyuu_acc_s0, Hexagon_M2_mpyu_acc_hh_s0, Hexagon_M2_mpyu_...
    O << " += mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 150:
    // Hexagon_M2_dpmpyuu_nac_s0, Hexagon_M2_mpyu_nac_hh_s0, Hexagon_M2_mpyu_...
    O << " -= mpyu("; 
    printOperand(MI, 2, O); 
    break;
  case 151:
    // Hexagon_M2_dpmpyuu_s0, Hexagon_M2_mpyu_hh_s0, Hexagon_M2_mpyu_hh_s1, H...
    O << " = mpyu("; 
    printOperand(MI, 1, O); 
    break;
  case 152:
    // Hexagon_M2_maci, Hexagon_M2_macsip, MPYI_acc_ri, MPYI_acc_rr
    O << " += mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 153:
    // Hexagon_M2_macsin, MPYI_sub_ri
    O << " -= mpyi("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 154:
    // Hexagon_M2_mmachs_rs0, Hexagon_M2_mmachs_rs1, Hexagon_M2_mmachs_s0, He...
    O << " += vmpywoh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 155:
    // Hexagon_M2_mmacls_rs0, Hexagon_M2_mmacls_rs1, Hexagon_M2_mmacls_s0, He...
    O << " += vmpyweh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 156:
    // Hexagon_M2_mmacuhs_rs0, Hexagon_M2_mmacuhs_rs1, Hexagon_M2_mmacuhs_s0,...
    O << " += vmpywouh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 157:
    // Hexagon_M2_mmaculs_rs0, Hexagon_M2_mmaculs_rs1, Hexagon_M2_mmaculs_s0,...
    O << " += vmpyweuh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 158:
    // Hexagon_M2_mmpyh_rs0, Hexagon_M2_mmpyh_rs1, Hexagon_M2_mmpyh_s0, Hexag...
    O << " = vmpywoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 159:
    // Hexagon_M2_mmpyl_rs0, Hexagon_M2_mmpyl_rs1, Hexagon_M2_mmpyl_s0, Hexag...
    O << " = vmpyweh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 160:
    // Hexagon_M2_mmpyuh_rs0, Hexagon_M2_mmpyuh_rs1, Hexagon_M2_mmpyuh_s0, He...
    O << " = vmpywouh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 161:
    // Hexagon_M2_mmpyul_rs0, Hexagon_M2_mmpyul_rs1, Hexagon_M2_mmpyul_s0, He...
    O << " = vmpyweuh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 162:
    // Hexagon_M2_mpyi, MPYI, MPYI_ri
    O << " = mpyi("; 
    printOperand(MI, 1, O); 
    break;
  case 163:
    // Hexagon_M2_mpyui
    O << " = mpyui("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 164:
    // Hexagon_M2_nacci, Hexagon_M2_naccii, SUBri_acc, SUBrr_acc
    O << " -= add("; 
    printOperand(MI, 2, O); 
    break;
  case 165:
    // Hexagon_M2_subacc
    O << " += sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 166:
    // Hexagon_M2_vabsdiffh
    O << " = vabsdiffh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 167:
    // Hexagon_M2_vabsdiffw
    O << " = vabsdiffw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 168:
    // Hexagon_M2_vcmac_s0_sat_i
    O << " += vcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 169:
    // Hexagon_M2_vcmac_s0_sat_r
    O << " += vcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):sat"; 
    return;
    break;
  case 170:
    // Hexagon_M2_vcmpy_s0_sat_i, Hexagon_M2_vcmpy_s1_sat_i
    O << " = vcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 171:
    // Hexagon_M2_vcmpy_s0_sat_r, Hexagon_M2_vcmpy_s1_sat_r
    O << " = vcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 172:
    // Hexagon_M2_vdmacs_s0, Hexagon_M2_vdmacs_s1
    O << " += vdmpy("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 173:
    // Hexagon_M2_vdmpyrs_s0, Hexagon_M2_vdmpyrs_s1, Hexagon_M2_vdmpys_s0, He...
    O << " = vdmpy("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 174:
    // Hexagon_M2_vmac2, Hexagon_M2_vmac2s_s0, Hexagon_M2_vmac2s_s1
    O << " += vmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 175:
    // Hexagon_M2_vmac2es, Hexagon_M2_vmac2es_s0, Hexagon_M2_vmac2es_s1
    O << " += vmpyeh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 176:
    // Hexagon_M2_vmpy2es_s0, Hexagon_M2_vmpy2es_s1
    O << " = vmpyeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 177:
    // Hexagon_M2_vmpy2s_s0, Hexagon_M2_vmpy2s_s0pack, Hexagon_M2_vmpy2s_s1, ...
    O << " = vmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 178:
    // Hexagon_M2_vradduh
    O << " = vradduh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 179:
    // Hexagon_M2_vrcmaci_s0, Hexagon_M2_vrcmaci_s0c
    O << " += vrcmpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 180:
    // Hexagon_M2_vrcmacr_s0, Hexagon_M2_vrcmacr_s0c
    O << " += vrcmpyr("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    break;
  case 181:
    // Hexagon_M2_vrcmpyi_s0, Hexagon_M2_vrcmpyi_s0c
    O << " = vrcmpyi("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 182:
    // Hexagon_M2_vrcmpyr_s0, Hexagon_M2_vrcmpyr_s0c
    O << " = vrcmpyr("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 183:
    // Hexagon_M2_vrcmpys_acc_s1
    O << " += vrcmpys("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "):<<1:sat"; 
    return;
    break;
  case 184:
    // Hexagon_M2_vrcmpys_s1, Hexagon_M2_vrcmpys_s1rp
    O << " = vrcmpys("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 185:
    // Hexagon_M2_vrmac_s0
    O << " += vrmpyh("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 186:
    // Hexagon_M2_vrmpy_s0
    O << " = vrmpyh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 187:
    // Hexagon_M2_xor_xacc, Hexagon_M4_xor_xacc, XORd_XORdd, XORr_XORrr_V4
    O << " ^= xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 188:
    // Hexagon_S2_asl_i_p_acc, Hexagon_S2_asl_i_r_acc, Hexagon_S2_asl_r_p_acc...
    O << " += asl("; 
    printOperand(MI, 2, O); 
    break;
  case 189:
    // Hexagon_S2_asl_i_p_and, Hexagon_S2_asl_i_r_and, Hexagon_S2_asl_r_p_and...
    O << " &= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 190:
    // Hexagon_S2_asl_i_p_nac, Hexagon_S2_asl_i_r_nac, Hexagon_S2_asl_r_p_nac...
    O << " -= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 191:
    // Hexagon_S2_asl_i_p_or, Hexagon_S2_asl_i_r_or, Hexagon_S2_asl_r_p_or, H...
    O << " |= asl("; 
    printOperand(MI, 2, O); 
    break;
  case 192:
    // Hexagon_S2_asl_i_vh, Hexagon_S2_asl_r_vh
    O << " = vaslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 193:
    // Hexagon_S2_asl_i_vw, Hexagon_S2_asl_r_vw
    O << " = vaslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 194:
    // Hexagon_S2_asr_i_p_and, Hexagon_S2_asr_i_r_and, Hexagon_S2_asr_r_p_and...
    O << " &= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 195:
    // Hexagon_S2_asr_i_p_nac, Hexagon_S2_asr_i_r_nac, Hexagon_S2_asr_r_p_nac...
    O << " -= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 196:
    // Hexagon_S2_asr_i_p_or, Hexagon_S2_asr_i_r_or, Hexagon_S2_asr_r_p_or, H...
    O << " |= asr("; 
    printOperand(MI, 2, O); 
    break;
  case 197:
    // Hexagon_S2_asr_i_r_rnd_goodsyntax
    O << " = asrrnd("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 198:
    // Hexagon_S2_asr_i_svw_trun, Hexagon_S2_asr_i_vw, Hexagon_S2_asr_r_svw_t...
    O << " = vasrw("; 
    printOperand(MI, 1, O); 
    break;
  case 199:
    // Hexagon_S2_asr_i_vh, Hexagon_S2_asr_r_vh
    O << " = vasrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 200:
    // Hexagon_S2_cl0, Hexagon_S2_cl0p
    O << " = cl0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 201:
    // Hexagon_S2_cl1, Hexagon_S2_cl1p
    O << " = cl1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 202:
    // Hexagon_S2_clb, Hexagon_S2_clbp
    O << " = clb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 203:
    // Hexagon_S2_clbnorm
    O << " = normamt("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 204:
    // Hexagon_S2_clrbit_i, Hexagon_S2_clrbit_r
    O << " = clrbit("; 
    printOperand(MI, 1, O); 
    break;
  case 205:
    // Hexagon_S2_ct0
    O << " = ct0("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 206:
    // Hexagon_S2_ct1
    O << " = ct1("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 207:
    // Hexagon_S2_extractu, Hexagon_S2_extractu_rp, Hexagon_S2_extractup, Hex...
    O << " = extractu("; 
    printOperand(MI, 1, O); 
    break;
  case 208:
    // Hexagon_S2_lsl_r_p, Hexagon_S2_lsl_r_r, LSLd
    O << " = lsl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 209:
    // Hexagon_S2_lsl_r_p_acc, Hexagon_S2_lsl_r_r_acc
    O << " += lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 210:
    // Hexagon_S2_lsl_r_p_and, Hexagon_S2_lsl_r_r_and
    O << " &= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 211:
    // Hexagon_S2_lsl_r_p_nac, Hexagon_S2_lsl_r_r_nac
    O << " -= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 212:
    // Hexagon_S2_lsl_r_p_or, Hexagon_S2_lsl_r_r_or
    O << " |= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 213:
    // Hexagon_S2_lsl_r_vh
    O << " = vlslh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 214:
    // Hexagon_S2_lsl_r_vw
    O << " = vlslw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 215:
    // Hexagon_S2_lsr_i_p, Hexagon_S2_lsr_i_r, Hexagon_S2_lsr_r_p, Hexagon_S2...
    O << " = lsr("; 
    printOperand(MI, 1, O); 
    break;
  case 216:
    // Hexagon_S2_lsr_i_p_acc, Hexagon_S2_lsr_i_r_acc, Hexagon_S2_lsr_r_p_acc...
    O << " += lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 217:
    // Hexagon_S2_lsr_i_p_and, Hexagon_S2_lsr_i_r_and, Hexagon_S2_lsr_r_p_and...
    O << " &= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 218:
    // Hexagon_S2_lsr_i_p_nac, Hexagon_S2_lsr_i_r_nac, Hexagon_S2_lsr_r_p_nac...
    O << " -= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 219:
    // Hexagon_S2_lsr_i_p_or, Hexagon_S2_lsr_i_r_or, Hexagon_S2_lsr_r_p_or, H...
    O << " |= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 220:
    // Hexagon_S2_lsr_i_p_xacc, Hexagon_S2_lsr_i_r_xacc, LSRd_rr_xor_V4
    O << " ^= lsr("; 
    printOperand(MI, 2, O); 
    break;
  case 221:
    // Hexagon_S2_lsr_i_vh, Hexagon_S2_lsr_r_vh
    O << " = vlsrh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 222:
    // Hexagon_S2_lsr_i_vw, Hexagon_S2_lsr_r_vw
    O << " = vlsrw("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 223:
    // Hexagon_S2_packhl
    O << " = packhl("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 224:
    // Hexagon_S2_parityp
    O << " = parity("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 225:
    // Hexagon_S2_setbit_i, Hexagon_S2_setbit_r
    O << " = setbit("; 
    printOperand(MI, 1, O); 
    break;
  case 226:
    // Hexagon_S2_shuffeb
    O << " = shuffeb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 227:
    // Hexagon_S2_shuffeh
    O << " = shuffeh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 228:
    // Hexagon_S2_shuffob
    O << " = shuffob("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 229:
    // Hexagon_S2_shuffoh
    O << " = shuffoh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 230:
    // Hexagon_S2_svsathb, Hexagon_S2_vsathb, Hexagon_S2_vsathb_nopack
    O << " = vsathb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 231:
    // Hexagon_S2_svsathub, Hexagon_S2_vsathub, Hexagon_S2_vsathub_nopack
    O << " = vsathub("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 232:
    // Hexagon_S2_togglebit_i, Hexagon_S2_togglebit_r
    O << " = togglebit("; 
    printOperand(MI, 1, O); 
    break;
  case 233:
    // Hexagon_S2_tstbit_i, Hexagon_S2_tstbit_r
    O << " = tstbit("; 
    printOperand(MI, 1, O); 
    break;
  case 234:
    // Hexagon_S2_valignib, Hexagon_S2_valignrb, VALIGN_rrp
    O << " = valignb("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  case 235:
    // Hexagon_S2_vcrotate
    O << " = vcrotate("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 236:
    // Hexagon_S2_vrndpackwh, Hexagon_S2_vrndpackwhs
    O << " = vrndwh("; 
    printOperand(MI, 1, O); 
    break;
  case 237:
    // Hexagon_S2_vsatwh, Hexagon_S2_vsatwh_nopack
    O << " = vsatwh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 238:
    // Hexagon_S2_vsatwuh, Hexagon_S2_vsatwuh_nopack
    O << " = vsatwuh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 239:
    // Hexagon_S2_vsplatrb
    O << " = vsplatb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 240:
    // Hexagon_S2_vsplatrh
    O << " = vsplath("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 241:
    // Hexagon_S2_vsxtbh
    O << " = vsxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 242:
    // Hexagon_S2_vsxthw
    O << " = vsxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 243:
    // Hexagon_S2_vtrunehb
    O << " = vtrunehb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 244:
    // Hexagon_S2_vtrunewh
    O << " = vtrunewh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 245:
    // Hexagon_S2_vtrunohb
    O << " = vtrunohb("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 246:
    // Hexagon_S2_vtrunowh
    O << " = vtrunowh("; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 247:
    // Hexagon_S2_vzxtbh
    O << " = vzxtbh("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 248:
    // Hexagon_S2_vzxthw
    O << " = vzxthw("; 
    printOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 249:
    // JMPR_cNotPnewNt, JMPR_cPnewNt
    O << ".new) jumpr:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 250:
    // JMPR_cNotPnewt, JMPR_cPnewt
    O << ".new) jumpr:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 251:
    // JMPR_cNotPt, JMPR_cPt
    O << ") jumpr r31"; 
    return;
    break;
  case 252:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPntneg_ie_nv...
    O << ".new, #"; 
    break;
  case 253:
    // JMP_EQrrNotPnt_ie_nv_V4, JMP_EQrrNotPnt_nv_V4, JMP_EQrrNotPt_ie_nv_V4,...
    O << ".new, "; 
    printOperand(MI, 1, O); 
    break;
  case 254:
    // JMP_GTUrrdnNotPnt_ie_nv_V4, JMP_GTUrrdnNotPnt_nv_V4, JMP_GTUrrdnNotPt_...
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 255:
    // JMP_cdnNotPnt, JMP_cdnPnt
    O << ".new) jump:nt "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 256:
    // JMP_cdnNotPt, JMP_cdnPt
    O << ".new) jump:t "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 257:
    // LDb_GP, LDrib_GP
    O << "=memb(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 258:
    // LDd_GP, LDrid_GP
    O << "=memd(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 259:
    // LDh_GP, LDrih_GP
    O << "=memh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 260:
    // LDrib, LDrib_ae, POST_LDrib
    O << " = memb("; 
    break;
  case 261:
    // LDrib_ae_indexed, LDrib_indexed, LDrib_indexed_V4, LDrib_indexed_shl_V...
    O << "=memb("; 
    printOperand(MI, 1, O); 
    break;
  case 262:
    // LDrid, POST_LDrid
    O << " = memd("; 
    break;
  case 263:
    // LDrid_indexed, LDrid_indexed_V4, LDrid_indexed_shl_V4
    O << "=memd("; 
    printOperand(MI, 1, O); 
    break;
  case 264:
    // LDrih, LDrih_ae, POST_LDrih
    O << " = memh("; 
    break;
  case 265:
    // LDrih_ae_indexed, LDrih_indexed, LDrih_indexed_V4, LDrih_indexed_shl_V...
    O << "=memh("; 
    printOperand(MI, 1, O); 
    break;
  case 266:
    // LDriub, LDriub_ae, LDriubit, POST_LDriub
    O << " = memub("; 
    break;
  case 267:
    // LDriub_GP, LDub_GP
    O << "=memub(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 268:
    // LDriub_ae_indexed, LDriub_ae_indexed_V4, LDriub_ae_indexed_shl_V4, LDr...
    O << "=memub("; 
    printOperand(MI, 1, O); 
    break;
  case 269:
    // LDriuh, LDriuh_ae, POST_LDriuh
    O << " = memuh("; 
    break;
  case 270:
    // LDriuh_GP, LDuh_GP
    O << "=memuh(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 271:
    // LDriuh_ae_indexed, LDriuh_ae_indexed_V4, LDriuh_ae_indexed_shl_V4, LDr...
    O << "=memuh("; 
    printOperand(MI, 1, O); 
    break;
  case 272:
    // LDriw, POST_LDriw
    O << " = memw("; 
    break;
  case 273:
    // LDriw_GP, LDw_GP
    O << "=memw(#"; 
    printGlobalOperand(MI, 1, O); 
    break;
  case 274:
    // LDriw_indexed, LDriw_indexed_V4, LDriw_indexed_shl_V4
    O << "=memw("; 
    printOperand(MI, 1, O); 
    break;
  case 275:
    // LOOP0_i
    O << ", #"; 
    printImmOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 276:
    // LSLd_rr_xor_V4
    O << " ^= lsl("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 277:
    // LSLi_V4
    O << " = lsl(#"; 
    printImmOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 278:
    // MEMb_ADDi_MEM_V4, MEMb_ADDr_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_ADDr_MEM_V4...
    O << ") += "; 
    break;
  case 279:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << "+#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 280:
    // MEMb_ANDr_MEM_V4, MEMh_ANDr_MEM_V4, MEMw_ANDr_MEM_V4
    O << ") &= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 281:
    // MEMb_ORr_MEM_V4, MEMh_ORr_MEM_V4, MEMw_ORr_MEM_V4
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 282:
    // MEMb_SUBi_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_SUBi_MEM_V4, MEMh_SUBr_MEM_V4...
    O << ") -= "; 
    break;
  case 283:
    // MPYI_rin
    O << " =- mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 284:
    // MPYI_riu
    O << " =+ mpyi("; 
    printOperand(MI, 1, O); 
    O << ", #"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 285:
    // ORi_ASLri_V4, ORi_LSRri_V4
    O << " = or(#"; 
    printImmOperand(MI, 1, O); 
    break;
  case 286:
    // POST_STbri, POST_STbri_nv_V4, POST_STdri, POST_SThri, POST_SThri_nv_V4...
    O << "++#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 1, O); 
    break;
  case 287:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    O << ") memb("; 
    break;
  case 288:
    // POST_STbri_cdnNotPt_V4, POST_STbri_cdnNotPt_nv_V4, POST_STbri_cdnPt_V4...
    O << ".new) memb("; 
    break;
  case 289:
    // POST_STdri_cNotPt, POST_STdri_cPt, STrid_cNotPt, STrid_cPt, STrid_inde...
    O << ") memd("; 
    break;
  case 290:
    // POST_STdri_cdnNotPt_V4, POST_STdri_cdnPt_V4, STrid_cdnNotPt_V4, STrid_...
    O << ".new) memd("; 
    break;
  case 291:
    // POST_SThri_cNotPt, POST_SThri_cNotPt_nv_V4, POST_SThri_cPt, POST_SThri...
    O << ") memh("; 
    break;
  case 292:
    // POST_SThri_cdnNotPt_V4, POST_SThri_cdnNotPt_nv_V4, POST_SThri_cdnPt_V4...
    O << ".new) memh("; 
    break;
  case 293:
    // POST_STwri_cNotPt, POST_STwri_cNotPt_nv_V4, POST_STwri_cPt, POST_STwri...
    O << ") memw("; 
    break;
  case 294:
    // POST_STwri_cdnNotPt_V4, POST_STwri_cdnNotPt_nv_V4, POST_STwri_cdnPt_V4...
    O << ".new) memw("; 
    break;
  case 295:
    // STb_GP, STh_GP, STrib, STrib_nv_V4, STrid, STrih, STrih_nv_V4, STriw, ...
    O << ") = "; 
    break;
  case 296:
    // STrib_GP, STrib_GP_nv_V4, STrib_indexed_shl_V4, STrib_indexed_shl_nv_V...
    O << '+'; 
    break;
  case 297:
    // STrib_shl_V4, STrib_shl_nv_V4, STrid_shl_V4, STrih_shl_V4, STrih_shl_n...
    O << "<<#"; 
    printImmOperand(MI, 1, O); 
    O << "+#"; 
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    break;
  case 298:
    // TCRETURNR, TCRETURNtext, TCRETURNtg
    O << " // TAILCALL"; 
    return;
    break;
  }


  // Fragment 2 encoded into 7 bits for 76 unique commands.
  switch ((Bits >> 13) & 127) {
  default:   // unreachable.
  case 0:
    // ADD64_rr, ADD_ri, ADD_rr, ADDr_ADDri_V4, ADDr_MPYir_V4, ADDr_MPYri_V4,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ADD_ri_cNotPt, ADD_ri_cPt, ADD_ri_cdnNotPt, ADD_ri_cdnPt, ADD_rr_cNotP...
    O << " = add("; 
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDi_ASLri_V4, ANDi_ASLri_V4, ORi_ASLri_V4, SUBi_ASLri_V4
    O << ", asl("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 3:
    // ADDi_LSRri_V4, ANDi_LSRri_V4, ORi_LSRri_V4, SUBi_LSRri_V4
    O << ", lsr("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case 4:
    // ADDi_MPYri_V4, ADDi_MPYrr_V4
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    break;
  case 5:
    // ADDri_acc, AND_ri, ASL, ASR_ri, ASRd_ri, CMPEQri, CMPGTUri, CMPGTri, C...
    O << ", #"; 
    break;
  case 6:
    // ADDrr_acc, AND_pp, AND_rr, AND_rr64, ANDr_ANDrr_V4, ASL_rr, ASLd_rr_xo...
    O << ", "; 
    break;
  case 7:
    // AND_pnotp, Hexagon_C2_andn, Hexagon_C2_orn
    O << ", !"; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 8:
    // AND_rr_cNotPt, AND_rr_cPt, AND_rr_cdnNotPt, AND_rr_cdnPt
    O << " = and("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 9:
    // ANDd_NOTd_V4, ANDr_ANDr_NOTr_V4, HEXAGON_M4_and_andn, HEXAGON_M4_or_an...
    O << ", ~"; 
    break;
  case 10:
    // ARGEXTEND, Hexagon_A2_tfr, Hexagon_A2_tfrp, Hexagon_C2_pxfer_map, Hexa...
    return;
    break;
  case 11:
    // ASLH_cNotPt_V4, ASLH_cPt_V4, ASLH_cdnNotPt_V4, ASLH_cdnPt_V4
    O << " = aslh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 12:
    // ASRH_cNotPt_V4, ASRH_cPt_V4, ASRH_cdnNotPt_V4, ASRH_cdnPt_V4
    O << " = asrh("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 13:
    // COMBINE_rr_cNotPt, COMBINE_rr_cPt, COMBINE_rr_cdnNotPt, COMBINE_rr_cdn...
    O << " = combine("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 14:
    // CONST32, CONST32GP_set, CONST32_set
    printGlobalOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 15:
    // CONST32_set_jt
    printJumpTable(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 16:
    // HEXAGON_S4_or_andix, Hexagon_C4_and_and, Hexagon_C4_and_andn, Hexagon_...
    O << ", and("; 
    printOperand(MI, 2, O); 
    break;
  case 17:
    // Hexagon_A2_abs, Hexagon_A2_absp, Hexagon_A2_neg, Hexagon_A2_negp, Hexa...
    O << ')'; 
    return;
    break;
  case 18:
    // Hexagon_A2_abssat, Hexagon_A2_negsat, Hexagon_A2_svaddhs, Hexagon_A2_s...
    O << "):sat"; 
    return;
    break;
  case 19:
    // Hexagon_A2_combine_hh, Hexagon_A2_combine_hl, Hexagon_A2_subh_h16_hh, ...
    O << ".H, "; 
    break;
  case 20:
    // Hexagon_A2_combine_lh, Hexagon_A2_combine_ll, Hexagon_A2_subh_h16_lh, ...
    O << ".L, "; 
    break;
  case 21:
    // Hexagon_A2_svavghs, Hexagon_A2_vavghr, Hexagon_A2_vavgubr, Hexagon_A2_...
    O << "):rnd"; 
    return;
    break;
  case 22:
    // Hexagon_A2_vavghcr, Hexagon_A2_vavgwcr
    O << "):crnd"; 
    return;
    break;
  case 23:
    // Hexagon_A2_vnavghcr, Hexagon_A2_vnavgwcr
    O << "):crnd:sat"; 
    return;
    break;
  case 24:
    // Hexagon_A2_vnavghr, Hexagon_A2_vnavgwr, Hexagon_M2_cmpyrs_s0, Hexagon_...
    O << "):rnd:sat"; 
    return;
    break;
  case 25:
    // Hexagon_C4_and_or, Hexagon_C4_and_orn, Hexagon_C4_or_or, Hexagon_C4_or...
    O << ", or("; 
    printOperand(MI, 2, O); 
    break;
  case 26:
    // Hexagon_M2_cmacs_s1, Hexagon_M2_cmpys_s1, Hexagon_M2_cnacs_s1, Hexagon...
    O << "):<<1:sat"; 
    return;
    break;
  case 27:
    // Hexagon_M2_cmacsc_s0, Hexagon_M2_cmpysc_s0, Hexagon_M2_cnacsc_s0
    O << "*):sat"; 
    return;
    break;
  case 28:
    // Hexagon_M2_cmacsc_s1, Hexagon_M2_cmpysc_s1, Hexagon_M2_cnacsc_s1
    O << "*):<<1:sat"; 
    return;
    break;
  case 29:
    // Hexagon_M2_cmpyrs_s1, Hexagon_M2_mmachs_rs1, Hexagon_M2_mmacls_rs1, He...
    O << "):<<1:rnd:sat"; 
    return;
    break;
  case 30:
    // Hexagon_M2_cmpyrsc_s0
    O << "*):rnd:sat"; 
    return;
    break;
  case 31:
    // Hexagon_M2_cmpyrsc_s1
    O << "*):<<1:rnd:sat"; 
    return;
    break;
  case 32:
    // Hexagon_M2_vrcmaci_s0c, Hexagon_M2_vrcmacr_s0c, Hexagon_M2_vrcmpyi_s0c...
    O << "*)"; 
    return;
    break;
  case 33:
    // JMP_EQriNotPnt_ie_nv_V4, JMP_EQriNotPnt_nv_V4, JMP_EQriNotPt_ie_nv_V4,...
    printImmOperand(MI, 1, O); 
    break;
  case 34:
    // JMP_EQriNotPntneg_ie_nv_V4, JMP_EQriNotPntneg_nv_V4, JMP_EQriNotPtneg_...
    printNOneImmOperand(MI, 1, O); 
    break;
  case 35:
    // JMP_EQrrNotPnt_ie_nv_V4, JMP_EQrrNotPnt_nv_V4, JMP_EQrrPnt_ie_nv_V4, J...
    O << ")) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 36:
    // JMP_EQrrNotPt_ie_nv_V4, JMP_EQrrNotPt_nv_V4, JMP_EQrrPt_ie_nv_V4, JMP_...
    O << ")) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 37:
    // JMP_GTUrrdnNotPnt_ie_nv_V4, JMP_GTUrrdnNotPnt_nv_V4, JMP_GTUrrdnPnt_ie...
    O << ".new)) jump:nt "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 38:
    // JMP_GTUrrdnNotPt_ie_nv_V4, JMP_GTUrrdnNotPt_nv_V4, JMP_GTUrrdnPt_ie_nv...
    O << ".new)) jump:t "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 39:
    // LDrib, LDrib_ae, LDrid, LDrih, LDrih_ae, LDriub, LDriub_ae, LDriubit, ...
    printMEMriOperand(MI, 1, O); 
    break;
  case 40:
    // LDrib_GP, LDrib_indexed_V4, LDrib_indexed_shl_V4, LDrid_GP, LDrid_inde...
    O << '+'; 
    break;
  case 41:
    // LDrib_ae_indexed, LDrib_indexed, LDrid_indexed, LDrih_ae_indexed, LDri...
    O << "+#"; 
    printImmOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 42:
    // LDrib_cNotPt, LDrib_cPt, LDrib_cdnNotPt, LDrib_cdnPt, LDrib_indexed_cN...
    O << " = memb("; 
    break;
  case 43:
    // LDrib_indexed_cNotPt_V4, LDrib_indexed_cPt_V4, LDrib_indexed_cdnNotPt_...
    O << "=memb("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 44:
    // LDrid_cNotPt, LDrid_cPt, LDrid_cdnNotPt, LDrid_cdnPt, POST_LDrid_cNotP...
    O << " = memd("; 
    break;
  case 45:
    // LDrid_indexed_cNotPt, LDrid_indexed_cNotPt_V4, LDrid_indexed_cPt, LDri...
    O << "=memd("; 
    printOperand(MI, 2, O); 
    break;
  case 46:
    // LDrih_cNotPt, LDrih_cPt, LDrih_cdnNotPt, LDrih_cdnPt, LDrih_indexed_cN...
    O << " = memh("; 
    break;
  case 47:
    // LDrih_indexed_cNotPt_V4, LDrih_indexed_cPt_V4, LDrih_indexed_cdnNotPt_...
    O << "=memh("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 48:
    // LDriub_cNotPt, LDriub_cPt, LDriub_cdnNotPt, LDriub_cdnPt, LDriub_index...
    O << " = memub("; 
    break;
  case 49:
    // LDriub_indexed_cNotPt_V4, LDriub_indexed_cPt_V4, LDriub_indexed_cdnNot...
    O << "=memub("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 50:
    // LDriuh_cNotPt, LDriuh_cPt, LDriuh_cdnNotPt, LDriuh_cdnPt, LDriuh_index...
    O << " = memuh("; 
    break;
  case 51:
    // LDriuh_indexed_cNotPt_V4, LDriuh_indexed_cPt_V4, LDriuh_indexed_cdnNot...
    O << "=memuh("; 
    printOperand(MI, 2, O); 
    O << '+'; 
    printOperand(MI, 3, O); 
    break;
  case 52:
    // LDriw_cNotPt, LDriw_cPt, LDriw_cdnNotPt, LDriw_cdnPt, POST_LDriw_cNotP...
    O << " = memw("; 
    break;
  case 53:
    // LDriw_indexed_cNotPt, LDriw_indexed_cNotPt_V4, LDriw_indexed_cPt, LDri...
    O << "=memw("; 
    printOperand(MI, 2, O); 
    break;
  case 54:
    // MAXw_dd, MAXw_rr, MEMb_ADDr_MEM_V4, MEMb_SUBr_MEM_V4, MEMh_ADDr_MEM_V4...
    printOperand(MI, 2, O); 
    break;
  case 55:
    // MEMb_ADDi_MEM_V4, MEMb_SUBi_MEM_V4, MEMh_ADDi_MEM_V4, MEMh_SUBi_MEM_V4...
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 56:
    // MEMb_ADDi_indexed_MEM_V4, MEMb_ADDr_indexed_MEM_V4, MEMb_ANDr_indexed_...
    O << ") += "; 
    break;
  case 57:
    // MEMb_ORr_indexed_MEM_V4, MEMh_ORr_indexed_MEM_V4, MEMw_ORr_indexed_MEM...
    O << ") |= "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 58:
    // MEMb_SUBi_indexed_MEM_V4, MEMb_SUBr_indexed_MEM_V4, MEMh_SUBi_indexed_...
    O << ") -= "; 
    break;
  case 59:
    // OR_rr_cNotPt, OR_rr_cPt, OR_rr_cdnNotPt, OR_rr_cdnPt
    O << " = or("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 60:
    // POST_STbri_cNotPt, POST_STbri_cNotPt_nv_V4, POST_STbri_cPt, POST_STbri...
    printOperand(MI, 3, O); 
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 61:
    // POST_STbri_nv_V4, POST_SThri_nv_V4, POST_STwri_nv_V4, STrib_shl_nv_V4,...
    O << ".new"; 
    return;
    break;
  case 62:
    // STrib_imm_V4, STrih_imm_V4, STriw_imm_V4
    O << ") = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 63:
    // STrib_indexed, STrib_indexed_nv_V4, STrid_indexed, STrih_indexed, STri...
    O << ") = "; 
    printOperand(MI, 2, O); 
    break;
  case 64:
    // SUB_rr_cNotPt, SUB_rr_cPt, SUB_rr_cdnNotPt, SUB_rr_cdnPt
    O << " = sub("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 65:
    // SXTB_cNotPt_V4, SXTB_cPt_V4, SXTB_cdnNotPt_V4, SXTB_cdnPt_V4
    O << " = sxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 66:
    // SXTH_cNotPt_V4, SXTH_cPt_V4, SXTH_cdnNotPt_V4, SXTH_cdnPt_V4
    O << " = sxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 67:
    // TFRI_cNotPt, TFRI_cPt, TFRI_cdnNotPt, TFRI_cdnPt
    O << " = #"; 
    printImmOperand(MI, 2, O); 
    return;
    break;
  case 68:
    // TFR_FI
    printFrameIndexOperand(MI, 1, O); 
    O << ')'; 
    return;
    break;
  case 69:
    // TFR_PdFalse
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ')'; 
    return;
    break;
  case 70:
    // TFR_PdRs
    O << "  // Should almost never emit!"; 
    return;
    break;
  case 71:
    // TFR_RsPd
    O << "  // Should almost never emit this"; 
    return;
    break;
  case 72:
    // TFR_cNotPt, TFR_cPt, TFR_cdnNotPt, TFR_cdnPt
    O << " = "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 73:
    // XOR_rr_cNotPt, XOR_rr_cPt, XOR_rr_cdnNotPt, XOR_rr_cdnPt
    O << " = xor("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case 74:
    // ZXTB_cNotPt_V4, ZXTB_cPt_V4, ZXTB_cdnNotPt_V4, ZXTB_cdnPt_V4
    O << " = zxtb("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  case 75:
    // ZXTH_cNotPt_V4, ZXTH_cPt_V4, ZXTH_cdnNotPt_V4, ZXTH_cdnPt_V4
    O << " = zxth("; 
    printOperand(MI, 2, O); 
    O << ')'; 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case Hexagon::ADD64_rr:
  case Hexagon::ADD_rr:
  case Hexagon::ADD_rr_cNotPt:
  case Hexagon::ADD_rr_cPt:
  case Hexagon::ADD_rr_cdnNotPt:
  case Hexagon::ADD_rr_cdnPt:
  case Hexagon::Hexagon_A2_add:
  case Hexagon::Hexagon_A2_addp:
  case Hexagon::Hexagon_A2_addpsat:
  case Hexagon::Hexagon_A2_addsp:
  case Hexagon::Hexagon_A2_max:
  case Hexagon::Hexagon_A2_maxp:
  case Hexagon::Hexagon_A2_min:
  case Hexagon::Hexagon_A2_xor:
  case Hexagon::Hexagon_A2_xorp:
  case Hexagon::Hexagon_C2_xor:
  case Hexagon::Hexagon_C4_and_and:
  case Hexagon::Hexagon_C4_and_or:
  case Hexagon::Hexagon_C4_or_and:
  case Hexagon::Hexagon_C4_or_or:
  case Hexagon::MAXw_dd:
  case Hexagon::MAXw_rr:
  case Hexagon::MINw_dd:
  case Hexagon::MINw_rr:
  case Hexagon::XOR_pp:
  case Hexagon::XOR_rr:
  case Hexagon::XOR_rr64:
    O << ", "; 
    switch (MI->getOpcode()) {
    case Hexagon::ADD64_rr: 
    case Hexagon::ADD_rr: 
    case Hexagon::Hexagon_A2_add: 
    case Hexagon::Hexagon_A2_addp: 
    case Hexagon::Hexagon_A2_addpsat: 
    case Hexagon::Hexagon_A2_addsp: 
    case Hexagon::Hexagon_A2_max: 
    case Hexagon::Hexagon_A2_maxp: 
    case Hexagon::Hexagon_A2_min: 
    case Hexagon::Hexagon_A2_xor: 
    case Hexagon::Hexagon_A2_xorp: 
    case Hexagon::Hexagon_C2_xor: 
    case Hexagon::XOR_pp: 
    case Hexagon::XOR_rr: 
    case Hexagon::XOR_rr64: printOperand(MI, 2, O); break;
    case Hexagon::ADD_rr_cNotPt: 
    case Hexagon::ADD_rr_cPt: 
    case Hexagon::ADD_rr_cdnNotPt: 
    case Hexagon::ADD_rr_cdnPt: 
    case Hexagon::Hexagon_C4_and_and: 
    case Hexagon::Hexagon_C4_and_or: 
    case Hexagon::Hexagon_C4_or_and: 
    case Hexagon::Hexagon_C4_or_or: printOperand(MI, 3, O); break;
    case Hexagon::MAXw_dd: 
    case Hexagon::MAXw_rr: 
    case Hexagon::MINw_dd: 
    case Hexagon::MINw_rr: printOperand(MI, 1, O); break;
    }
    O << ')'; 
    return;
    break;
  case Hexagon::ADD_ri:
  case Hexagon::ADD_ri_cNotPt:
  case Hexagon::ADD_ri_cPt:
  case Hexagon::ADD_ri_cdnNotPt:
  case Hexagon::ADD_ri_cdnPt:
  case Hexagon::ADJDYNALLOC:
  case Hexagon::Hexagon_A2_addi:
    O << ", #"; 
    switch (MI->getOpcode()) {
    case Hexagon::ADD_ri: 
    case Hexagon::ADJDYNALLOC: 
    case Hexagon::Hexagon_A2_addi: printImmOperand(MI, 2, O); break;
    case Hexagon::ADD_ri_cNotPt: 
    case Hexagon::ADD_ri_cPt: 
    case Hexagon::ADD_ri_cdnNotPt: 
    case Hexagon::ADD_ri_cdnPt: printImmOperand(MI, 3, O); break;
    }
    O << ')'; 
    return;
    break;
  case Hexagon::ADDi_MPYri_V4:
  case Hexagon::HEXAGON_S4_or_andix:
  case Hexagon::ORr_ANDri_V4:
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case Hexagon::ADDi_MPYrr_V4:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case Hexagon::ADDr_ADDri_V4:
  case Hexagon::ADDr_MPYri_V4:
    switch (MI->getOpcode()) {
    case Hexagon::ADDr_ADDri_V4: O << ", add("; break;
    case Hexagon::ADDr_MPYri_V4: O << ", mpyi("; break;
    }
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case Hexagon::ADDr_MPYir_V4:
  case Hexagon::ADDr_SUBri_V4:
  case Hexagon::ADDri_SUBr_V4:
    switch (MI->getOpcode()) {
    case Hexagon::ADDr_MPYir_V4: O << ", mpyi(#"; break;
    case Hexagon::ADDr_SUBri_V4: 
    case Hexagon::ADDri_SUBr_V4: O << ", sub(#"; break;
    }
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case Hexagon::ADDr_MPYrr_V4:
    O << ", mpyi("; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "))"; 
    return;
    break;
  case Hexagon::ADDri_acc:
  case Hexagon::ADDrr_acc:
  case Hexagon::AND_pp:
  case Hexagon::AND_ri:
  case Hexagon::AND_rr:
  case Hexagon::AND_rr64:
  case Hexagon::ANDd_NOTd_V4:
  case Hexagon::ANDr_ANDr_NOTr_V4:
  case Hexagon::ANDr_ANDrr_V4:
  case Hexagon::ASL:
  case Hexagon::ASL_rr:
  case Hexagon::ASLd_rr_xor_V4:
  case Hexagon::ASR_ri:
  case Hexagon::ASR_rr:
  case Hexagon::ASR_rr_acc:
  case Hexagon::ASRd_ri:
  case Hexagon::ASRd_rr:
  case Hexagon::CMPEHexagon4rr:
  case Hexagon::CMPEQri:
  case Hexagon::CMPEQrr:
  case Hexagon::CMPGT64rr:
  case Hexagon::CMPGTU64rr:
  case Hexagon::CMPGTUri:
  case Hexagon::CMPGTUrr:
  case Hexagon::CMPGTri:
  case Hexagon::CMPGTrr:
  case Hexagon::CMPbEQri_V4:
  case Hexagon::CMPbEQrr_sbsb_V4:
  case Hexagon::CMPbEQrr_ubub_V4:
  case Hexagon::CMPbGTUri_V4:
  case Hexagon::CMPbGTUrr_V4:
  case Hexagon::CMPbGTri_V4:
  case Hexagon::CMPbGTrr_V4:
  case Hexagon::CMPhEQri_V4:
  case Hexagon::CMPhEQrr_shl_V4:
  case Hexagon::CMPhEQrr_xor_V4:
  case Hexagon::CMPhGTUri_V4:
  case Hexagon::CMPhGTUrr_V4:
  case Hexagon::CMPhGTri_V4:
  case Hexagon::CMPhGTrr_shl_V4:
  case Hexagon::COMBINE_rr:
  case Hexagon::HEXAGON_A4_cround_ri:
  case Hexagon::HEXAGON_A4_cround_rr:
  case Hexagon::HEXAGON_A4_round_ri:
  case Hexagon::HEXAGON_A4_round_rr:
  case Hexagon::HEXAGON_C2_bitsclr:
  case Hexagon::HEXAGON_C2_bitsclri:
  case Hexagon::HEXAGON_M4_and_and:
  case Hexagon::HEXAGON_M4_and_andn:
  case Hexagon::HEXAGON_M4_or_and:
  case Hexagon::HEXAGON_M4_or_andn:
  case Hexagon::HEXAGON_M4_or_or:
  case Hexagon::HEXAGON_M4_xor_and:
  case Hexagon::HEXAGON_M4_xor_andn:
  case Hexagon::HEXAGON_S2_insert_rp:
  case Hexagon::HEXAGON_S2_insertp_rp:
  case Hexagon::HEXAGON_S2_vspliceib:
  case Hexagon::HEXAGON_S2_vsplicerb:
  case Hexagon::HEXAGON_S4_or_andi:
  case Hexagon::HEXAGON_S4_or_ori:
  case Hexagon::Hexagon_A2_and:
  case Hexagon::Hexagon_A2_andir:
  case Hexagon::Hexagon_A2_andp:
  case Hexagon::Hexagon_A2_combineii:
  case Hexagon::Hexagon_A2_combinew:
  case Hexagon::Hexagon_A2_or:
  case Hexagon::Hexagon_A2_orir:
  case Hexagon::Hexagon_A2_orp:
  case Hexagon::Hexagon_A2_sub:
  case Hexagon::Hexagon_A2_subp:
  case Hexagon::Hexagon_A2_subri:
  case Hexagon::Hexagon_A4_andn:
  case Hexagon::Hexagon_A4_combineir:
  case Hexagon::Hexagon_A4_combineri:
  case Hexagon::Hexagon_A4_orn:
  case Hexagon::Hexagon_A4_rcmpeq:
  case Hexagon::Hexagon_A4_rcmpeqi:
  case Hexagon::Hexagon_A4_rcmpneq:
  case Hexagon::Hexagon_A4_rcmpneqi:
  case Hexagon::Hexagon_C2_and:
  case Hexagon::Hexagon_C2_cmpeq:
  case Hexagon::Hexagon_C2_cmpeqi:
  case Hexagon::Hexagon_C2_cmpeqp:
  case Hexagon::Hexagon_C2_cmpgt:
  case Hexagon::Hexagon_C2_cmpgti:
  case Hexagon::Hexagon_C2_cmpgtp:
  case Hexagon::Hexagon_C2_cmpgtu:
  case Hexagon::Hexagon_C2_cmpgtui:
  case Hexagon::Hexagon_C2_cmpgtup:
  case Hexagon::Hexagon_C2_or:
  case Hexagon::Hexagon_C4_cmplte:
  case Hexagon::Hexagon_C4_cmpltei:
  case Hexagon::Hexagon_C4_cmplteu:
  case Hexagon::Hexagon_C4_cmplteui:
  case Hexagon::Hexagon_C4_cmpneq:
  case Hexagon::Hexagon_C4_cmpneqi:
  case Hexagon::Hexagon_M2_acci:
  case Hexagon::Hexagon_M2_accii:
  case Hexagon::Hexagon_M2_dpmpyss_acc_s0:
  case Hexagon::Hexagon_M2_dpmpyss_nac_s0:
  case Hexagon::Hexagon_M2_dpmpyss_s0:
  case Hexagon::Hexagon_M2_dpmpyuu_acc_s0:
  case Hexagon::Hexagon_M2_dpmpyuu_nac_s0:
  case Hexagon::Hexagon_M2_dpmpyuu_s0:
  case Hexagon::Hexagon_M2_maci:
  case Hexagon::Hexagon_M2_macsip:
  case Hexagon::Hexagon_M2_mpy_up:
  case Hexagon::Hexagon_M2_mpyi:
  case Hexagon::Hexagon_M2_mpyu_up:
  case Hexagon::Hexagon_M2_nacci:
  case Hexagon::Hexagon_M2_naccii:
  case Hexagon::Hexagon_S2_asl_i_p:
  case Hexagon::Hexagon_S2_asl_i_p_acc:
  case Hexagon::Hexagon_S2_asl_i_p_and:
  case Hexagon::Hexagon_S2_asl_i_p_nac:
  case Hexagon::Hexagon_S2_asl_i_p_or:
  case Hexagon::Hexagon_S2_asl_i_p_xacc:
  case Hexagon::Hexagon_S2_asl_i_r:
  case Hexagon::Hexagon_S2_asl_i_r_acc:
  case Hexagon::Hexagon_S2_asl_i_r_and:
  case Hexagon::Hexagon_S2_asl_i_r_nac:
  case Hexagon::Hexagon_S2_asl_i_r_or:
  case Hexagon::Hexagon_S2_asl_i_r_xacc:
  case Hexagon::Hexagon_S2_asl_r_p:
  case Hexagon::Hexagon_S2_asl_r_p_acc:
  case Hexagon::Hexagon_S2_asl_r_p_and:
  case Hexagon::Hexagon_S2_asl_r_p_nac:
  case Hexagon::Hexagon_S2_asl_r_p_or:
  case Hexagon::Hexagon_S2_asl_r_r:
  case Hexagon::Hexagon_S2_asl_r_r_acc:
  case Hexagon::Hexagon_S2_asl_r_r_and:
  case Hexagon::Hexagon_S2_asl_r_r_nac:
  case Hexagon::Hexagon_S2_asl_r_r_or:
  case Hexagon::Hexagon_S2_asr_i_p:
  case Hexagon::Hexagon_S2_asr_i_p_acc:
  case Hexagon::Hexagon_S2_asr_i_p_and:
  case Hexagon::Hexagon_S2_asr_i_p_nac:
  case Hexagon::Hexagon_S2_asr_i_p_or:
  case Hexagon::Hexagon_S2_asr_i_r:
  case Hexagon::Hexagon_S2_asr_i_r_acc:
  case Hexagon::Hexagon_S2_asr_i_r_and:
  case Hexagon::Hexagon_S2_asr_i_r_nac:
  case Hexagon::Hexagon_S2_asr_i_r_or:
  case Hexagon::Hexagon_S2_asr_i_svw_trun:
  case Hexagon::Hexagon_S2_asr_i_vw:
  case Hexagon::Hexagon_S2_asr_r_p:
  case Hexagon::Hexagon_S2_asr_r_p_acc:
  case Hexagon::Hexagon_S2_asr_r_p_and:
  case Hexagon::Hexagon_S2_asr_r_p_nac:
  case Hexagon::Hexagon_S2_asr_r_p_or:
  case Hexagon::Hexagon_S2_asr_r_r:
  case Hexagon::Hexagon_S2_asr_r_r_acc:
  case Hexagon::Hexagon_S2_asr_r_r_and:
  case Hexagon::Hexagon_S2_asr_r_r_nac:
  case Hexagon::Hexagon_S2_asr_r_r_or:
  case Hexagon::Hexagon_S2_asr_r_svw_trun:
  case Hexagon::Hexagon_S2_asr_r_vw:
  case Hexagon::Hexagon_S2_clrbit_i:
  case Hexagon::Hexagon_S2_clrbit_r:
  case Hexagon::Hexagon_S2_extractu_rp:
  case Hexagon::Hexagon_S2_extractup_rp:
  case Hexagon::Hexagon_S2_lsr_i_p:
  case Hexagon::Hexagon_S2_lsr_i_p_acc:
  case Hexagon::Hexagon_S2_lsr_i_p_and:
  case Hexagon::Hexagon_S2_lsr_i_p_nac:
  case Hexagon::Hexagon_S2_lsr_i_p_or:
  case Hexagon::Hexagon_S2_lsr_i_p_xacc:
  case Hexagon::Hexagon_S2_lsr_i_r:
  case Hexagon::Hexagon_S2_lsr_i_r_acc:
  case Hexagon::Hexagon_S2_lsr_i_r_and:
  case Hexagon::Hexagon_S2_lsr_i_r_nac:
  case Hexagon::Hexagon_S2_lsr_i_r_or:
  case Hexagon::Hexagon_S2_lsr_i_r_xacc:
  case Hexagon::Hexagon_S2_lsr_r_p:
  case Hexagon::Hexagon_S2_lsr_r_p_acc:
  case Hexagon::Hexagon_S2_lsr_r_p_and:
  case Hexagon::Hexagon_S2_lsr_r_p_nac:
  case Hexagon::Hexagon_S2_lsr_r_p_or:
  case Hexagon::Hexagon_S2_lsr_r_r:
  case Hexagon::Hexagon_S2_lsr_r_r_acc:
  case Hexagon::Hexagon_S2_lsr_r_r_and:
  case Hexagon::Hexagon_S2_lsr_r_r_nac:
  case Hexagon::Hexagon_S2_lsr_r_r_or:
  case Hexagon::Hexagon_S2_setbit_i:
  case Hexagon::Hexagon_S2_setbit_r:
  case Hexagon::Hexagon_S2_togglebit_i:
  case Hexagon::Hexagon_S2_togglebit_r:
  case Hexagon::Hexagon_S2_tstbit_i:
  case Hexagon::Hexagon_S2_tstbit_r:
  case Hexagon::Hexagon_S2_valignib:
  case Hexagon::Hexagon_S2_valignrb:
  case Hexagon::Hexagon_S4_andnp:
  case Hexagon::Hexagon_S4_ornp:
  case Hexagon::LDrib_GP:
  case Hexagon::LDrib_cNotPt:
  case Hexagon::LDrib_cPt:
  case Hexagon::LDrib_cdnNotPt:
  case Hexagon::LDrib_cdnPt:
  case Hexagon::LDrid_GP:
  case Hexagon::LDrid_cNotPt:
  case Hexagon::LDrid_cPt:
  case Hexagon::LDrid_cdnNotPt:
  case Hexagon::LDrid_cdnPt:
  case Hexagon::LDrih_GP:
  case Hexagon::LDrih_cNotPt:
  case Hexagon::LDrih_cPt:
  case Hexagon::LDrih_cdnNotPt:
  case Hexagon::LDrih_cdnPt:
  case Hexagon::LDriub_GP:
  case Hexagon::LDriub_cNotPt:
  case Hexagon::LDriub_cPt:
  case Hexagon::LDriub_cdnNotPt:
  case Hexagon::LDriub_cdnPt:
  case Hexagon::LDriuh_GP:
  case Hexagon::LDriuh_cNotPt:
  case Hexagon::LDriuh_cPt:
  case Hexagon::LDriuh_cdnNotPt:
  case Hexagon::LDriuh_cdnPt:
  case Hexagon::LDriw_GP:
  case Hexagon::LDriw_cNotPt:
  case Hexagon::LDriw_cPt:
  case Hexagon::LDriw_cdnNotPt:
  case Hexagon::LDriw_cdnPt:
  case Hexagon::LSR_ri:
  case Hexagon::LSR_rr:
  case Hexagon::LSRd_ri:
  case Hexagon::LSRd_ri_acc:
  case Hexagon::LSRd_rr:
  case Hexagon::LSRd_rr_xor_V4:
  case Hexagon::MPY:
  case Hexagon::MPY64:
  case Hexagon::MPY64_acc:
  case Hexagon::MPY64_sub:
  case Hexagon::MPYI:
  case Hexagon::MPYI_acc_ri:
  case Hexagon::MPYI_acc_rr:
  case Hexagon::MPYI_ri:
  case Hexagon::MPYU:
  case Hexagon::MPYU64:
  case Hexagon::MPYU64_acc:
  case Hexagon::MPYU64_sub:
  case Hexagon::MPY_trsext:
  case Hexagon::OR_pp:
  case Hexagon::OR_ri:
  case Hexagon::OR_rr:
  case Hexagon::OR_rr64:
  case Hexagon::ORd_NOTd_V4:
  case Hexagon::ORr_ANDr_NOTr_V4:
  case Hexagon::ORr_ANDri2_V4:
  case Hexagon::ORr_ANDrr_V4:
  case Hexagon::ORr_ORri_V4:
  case Hexagon::ORr_ORrr_V4:
  case Hexagon::SUB64_rr:
  case Hexagon::SUB_rr:
  case Hexagon::SUBri_acc:
  case Hexagon::SUBrr_acc:
  case Hexagon::VALIGN_rrp:
  case Hexagon::VSPLICE_rrp:
  case Hexagon::XORr_ANDr_NOTr_V4:
  case Hexagon::XORr_ANDrr_V4:
    switch (MI->getOpcode()) {
    case Hexagon::ADDri_acc: 
    case Hexagon::HEXAGON_S2_vspliceib: 
    case Hexagon::HEXAGON_S4_or_andi: 
    case Hexagon::HEXAGON_S4_or_ori: 
    case Hexagon::Hexagon_M2_accii: 
    case Hexagon::Hexagon_M2_macsip: 
    case Hexagon::Hexagon_M2_naccii: 
    case Hexagon::Hexagon_S2_asl_i_p_acc: 
    case Hexagon::Hexagon_S2_asl_i_p_and: 
    case Hexagon::Hexagon_S2_asl_i_p_nac: 
    case Hexagon::Hexagon_S2_asl_i_p_or: 
    case Hexagon::Hexagon_S2_asl_i_p_xacc: 
    case Hexagon::Hexagon_S2_asl_i_r_acc: 
    case Hexagon::Hexagon_S2_asl_i_r_and: 
    case Hexagon::Hexagon_S2_asl_i_r_nac: 
    case Hexagon::Hexagon_S2_asl_i_r_or: 
    case Hexagon::Hexagon_S2_asl_i_r_xacc: 
    case Hexagon::Hexagon_S2_asr_i_p_acc: 
    case Hexagon::Hexagon_S2_asr_i_p_and: 
    case Hexagon::Hexagon_S2_asr_i_p_nac: 
    case Hexagon::Hexagon_S2_asr_i_p_or: 
    case Hexagon::Hexagon_S2_asr_i_r_acc: 
    case Hexagon::Hexagon_S2_asr_i_r_and: 
    case Hexagon::Hexagon_S2_asr_i_r_nac: 
    case Hexagon::Hexagon_S2_asr_i_r_or: 
    case Hexagon::Hexagon_S2_lsr_i_p_acc: 
    case Hexagon::Hexagon_S2_lsr_i_p_and: 
    case Hexagon::Hexagon_S2_lsr_i_p_nac: 
    case Hexagon::Hexagon_S2_lsr_i_p_or: 
    case Hexagon::Hexagon_S2_lsr_i_p_xacc: 
    case Hexagon::Hexagon_S2_lsr_i_r_acc: 
    case Hexagon::Hexagon_S2_lsr_i_r_and: 
    case Hexagon::Hexagon_S2_lsr_i_r_nac: 
    case Hexagon::Hexagon_S2_lsr_i_r_or: 
    case Hexagon::Hexagon_S2_lsr_i_r_xacc: 
    case Hexagon::Hexagon_S2_valignib: 
    case Hexagon::LSRd_ri_acc: 
    case Hexagon::MPYI_acc_ri: 
    case Hexagon::ORr_ANDri2_V4: 
    case Hexagon::ORr_ORri_V4: 
    case Hexagon::SUBri_acc: printImmOperand(MI, 3, O); break;
    case Hexagon::ADDrr_acc: 
    case Hexagon::ANDr_ANDr_NOTr_V4: 
    case Hexagon::ANDr_ANDrr_V4: 
    case Hexagon::ASLd_rr_xor_V4: 
    case Hexagon::ASR_rr_acc: 
    case Hexagon::HEXAGON_M4_and_and: 
    case Hexagon::HEXAGON_M4_and_andn: 
    case Hexagon::HEXAGON_M4_or_and: 
    case Hexagon::HEXAGON_M4_or_andn: 
    case Hexagon::HEXAGON_M4_or_or: 
    case Hexagon::HEXAGON_M4_xor_and: 
    case Hexagon::HEXAGON_M4_xor_andn: 
    case Hexagon::HEXAGON_S2_insert_rp: 
    case Hexagon::HEXAGON_S2_insertp_rp: 
    case Hexagon::HEXAGON_S2_vsplicerb: 
    case Hexagon::Hexagon_M2_acci: 
    case Hexagon::Hexagon_M2_dpmpyss_acc_s0: 
    case Hexagon::Hexagon_M2_dpmpyss_nac_s0: 
    case Hexagon::Hexagon_M2_dpmpyuu_acc_s0: 
    case Hexagon::Hexagon_M2_dpmpyuu_nac_s0: 
    case Hexagon::Hexagon_M2_maci: 
    case Hexagon::Hexagon_M2_nacci: 
    case Hexagon::Hexagon_S2_asl_r_p_acc: 
    case Hexagon::Hexagon_S2_asl_r_p_and: 
    case Hexagon::Hexagon_S2_asl_r_p_nac: 
    case Hexagon::Hexagon_S2_asl_r_p_or: 
    case Hexagon::Hexagon_S2_asl_r_r_acc: 
    case Hexagon::Hexagon_S2_asl_r_r_and: 
    case Hexagon::Hexagon_S2_asl_r_r_nac: 
    case Hexagon::Hexagon_S2_asl_r_r_or: 
    case Hexagon::Hexagon_S2_asr_r_p_acc: 
    case Hexagon::Hexagon_S2_asr_r_p_and: 
    case Hexagon::Hexagon_S2_asr_r_p_nac: 
    case Hexagon::Hexagon_S2_asr_r_p_or: 
    case Hexagon::Hexagon_S2_asr_r_r_acc: 
    case Hexagon::Hexagon_S2_asr_r_r_and: 
    case Hexagon::Hexagon_S2_asr_r_r_nac: 
    case Hexagon::Hexagon_S2_asr_r_r_or: 
    case Hexagon::Hexagon_S2_lsr_r_p_acc: 
    case Hexagon::Hexagon_S2_lsr_r_p_and: 
    case Hexagon::Hexagon_S2_lsr_r_p_nac: 
    case Hexagon::Hexagon_S2_lsr_r_p_or: 
    case Hexagon::Hexagon_S2_lsr_r_r_acc: 
    case Hexagon::Hexagon_S2_lsr_r_r_and: 
    case Hexagon::Hexagon_S2_lsr_r_r_nac: 
    case Hexagon::Hexagon_S2_lsr_r_r_or: 
    case Hexagon::Hexagon_S2_valignrb: 
    case Hexagon::LSRd_rr_xor_V4: 
    case Hexagon::MPY64_acc: 
    case Hexagon::MPY64_sub: 
    case Hexagon::MPYI_acc_rr: 
    case Hexagon::MPYU64_acc: 
    case Hexagon::MPYU64_sub: 
    case Hexagon::ORr_ANDr_NOTr_V4: 
    case Hexagon::ORr_ANDrr_V4: 
    case Hexagon::ORr_ORrr_V4: 
    case Hexagon::SUBrr_acc: 
    case Hexagon::VALIGN_rrp: 
    case Hexagon::VSPLICE_rrp: 
    case Hexagon::XORr_ANDr_NOTr_V4: 
    case Hexagon::XORr_ANDrr_V4: printOperand(MI, 3, O); break;
    case Hexagon::AND_pp: 
    case Hexagon::AND_rr: 
    case Hexagon::AND_rr64: 
    case Hexagon::ANDd_NOTd_V4: 
    case Hexagon::ASL_rr: 
    case Hexagon::ASR_rr: 
    case Hexagon::ASRd_rr: 
    case Hexagon::CMPEHexagon4rr: 
    case Hexagon::CMPEQrr: 
    case Hexagon::CMPGT64rr: 
    case Hexagon::CMPGTU64rr: 
    case Hexagon::CMPGTUrr: 
    case Hexagon::CMPGTrr: 
    case Hexagon::CMPbEQrr_sbsb_V4: 
    case Hexagon::CMPbEQrr_ubub_V4: 
    case Hexagon::CMPbGTUrr_V4: 
    case Hexagon::CMPbGTrr_V4: 
    case Hexagon::CMPhEQrr_shl_V4: 
    case Hexagon::CMPhEQrr_xor_V4: 
    case Hexagon::CMPhGTUrr_V4: 
    case Hexagon::CMPhGTrr_shl_V4: 
    case Hexagon::COMBINE_rr: 
    case Hexagon::HEXAGON_A4_cround_rr: 
    case Hexagon::HEXAGON_A4_round_rr: 
    case Hexagon::HEXAGON_C2_bitsclr: 
    case Hexagon::Hexagon_A2_and: 
    case Hexagon::Hexagon_A2_andp: 
    case Hexagon::Hexagon_A2_combinew: 
    case Hexagon::Hexagon_A2_or: 
    case Hexagon::Hexagon_A2_orp: 
    case Hexagon::Hexagon_A2_sub: 
    case Hexagon::Hexagon_A2_subp: 
    case Hexagon::Hexagon_A2_subri: 
    case Hexagon::Hexagon_A4_andn: 
    case Hexagon::Hexagon_A4_combineir: 
    case Hexagon::Hexagon_A4_orn: 
    case Hexagon::Hexagon_A4_rcmpeq: 
    case Hexagon::Hexagon_A4_rcmpneq: 
    case Hexagon::Hexagon_C2_and: 
    case Hexagon::Hexagon_C2_cmpeq: 
    case Hexagon::Hexagon_C2_cmpeqp: 
    case Hexagon::Hexagon_C2_cmpgt: 
    case Hexagon::Hexagon_C2_cmpgtp: 
    case Hexagon::Hexagon_C2_cmpgtu: 
    case Hexagon::Hexagon_C2_cmpgtup: 
    case Hexagon::Hexagon_C2_or: 
    case Hexagon::Hexagon_C4_cmplte: 
    case Hexagon::Hexagon_C4_cmplteu: 
    case Hexagon::Hexagon_C4_cmpneq: 
    case Hexagon::Hexagon_M2_dpmpyss_s0: 
    case Hexagon::Hexagon_M2_dpmpyuu_s0: 
    case Hexagon::Hexagon_M2_mpy_up: 
    case Hexagon::Hexagon_M2_mpyi: 
    case Hexagon::Hexagon_M2_mpyu_up: 
    case Hexagon::Hexagon_S2_asl_r_p: 
    case Hexagon::Hexagon_S2_asl_r_r: 
    case Hexagon::Hexagon_S2_asr_i_vw: 
    case Hexagon::Hexagon_S2_asr_r_p: 
    case Hexagon::Hexagon_S2_asr_r_r: 
    case Hexagon::Hexagon_S2_asr_r_svw_trun: 
    case Hexagon::Hexagon_S2_asr_r_vw: 
    case Hexagon::Hexagon_S2_clrbit_r: 
    case Hexagon::Hexagon_S2_extractu_rp: 
    case Hexagon::Hexagon_S2_extractup_rp: 
    case Hexagon::Hexagon_S2_lsr_r_p: 
    case Hexagon::Hexagon_S2_lsr_r_r: 
    case Hexagon::Hexagon_S2_setbit_r: 
    case Hexagon::Hexagon_S2_togglebit_r: 
    case Hexagon::Hexagon_S2_tstbit_r: 
    case Hexagon::Hexagon_S4_andnp: 
    case Hexagon::Hexagon_S4_ornp: 
    case Hexagon::LSR_rr: 
    case Hexagon::LSRd_rr: 
    case Hexagon::MPY: 
    case Hexagon::MPY64: 
    case Hexagon::MPYI: 
    case Hexagon::MPYU: 
    case Hexagon::MPYU64: 
    case Hexagon::MPY_trsext: 
    case Hexagon::OR_pp: 
    case Hexagon::OR_rr: 
    case Hexagon::OR_rr64: 
    case Hexagon::ORd_NOTd_V4: 
    case Hexagon::SUB64_rr: 
    case Hexagon::SUB_rr: printOperand(MI, 2, O); break;
    case Hexagon::AND_ri: 
    case Hexagon::ASL: 
    case Hexagon::ASR_ri: 
    case Hexagon::ASRd_ri: 
    case Hexagon::CMPEQri: 
    case Hexagon::CMPGTUri: 
    case Hexagon::CMPGTri: 
    case Hexagon::CMPbEQri_V4: 
    case Hexagon::CMPbGTUri_V4: 
    case Hexagon::CMPbGTri_V4: 
    case Hexagon::CMPhEQri_V4: 
    case Hexagon::CMPhGTUri_V4: 
    case Hexagon::CMPhGTri_V4: 
    case Hexagon::HEXAGON_A4_cround_ri: 
    case Hexagon::HEXAGON_A4_round_ri: 
    case Hexagon::HEXAGON_C2_bitsclri: 
    case Hexagon::Hexagon_A2_andir: 
    case Hexagon::Hexagon_A2_combineii: 
    case Hexagon::Hexagon_A2_orir: 
    case Hexagon::Hexagon_A4_combineri: 
    case Hexagon::Hexagon_A4_rcmpeqi: 
    case Hexagon::Hexagon_A4_rcmpneqi: 
    case Hexagon::Hexagon_C2_cmpeqi: 
    case Hexagon::Hexagon_C2_cmpgti: 
    case Hexagon::Hexagon_C2_cmpgtui: 
    case Hexagon::Hexagon_C4_cmpltei: 
    case Hexagon::Hexagon_C4_cmplteui: 
    case Hexagon::Hexagon_C4_cmpneqi: 
    case Hexagon::Hexagon_S2_asl_i_p: 
    case Hexagon::Hexagon_S2_asl_i_r: 
    case Hexagon::Hexagon_S2_asr_i_p: 
    case Hexagon::Hexagon_S2_asr_i_r: 
    case Hexagon::Hexagon_S2_asr_i_svw_trun: 
    case Hexagon::Hexagon_S2_clrbit_i: 
    case Hexagon::Hexagon_S2_lsr_i_p: 
    case Hexagon::Hexagon_S2_lsr_i_r: 
    case Hexagon::Hexagon_S2_setbit_i: 
    case Hexagon::Hexagon_S2_togglebit_i: 
    case Hexagon::Hexagon_S2_tstbit_i: 
    case Hexagon::LDrib_GP: 
    case Hexagon::LDrid_GP: 
    case Hexagon::LDrih_GP: 
    case Hexagon::LDriub_GP: 
    case Hexagon::LDriuh_GP: 
    case Hexagon::LDriw_GP: 
    case Hexagon::LSR_ri: 
    case Hexagon::LSRd_ri: 
    case Hexagon::MPYI_ri: 
    case Hexagon::OR_ri: printImmOperand(MI, 2, O); break;
    case Hexagon::LDrib_cNotPt: 
    case Hexagon::LDrib_cPt: 
    case Hexagon::LDrib_cdnNotPt: 
    case Hexagon::LDrib_cdnPt: 
    case Hexagon::LDrid_cNotPt: 
    case Hexagon::LDrid_cPt: 
    case Hexagon::LDrid_cdnNotPt: 
    case Hexagon::LDrid_cdnPt: 
    case Hexagon::LDrih_cNotPt: 
    case Hexagon::LDrih_cPt: 
    case Hexagon::LDrih_cdnNotPt: 
    case Hexagon::LDrih_cdnPt: 
    case Hexagon::LDriub_cNotPt: 
    case Hexagon::LDriub_cPt: 
    case Hexagon::LDriub_cdnNotPt: 
    case Hexagon::LDriub_cdnPt: 
    case Hexagon::LDriuh_cNotPt: 
    case Hexagon::LDriuh_cPt: 
    case Hexagon::LDriuh_cdnNotPt: 
    case Hexagon::LDriuh_cdnPt: 
    case Hexagon::LDriw_cNotPt: 
    case Hexagon::LDriw_cPt: 
    case Hexagon::LDriw_cdnNotPt: 
    case Hexagon::LDriw_cdnPt: printMEMriOperand(MI, 2, O); break;
    }
    O << ')'; 
    return;
    break;
  case Hexagon::CONST32_Int_Real:
  case Hexagon::LDrib:
  case Hexagon::LDrib_ae:
  case Hexagon::LDrib_indexed_cNotPt_V4:
  case Hexagon::LDrib_indexed_cPt_V4:
  case Hexagon::LDrib_indexed_cdnNotPt_V4:
  case Hexagon::LDrib_indexed_cdnPt_V4:
  case Hexagon::LDrid:
  case Hexagon::LDrih:
  case Hexagon::LDrih_ae:
  case Hexagon::LDrih_indexed_cNotPt_V4:
  case Hexagon::LDrih_indexed_cPt_V4:
  case Hexagon::LDrih_indexed_cdnNotPt_V4:
  case Hexagon::LDrih_indexed_cdnPt_V4:
  case Hexagon::LDriub:
  case Hexagon::LDriub_ae:
  case Hexagon::LDriub_indexed_cNotPt_V4:
  case Hexagon::LDriub_indexed_cPt_V4:
  case Hexagon::LDriub_indexed_cdnNotPt_V4:
  case Hexagon::LDriub_indexed_cdnPt_V4:
  case Hexagon::LDriubit:
  case Hexagon::LDriuh:
  case Hexagon::LDriuh_ae:
  case Hexagon::LDriuh_indexed_cNotPt_V4:
  case Hexagon::LDriuh_indexed_cPt_V4:
  case Hexagon::LDriuh_indexed_cdnNotPt_V4:
  case Hexagon::LDriuh_indexed_cdnPt_V4:
  case Hexagon::LDriw:
  case Hexagon::MEMb_ADDi_indexed_MEM_V4:
  case Hexagon::MEMb_ADDr_indexed_MEM_V4:
  case Hexagon::MEMb_ANDr_indexed_MEM_V4:
  case Hexagon::MEMb_SUBi_indexed_MEM_V4:
  case Hexagon::MEMb_SUBr_indexed_MEM_V4:
  case Hexagon::MEMh_ADDi_indexed_MEM_V4:
  case Hexagon::MEMh_ADDr_indexed_MEM_V4:
  case Hexagon::MEMh_ANDr_indexed_MEM_V4:
  case Hexagon::MEMh_SUBi_indexed_MEM_V4:
  case Hexagon::MEMh_SUBr_indexed_MEM_V4:
  case Hexagon::MEMw_ADDi_indexed_MEM_V4:
  case Hexagon::MEMw_ADDr_indexed_MEM_V4:
  case Hexagon::MEMw_ANDr_indexed_MEM_V4:
  case Hexagon::MEMw_SUBi_indexed_MEM_V4:
  case Hexagon::MEMw_SUBr_indexed_MEM_V4:
  case Hexagon::POST_STbri_cNotPt_nv_V4:
  case Hexagon::POST_STbri_cPt_nv_V4:
  case Hexagon::POST_STbri_cdnNotPt_nv_V4:
  case Hexagon::POST_STbri_cdnPt_nv_V4:
  case Hexagon::POST_SThri_cNotPt_nv_V4:
  case Hexagon::POST_SThri_cPt_nv_V4:
  case Hexagon::POST_SThri_cdnNotPt_nv_V4:
  case Hexagon::POST_SThri_cdnPt_nv_V4:
  case Hexagon::POST_STwri_cNotPt_nv_V4:
  case Hexagon::POST_STwri_cPt_nv_V4:
  case Hexagon::POST_STwri_cdnNotPt_nv_V4:
  case Hexagon::POST_STwri_cdnPt_nv_V4:
  case Hexagon::STrib_indexed_nv_V4:
  case Hexagon::STrib_nv_V4:
  case Hexagon::STrih_indexed_nv_V4:
  case Hexagon::STrih_nv_V4:
  case Hexagon::STriw_indexed_nv_V4:
  case Hexagon::STriw_nv_V4:
    switch (MI->getOpcode()) {
    case Hexagon::CONST32_Int_Real: 
    case Hexagon::LDrib: 
    case Hexagon::LDrib_ae: 
    case Hexagon::LDrid: 
    case Hexagon::LDrih: 
    case Hexagon::LDrih_ae: 
    case Hexagon::LDriub: 
    case Hexagon::LDriub_ae: 
    case Hexagon::LDriubit: 
    case Hexagon::LDriuh: 
    case Hexagon::LDriuh_ae: 
    case Hexagon::LDriw: O << ')'; break;
    case Hexagon::LDrib_indexed_cNotPt_V4: 
    case Hexagon::LDrib_indexed_cPt_V4: 
    case Hexagon::LDrib_indexed_cdnNotPt_V4: 
    case Hexagon::LDrib_indexed_cdnPt_V4: 
    case Hexagon::LDrih_indexed_cNotPt_V4: 
    case Hexagon::LDrih_indexed_cPt_V4: 
    case Hexagon::LDrih_indexed_cdnNotPt_V4: 
    case Hexagon::LDrih_indexed_cdnPt_V4: 
    case Hexagon::LDriub_indexed_cNotPt_V4: 
    case Hexagon::LDriub_indexed_cPt_V4: 
    case Hexagon::LDriub_indexed_cdnNotPt_V4: 
    case Hexagon::LDriub_indexed_cdnPt_V4: 
    case Hexagon::LDriuh_indexed_cNotPt_V4: 
    case Hexagon::LDriuh_indexed_cPt_V4: 
    case Hexagon::LDriuh_indexed_cdnNotPt_V4: 
    case Hexagon::LDriuh_indexed_cdnPt_V4: O << "<<#0)"; break;
    case Hexagon::MEMb_ADDi_indexed_MEM_V4: 
    case Hexagon::MEMb_SUBi_indexed_MEM_V4: 
    case Hexagon::MEMh_ADDi_indexed_MEM_V4: 
    case Hexagon::MEMh_SUBi_indexed_MEM_V4: 
    case Hexagon::MEMw_ADDi_indexed_MEM_V4: 
    case Hexagon::MEMw_SUBi_indexed_MEM_V4: printImmOperand(MI, 2, O); break;
    case Hexagon::MEMb_ADDr_indexed_MEM_V4: 
    case Hexagon::MEMb_ANDr_indexed_MEM_V4: 
    case Hexagon::MEMb_SUBr_indexed_MEM_V4: 
    case Hexagon::MEMh_ADDr_indexed_MEM_V4: 
    case Hexagon::MEMh_ANDr_indexed_MEM_V4: 
    case Hexagon::MEMh_SUBr_indexed_MEM_V4: 
    case Hexagon::MEMw_ADDr_indexed_MEM_V4: 
    case Hexagon::MEMw_ANDr_indexed_MEM_V4: 
    case Hexagon::MEMw_SUBr_indexed_MEM_V4: printOperand(MI, 2, O); break;
    case Hexagon::POST_STbri_cNotPt_nv_V4: 
    case Hexagon::POST_STbri_cPt_nv_V4: 
    case Hexagon::POST_STbri_cdnNotPt_nv_V4: 
    case Hexagon::POST_STbri_cdnPt_nv_V4: 
    case Hexagon::POST_SThri_cNotPt_nv_V4: 
    case Hexagon::POST_SThri_cPt_nv_V4: 
    case Hexagon::POST_SThri_cdnNotPt_nv_V4: 
    case Hexagon::POST_SThri_cdnPt_nv_V4: 
    case Hexagon::POST_STwri_cNotPt_nv_V4: 
    case Hexagon::POST_STwri_cPt_nv_V4: 
    case Hexagon::POST_STwri_cdnNotPt_nv_V4: 
    case Hexagon::POST_STwri_cdnPt_nv_V4: 
    case Hexagon::STrib_indexed_nv_V4: 
    case Hexagon::STrib_nv_V4: 
    case Hexagon::STrih_indexed_nv_V4: 
    case Hexagon::STrih_nv_V4: 
    case Hexagon::STriw_indexed_nv_V4: 
    case Hexagon::STriw_nv_V4: O << ".new"; break;
    }
    return;
    break;
  case Hexagon::HEXAGON_A4_round_ri_sat:
  case Hexagon::HEXAGON_A4_round_rr_sat:
  case Hexagon::Hexagon_A2_subsat:
  case Hexagon::Hexagon_S2_asl_i_r_sat:
  case Hexagon::Hexagon_S2_asl_r_r_sat:
  case Hexagon::Hexagon_S2_asr_r_r_sat:
    switch (MI->getOpcode()) {
    case Hexagon::HEXAGON_A4_round_ri_sat: printImmOperand(MI, 2, O); break;
    case Hexagon::HEXAGON_A4_round_rr_sat: 
    case Hexagon::Hexagon_A2_subsat: 
    case Hexagon::Hexagon_S2_asl_i_r_sat: 
    case Hexagon::Hexagon_S2_asl_r_r_sat: 
    case Hexagon::Hexagon_S2_asr_r_r_sat: printOperand(MI, 2, O); break;
    }
    O << "):sat"; 
    return;
    break;
  case Hexagon::HEXAGON_S2_insert:
  case Hexagon::HEXAGON_S2_insertp:
    printImmOperand(MI, 3, O); 
    O << ", #"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::Hexagon_A2_addh_h16_hh:
  case Hexagon::Hexagon_A2_addh_h16_hl:
  case Hexagon::Hexagon_A2_addh_h16_sat_hh:
  case Hexagon::Hexagon_A2_addh_h16_sat_hl:
    O << ".H, "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case Hexagon::Hexagon_A2_addh_h16_hh: O << ".H):<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_hl: O << ".L):<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_sat_hh: O << ".H):sat:<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_sat_hl: O << ".L):sat:<<16"; break;
    }
    return;
    break;
  case Hexagon::Hexagon_A2_addh_h16_lh:
  case Hexagon::Hexagon_A2_addh_h16_ll:
  case Hexagon::Hexagon_A2_addh_h16_sat_lh:
  case Hexagon::Hexagon_A2_addh_h16_sat_ll:
  case Hexagon::Hexagon_A2_addh_l16_hl:
  case Hexagon::Hexagon_A2_addh_l16_ll:
  case Hexagon::Hexagon_A2_addh_l16_sat_hl:
  case Hexagon::Hexagon_A2_addh_l16_sat_ll:
    O << ".L, "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case Hexagon::Hexagon_A2_addh_h16_lh: O << ".H):<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_ll: O << ".L):<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_sat_lh: O << ".H):sat:<<16"; break;
    case Hexagon::Hexagon_A2_addh_h16_sat_ll: O << ".L):sat:<<16"; break;
    case Hexagon::Hexagon_A2_addh_l16_hl: O << ".H)"; break;
    case Hexagon::Hexagon_A2_addh_l16_ll: O << ".L)"; break;
    case Hexagon::Hexagon_A2_addh_l16_sat_hl: O << ".H):sat"; break;
    case Hexagon::Hexagon_A2_addh_l16_sat_ll: O << ".L):sat"; break;
    }
    return;
    break;
  case Hexagon::Hexagon_A2_addsat:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "):sat"; 
    return;
    break;
  case Hexagon::Hexagon_A2_combine_hh:
  case Hexagon::Hexagon_A2_combine_hl:
  case Hexagon::Hexagon_A2_combine_lh:
  case Hexagon::Hexagon_A2_combine_ll:
  case Hexagon::Hexagon_A2_subh_h16_hh:
  case Hexagon::Hexagon_A2_subh_h16_hl:
  case Hexagon::Hexagon_A2_subh_h16_lh:
  case Hexagon::Hexagon_A2_subh_h16_ll:
  case Hexagon::Hexagon_A2_subh_h16_sat_hh:
  case Hexagon::Hexagon_A2_subh_h16_sat_hl:
  case Hexagon::Hexagon_A2_subh_h16_sat_lh:
  case Hexagon::Hexagon_A2_subh_h16_sat_ll:
  case Hexagon::Hexagon_A2_subh_l16_hl:
  case Hexagon::Hexagon_A2_subh_l16_ll:
  case Hexagon::Hexagon_A2_subh_l16_sat_hl:
  case Hexagon::Hexagon_A2_subh_l16_sat_ll:
  case Hexagon::Hexagon_M2_dpmpyss_rnd_s0:
  case Hexagon::Hexagon_M2_hmmpyh_rs1:
  case Hexagon::Hexagon_M2_hmmpyl_rs1:
  case Hexagon::Hexagon_M2_mpy_hh_s0:
  case Hexagon::Hexagon_M2_mpy_hh_s1:
  case Hexagon::Hexagon_M2_mpy_hl_s0:
  case Hexagon::Hexagon_M2_mpy_hl_s1:
  case Hexagon::Hexagon_M2_mpy_lh_s0:
  case Hexagon::Hexagon_M2_mpy_lh_s1:
  case Hexagon::Hexagon_M2_mpy_ll_s0:
  case Hexagon::Hexagon_M2_mpy_ll_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_hh_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_hh_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_hl_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_hl_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_lh_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_lh_s1:
  case Hexagon::Hexagon_M2_mpy_rnd_ll_s0:
  case Hexagon::Hexagon_M2_mpy_rnd_ll_s1:
  case Hexagon::Hexagon_M2_mpy_sat_hh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_hh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_hl_s0:
  case Hexagon::Hexagon_M2_mpy_sat_hl_s1:
  case Hexagon::Hexagon_M2_mpy_sat_lh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_lh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_ll_s0:
  case Hexagon::Hexagon_M2_mpy_sat_ll_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s1:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s0:
  case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_rnd_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_rnd_ll_s1:
  case Hexagon::Hexagon_M2_mpyu_hh_s0:
  case Hexagon::Hexagon_M2_mpyu_hh_s1:
  case Hexagon::Hexagon_M2_mpyu_hl_s0:
  case Hexagon::Hexagon_M2_mpyu_hl_s1:
  case Hexagon::Hexagon_M2_mpyu_lh_s0:
  case Hexagon::Hexagon_M2_mpyu_lh_s1:
  case Hexagon::Hexagon_M2_mpyu_ll_s0:
  case Hexagon::Hexagon_M2_mpyu_ll_s1:
  case Hexagon::Hexagon_M2_mpyud_hh_s0:
  case Hexagon::Hexagon_M2_mpyud_hh_s1:
  case Hexagon::Hexagon_M2_mpyud_hl_s0:
  case Hexagon::Hexagon_M2_mpyud_hl_s1:
  case Hexagon::Hexagon_M2_mpyud_lh_s0:
  case Hexagon::Hexagon_M2_mpyud_lh_s1:
  case Hexagon::Hexagon_M2_mpyud_ll_s0:
  case Hexagon::Hexagon_M2_mpyud_ll_s1:
  case Hexagon::LDrib_indexed_V4:
  case Hexagon::LDrid_indexed_V4:
  case Hexagon::LDrih_indexed_V4:
  case Hexagon::LDriub_ae_indexed_V4:
  case Hexagon::LDriub_indexed_V4:
  case Hexagon::LDriuh_ae_indexed_V4:
  case Hexagon::LDriuh_indexed_V4:
  case Hexagon::LDriw_indexed_V4:
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case Hexagon::Hexagon_A2_combine_hh: 
    case Hexagon::Hexagon_A2_combine_lh: 
    case Hexagon::Hexagon_A2_subh_l16_hl: 
    case Hexagon::Hexagon_M2_mpy_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_lh_s0: 
    case Hexagon::Hexagon_M2_mpyu_hh_s0: 
    case Hexagon::Hexagon_M2_mpyu_lh_s0: 
    case Hexagon::Hexagon_M2_mpyud_hh_s0: 
    case Hexagon::Hexagon_M2_mpyud_lh_s0: O << ".H)"; break;
    case Hexagon::Hexagon_A2_combine_hl: 
    case Hexagon::Hexagon_A2_combine_ll: 
    case Hexagon::Hexagon_A2_subh_l16_ll: 
    case Hexagon::Hexagon_M2_mpy_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_ll_s0: 
    case Hexagon::Hexagon_M2_mpyu_hl_s0: 
    case Hexagon::Hexagon_M2_mpyu_ll_s0: 
    case Hexagon::Hexagon_M2_mpyud_hl_s0: 
    case Hexagon::Hexagon_M2_mpyud_ll_s0: O << ".L)"; break;
    case Hexagon::Hexagon_A2_subh_h16_hh: 
    case Hexagon::Hexagon_A2_subh_h16_lh: O << ".H):<<16"; break;
    case Hexagon::Hexagon_A2_subh_h16_hl: 
    case Hexagon::Hexagon_A2_subh_h16_ll: O << ".L):<<16"; break;
    case Hexagon::Hexagon_A2_subh_h16_sat_hh: 
    case Hexagon::Hexagon_A2_subh_h16_sat_lh: O << ".H):sat:<<16"; break;
    case Hexagon::Hexagon_A2_subh_h16_sat_hl: 
    case Hexagon::Hexagon_A2_subh_h16_sat_ll: O << ".L):sat:<<16"; break;
    case Hexagon::Hexagon_A2_subh_l16_sat_hl: 
    case Hexagon::Hexagon_M2_mpy_sat_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_lh_s0: O << ".H):sat"; break;
    case Hexagon::Hexagon_A2_subh_l16_sat_ll: 
    case Hexagon::Hexagon_M2_mpy_sat_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_ll_s0: O << ".L):sat"; break;
    case Hexagon::Hexagon_M2_dpmpyss_rnd_s0: O << "):rnd"; break;
    case Hexagon::Hexagon_M2_hmmpyh_rs1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s1: O << ".H):<<1:rnd:sat"; break;
    case Hexagon::Hexagon_M2_hmmpyl_rs1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s1: O << ".L):<<1:rnd:sat"; break;
    case Hexagon::Hexagon_M2_mpy_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_lh_s1: 
    case Hexagon::Hexagon_M2_mpyu_hh_s1: 
    case Hexagon::Hexagon_M2_mpyu_lh_s1: 
    case Hexagon::Hexagon_M2_mpyud_hh_s1: 
    case Hexagon::Hexagon_M2_mpyud_lh_s1: O << ".H):<<1"; break;
    case Hexagon::Hexagon_M2_mpy_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_ll_s1: 
    case Hexagon::Hexagon_M2_mpyu_hl_s1: 
    case Hexagon::Hexagon_M2_mpyu_ll_s1: 
    case Hexagon::Hexagon_M2_mpyud_hl_s1: 
    case Hexagon::Hexagon_M2_mpyud_ll_s1: O << ".L):<<1"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_rnd_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_lh_s0: O << ".H):rnd"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_rnd_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_lh_s1: O << ".H):<<1:rnd"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_rnd_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_rnd_ll_s0: O << ".L):rnd"; break;
    case Hexagon::Hexagon_M2_mpy_rnd_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_rnd_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_rnd_ll_s1: O << ".L):<<1:rnd"; break;
    case Hexagon::Hexagon_M2_mpy_sat_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_lh_s1: O << ".H):<<1:sat"; break;
    case Hexagon::Hexagon_M2_mpy_sat_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_sat_ll_s1: O << ".L):<<1:sat"; break;
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_lh_s0: O << ".H):rnd:sat"; break;
    case Hexagon::Hexagon_M2_mpy_sat_rnd_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_sat_rnd_ll_s0: O << ".L):rnd:sat"; break;
    case Hexagon::LDrib_indexed_V4: 
    case Hexagon::LDrid_indexed_V4: 
    case Hexagon::LDrih_indexed_V4: 
    case Hexagon::LDriub_ae_indexed_V4: 
    case Hexagon::LDriub_indexed_V4: 
    case Hexagon::LDriuh_ae_indexed_V4: 
    case Hexagon::LDriuh_indexed_V4: 
    case Hexagon::LDriw_indexed_V4: O << "<<#0)"; break;
    }
    return;
    break;
  case Hexagon::Hexagon_C2_mux:
  case Hexagon::Hexagon_C2_muxri:
  case Hexagon::MUX_ir:
  case Hexagon::MUX_rr:
    switch (MI->getOpcode()) {
    case Hexagon::Hexagon_C2_mux: 
    case Hexagon::MUX_rr: printOperand(MI, 2, O); break;
    case Hexagon::Hexagon_C2_muxri: 
    case Hexagon::MUX_ir: printImmOperand(MI, 2, O); break;
    }
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::Hexagon_C2_muxii:
  case Hexagon::Hexagon_C2_muxir:
  case Hexagon::Hexagon_S2_extractu:
  case Hexagon::Hexagon_S2_extractup:
  case Hexagon::MUX_ii:
  case Hexagon::MUX_ri:
    switch (MI->getOpcode()) {
    case Hexagon::Hexagon_C2_muxii: 
    case Hexagon::Hexagon_S2_extractu: 
    case Hexagon::Hexagon_S2_extractup: 
    case Hexagon::MUX_ii: printImmOperand(MI, 2, O); break;
    case Hexagon::Hexagon_C2_muxir: 
    case Hexagon::MUX_ri: printOperand(MI, 2, O); break;
    }
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::Hexagon_C4_and_andn:
  case Hexagon::Hexagon_C4_and_orn:
  case Hexagon::Hexagon_C4_or_andn:
  case Hexagon::Hexagon_C4_or_orn:
    O << ", !"; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::Hexagon_M2_mpy_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpy_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpy_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpy_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s1:
  case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s0:
  case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s1:
  case Hexagon::Hexagon_M2_mpy_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpy_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpy_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpy_nac_ll_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s1:
  case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s0:
  case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpyd_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpyd_nac_ll_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpyu_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpyu_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpyu_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpyu_nac_ll_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_hh_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_hh_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_hl_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_hl_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_lh_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_lh_s1:
  case Hexagon::Hexagon_M2_mpyud_acc_ll_s0:
  case Hexagon::Hexagon_M2_mpyud_acc_ll_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_hh_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_hh_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_hl_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_hl_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_lh_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_lh_s1:
  case Hexagon::Hexagon_M2_mpyud_nac_ll_s0:
  case Hexagon::Hexagon_M2_mpyud_nac_ll_s1:
    printOperand(MI, 3, O); 
    switch (MI->getOpcode()) {
    case Hexagon::Hexagon_M2_mpy_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_lh_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_lh_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_hh_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_lh_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_hh_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_lh_s0: O << ".H)"; break;
    case Hexagon::Hexagon_M2_mpy_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_lh_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_lh_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_hh_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_lh_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_hh_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_lh_s1: O << ".H):<<1"; break;
    case Hexagon::Hexagon_M2_mpy_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpyd_nac_ll_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpyu_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpyu_nac_ll_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_hl_s0: 
    case Hexagon::Hexagon_M2_mpyud_acc_ll_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_hl_s0: 
    case Hexagon::Hexagon_M2_mpyud_nac_ll_s0: O << ".L)"; break;
    case Hexagon::Hexagon_M2_mpy_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpyd_nac_ll_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpyu_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpyu_nac_ll_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_hl_s1: 
    case Hexagon::Hexagon_M2_mpyud_acc_ll_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_hl_s1: 
    case Hexagon::Hexagon_M2_mpyud_nac_ll_s1: O << ".L):<<1"; break;
    case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s0: O << ".H):sat"; break;
    case Hexagon::Hexagon_M2_mpy_acc_sat_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_lh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hh_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_lh_s1: O << ".H):<<1:sat"; break;
    case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s0: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s0: O << ".L):sat"; break;
    case Hexagon::Hexagon_M2_mpy_acc_sat_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_acc_sat_ll_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_hl_s1: 
    case Hexagon::Hexagon_M2_mpy_nac_sat_ll_s1: O << ".L):<<1:sat"; break;
    }
    return;
    break;
  case Hexagon::Hexagon_S2_asr_i_r_rnd:
    printImmOperand(MI, 2, O); 
    O << "):rnd"; 
    return;
    break;
  case Hexagon::Hexagon_S4_addaddi:
    O << ", add("; 
    printOperand(MI, 2, O); 
    O << ", #"; 
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::Hexagon_S4_subaddi:
    O << ", sub(#"; 
    printImmOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::JMP_EQriNotPnt_ie_nv_V4:
  case Hexagon::JMP_EQriNotPnt_nv_V4:
  case Hexagon::JMP_EQriNotPntneg_ie_nv_V4:
  case Hexagon::JMP_EQriNotPntneg_nv_V4:
  case Hexagon::JMP_EQriNotPt_ie_nv_V4:
  case Hexagon::JMP_EQriNotPt_nv_V4:
  case Hexagon::JMP_EQriNotPtneg_ie_nv_V4:
  case Hexagon::JMP_EQriNotPtneg_nv_V4:
  case Hexagon::JMP_EQriPnt_ie_nv_V4:
  case Hexagon::JMP_EQriPnt_nv_V4:
  case Hexagon::JMP_EQriPntneg_ie_nv_V4:
  case Hexagon::JMP_EQriPntneg_nv_V4:
  case Hexagon::JMP_EQriPt_ie_nv_V4:
  case Hexagon::JMP_EQriPt_nv_V4:
  case Hexagon::JMP_EQriPtneg_ie_nv_V4:
  case Hexagon::JMP_EQriPtneg_nv_V4:
  case Hexagon::JMP_GTUriNotPnt_ie_nv_V4:
  case Hexagon::JMP_GTUriNotPnt_nv_V4:
  case Hexagon::JMP_GTUriNotPt_ie_nv_V4:
  case Hexagon::JMP_GTUriNotPt_nv_V4:
  case Hexagon::JMP_GTUriPnt_ie_nv_V4:
  case Hexagon::JMP_GTUriPnt_nv_V4:
  case Hexagon::JMP_GTUriPt_ie_nv_V4:
  case Hexagon::JMP_GTUriPt_nv_V4:
  case Hexagon::JMP_GTriNotPnt_ie_nv_V4:
  case Hexagon::JMP_GTriNotPnt_nv_V4:
  case Hexagon::JMP_GTriNotPntneg_ie_nv_V4:
  case Hexagon::JMP_GTriNotPntneg_nv_V4:
  case Hexagon::JMP_GTriNotPt_ie_nv_V4:
  case Hexagon::JMP_GTriNotPt_nv_V4:
  case Hexagon::JMP_GTriNotPtneg_ie_nv_V4:
  case Hexagon::JMP_GTriNotPtneg_nv_V4:
  case Hexagon::JMP_GTriPnt_ie_nv_V4:
  case Hexagon::JMP_GTriPnt_nv_V4:
  case Hexagon::JMP_GTriPntneg_ie_nv_V4:
  case Hexagon::JMP_GTriPntneg_nv_V4:
  case Hexagon::JMP_GTriPt_ie_nv_V4:
  case Hexagon::JMP_GTriPt_nv_V4:
  case Hexagon::JMP_GTriPtneg_ie_nv_V4:
  case Hexagon::JMP_GTriPtneg_nv_V4:
  case Hexagon::JMP_TSTBITr0NotPnt_ie_nv_V4:
  case Hexagon::JMP_TSTBITr0NotPnt_nv_V4:
  case Hexagon::JMP_TSTBITr0NotPt_ie_nv_V4:
  case Hexagon::JMP_TSTBITr0NotPt_nv_V4:
  case Hexagon::JMP_TSTBITr0Pnt_ie_nv_V4:
  case Hexagon::JMP_TSTBITr0Pnt_nv_V4:
  case Hexagon::JMP_TSTBITr0Pt_ie_nv_V4:
  case Hexagon::JMP_TSTBITr0Pt_nv_V4:
  case Hexagon::STrib_GP:
  case Hexagon::STrid_GP:
  case Hexagon::STrih_GP:
  case Hexagon::STriw_GP:
    switch (MI->getOpcode()) {
    case Hexagon::JMP_EQriNotPnt_ie_nv_V4: 
    case Hexagon::JMP_EQriNotPnt_nv_V4: 
    case Hexagon::JMP_EQriNotPntneg_ie_nv_V4: 
    case Hexagon::JMP_EQriNotPntneg_nv_V4: 
    case Hexagon::JMP_EQriPnt_ie_nv_V4: 
    case Hexagon::JMP_EQriPnt_nv_V4: 
    case Hexagon::JMP_EQriPntneg_ie_nv_V4: 
    case Hexagon::JMP_EQriPntneg_nv_V4: 
    case Hexagon::JMP_GTUriNotPnt_ie_nv_V4: 
    case Hexagon::JMP_GTUriNotPnt_nv_V4: 
    case Hexagon::JMP_GTUriPnt_ie_nv_V4: 
    case Hexagon::JMP_GTUriPnt_nv_V4: 
    case Hexagon::JMP_GTriNotPnt_ie_nv_V4: 
    case Hexagon::JMP_GTriNotPnt_nv_V4: 
    case Hexagon::JMP_GTriNotPntneg_ie_nv_V4: 
    case Hexagon::JMP_GTriNotPntneg_nv_V4: 
    case Hexagon::JMP_GTriPnt_ie_nv_V4: 
    case Hexagon::JMP_GTriPnt_nv_V4: 
    case Hexagon::JMP_GTriPntneg_ie_nv_V4: 
    case Hexagon::JMP_GTriPntneg_nv_V4: 
    case Hexagon::JMP_TSTBITr0NotPnt_ie_nv_V4: 
    case Hexagon::JMP_TSTBITr0NotPnt_nv_V4: 
    case Hexagon::JMP_TSTBITr0Pnt_ie_nv_V4: 
    case Hexagon::JMP_TSTBITr0Pnt_nv_V4: O << ")) jump:nt "; break;
    case Hexagon::JMP_EQriNotPt_ie_nv_V4: 
    case Hexagon::JMP_EQriNotPt_nv_V4: 
    case Hexagon::JMP_EQriNotPtneg_ie_nv_V4: 
    case Hexagon::JMP_EQriNotPtneg_nv_V4: 
    case Hexagon::JMP_EQriPt_ie_nv_V4: 
    case Hexagon::JMP_EQriPt_nv_V4: 
    case Hexagon::JMP_EQriPtneg_ie_nv_V4: 
    case Hexagon::JMP_EQriPtneg_nv_V4: 
    case Hexagon::JMP_GTUriNotPt_ie_nv_V4: 
    case Hexagon::JMP_GTUriNotPt_nv_V4: 
    case Hexagon::JMP_GTUriPt_ie_nv_V4: 
    case Hexagon::JMP_GTUriPt_nv_V4: 
    case Hexagon::JMP_GTriNotPt_ie_nv_V4: 
    case Hexagon::JMP_GTriNotPt_nv_V4: 
    case Hexagon::JMP_GTriNotPtneg_ie_nv_V4: 
    case Hexagon::JMP_GTriNotPtneg_nv_V4: 
    case Hexagon::JMP_GTriPt_ie_nv_V4: 
    case Hexagon::JMP_GTriPt_nv_V4: 
    case Hexagon::JMP_GTriPtneg_ie_nv_V4: 
    case Hexagon::JMP_GTriPtneg_nv_V4: 
    case Hexagon::JMP_TSTBITr0NotPt_ie_nv_V4: 
    case Hexagon::JMP_TSTBITr0NotPt_nv_V4: 
    case Hexagon::JMP_TSTBITr0Pt_ie_nv_V4: 
    case Hexagon::JMP_TSTBITr0Pt_nv_V4: O << ")) jump:t "; break;
    case Hexagon::STrib_GP: 
    case Hexagon::STrid_GP: 
    case Hexagon::STrih_GP: 
    case Hexagon::STriw_GP: O << ") = "; break;
    }
    printOperand(MI, 2, O); 
    return;
    break;
  case Hexagon::LDrib_indexed_cNotPt:
  case Hexagon::LDrib_indexed_cPt:
  case Hexagon::LDrib_indexed_cdnNotPt:
  case Hexagon::LDrib_indexed_cdnPt:
  case Hexagon::LDrib_indexed_shl_V4:
  case Hexagon::LDrid_indexed_shl_V4:
  case Hexagon::LDrih_indexed_cNotPt:
  case Hexagon::LDrih_indexed_cPt:
  case Hexagon::LDrih_indexed_cdnNotPt:
  case Hexagon::LDrih_indexed_cdnPt:
  case Hexagon::LDrih_indexed_shl_V4:
  case Hexagon::LDriub_ae_indexed_shl_V4:
  case Hexagon::LDriub_indexed_cNotPt:
  case Hexagon::LDriub_indexed_cPt:
  case Hexagon::LDriub_indexed_cdnNotPt:
  case Hexagon::LDriub_indexed_cdnPt:
  case Hexagon::LDriub_indexed_shl_V4:
  case Hexagon::LDriuh_ae_indexed_shl_V4:
  case Hexagon::LDriuh_indexed_cNotPt:
  case Hexagon::LDriuh_indexed_cPt:
  case Hexagon::LDriuh_indexed_cdnNotPt:
  case Hexagon::LDriuh_indexed_cdnPt:
  case Hexagon::LDriuh_indexed_shl_V4:
  case Hexagon::LDriw_indexed_shl_V4:
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case Hexagon::LDrib_indexed_cNotPt: 
    case Hexagon::LDrib_indexed_cPt: 
    case Hexagon::LDrib_indexed_cdnNotPt: 
    case Hexagon::LDrib_indexed_cdnPt: 
    case Hexagon::LDrih_indexed_cNotPt: 
    case Hexagon::LDrih_indexed_cPt: 
    case Hexagon::LDrih_indexed_cdnNotPt: 
    case Hexagon::LDrih_indexed_cdnPt: 
    case Hexagon::LDriub_indexed_cNotPt: 
    case Hexagon::LDriub_indexed_cPt: 
    case Hexagon::LDriub_indexed_cdnNotPt: 
    case Hexagon::LDriub_indexed_cdnPt: 
    case Hexagon::LDriuh_indexed_cNotPt: 
    case Hexagon::LDriuh_indexed_cPt: 
    case Hexagon::LDriuh_indexed_cdnNotPt: 
    case Hexagon::LDriuh_indexed_cdnPt: O << "+#"; break;
    case Hexagon::LDrib_indexed_shl_V4: 
    case Hexagon::LDrid_indexed_shl_V4: 
    case Hexagon::LDrih_indexed_shl_V4: 
    case Hexagon::LDriub_ae_indexed_shl_V4: 
    case Hexagon::LDriub_indexed_shl_V4: 
    case Hexagon::LDriuh_ae_indexed_shl_V4: 
    case Hexagon::LDriuh_indexed_shl_V4: 
    case Hexagon::LDriw_indexed_shl_V4: O << "<<#"; break;
    }
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::LDrib_indexed_shl_cNotPt_V4:
  case Hexagon::LDrib_indexed_shl_cPt_V4:
  case Hexagon::LDrib_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDrib_indexed_shl_cdnPt_V4:
  case Hexagon::LDrih_indexed_shl_cNotPt_V4:
  case Hexagon::LDrih_indexed_shl_cPt_V4:
  case Hexagon::LDrih_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDrih_indexed_shl_cdnPt_V4:
  case Hexagon::LDriub_indexed_shl_cNotPt_V4:
  case Hexagon::LDriub_indexed_shl_cPt_V4:
  case Hexagon::LDriub_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDriub_indexed_shl_cdnPt_V4:
  case Hexagon::LDriuh_indexed_shl_cNotPt_V4:
  case Hexagon::LDriuh_indexed_shl_cPt_V4:
  case Hexagon::LDriuh_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDriuh_indexed_shl_cdnPt_V4:
    O << "<<#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::LDrid_indexed_cNotPt:
  case Hexagon::LDrid_indexed_cPt:
  case Hexagon::LDrid_indexed_cdnNotPt:
  case Hexagon::LDrid_indexed_cdnPt:
  case Hexagon::LDriw_indexed_cNotPt:
  case Hexagon::LDriw_indexed_cPt:
  case Hexagon::LDriw_indexed_cdnNotPt:
  case Hexagon::LDriw_indexed_cdnPt:
  case Hexagon::POST_LDrib:
  case Hexagon::POST_LDrid:
  case Hexagon::POST_LDrih:
  case Hexagon::POST_LDriub:
  case Hexagon::POST_LDriuh:
  case Hexagon::POST_LDriw:
    switch (MI->getOpcode()) {
    case Hexagon::LDrid_indexed_cNotPt: 
    case Hexagon::LDrid_indexed_cPt: 
    case Hexagon::LDrid_indexed_cdnNotPt: 
    case Hexagon::LDrid_indexed_cdnPt: 
    case Hexagon::LDriw_indexed_cNotPt: 
    case Hexagon::LDriw_indexed_cPt: 
    case Hexagon::LDriw_indexed_cdnNotPt: 
    case Hexagon::LDriw_indexed_cdnPt: O << "+#"; break;
    case Hexagon::POST_LDrib: 
    case Hexagon::POST_LDrid: 
    case Hexagon::POST_LDrih: 
    case Hexagon::POST_LDriub: 
    case Hexagon::POST_LDriuh: 
    case Hexagon::POST_LDriw: O << "++#"; break;
    }
    printImmOperand(MI, 3, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::LDrid_indexed_cNotPt_V4:
  case Hexagon::LDrid_indexed_cPt_V4:
  case Hexagon::LDrid_indexed_cdnNotPt_V4:
  case Hexagon::LDrid_indexed_cdnPt_V4:
  case Hexagon::LDriw_indexed_cNotPt_V4:
  case Hexagon::LDriw_indexed_cPt_V4:
  case Hexagon::LDriw_indexed_cdnNotPt_V4:
  case Hexagon::LDriw_indexed_cdnPt_V4:
    O << '+'; 
    printOperand(MI, 3, O); 
    O << "<<#0)"; 
    return;
    break;
  case Hexagon::LDrid_indexed_shl_cNotPt_V4:
  case Hexagon::LDrid_indexed_shl_cPt_V4:
  case Hexagon::LDrid_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDrid_indexed_shl_cdnPt_V4:
  case Hexagon::LDriw_indexed_shl_cNotPt_V4:
  case Hexagon::LDriw_indexed_shl_cPt_V4:
  case Hexagon::LDriw_indexed_shl_cdnNotPt_V4:
  case Hexagon::LDriw_indexed_shl_cdnPt_V4:
    O << '+'; 
    printOperand(MI, 3, O); 
    O << "<<#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::MEMb_ADDr_MEM_V4:
  case Hexagon::MEMb_SUBr_MEM_V4:
  case Hexagon::MEMh_ADDr_MEM_V4:
  case Hexagon::MEMh_SUBr_MEM_V4:
  case Hexagon::MEMw_ADDr_MEM_V4:
  case Hexagon::MEMw_SUBr_MEM_V4:
  case Hexagon::POST_STbri_cNotPt:
  case Hexagon::POST_STbri_cPt:
  case Hexagon::POST_STbri_cdnNotPt_V4:
  case Hexagon::POST_STbri_cdnPt_V4:
  case Hexagon::POST_STdri_cNotPt:
  case Hexagon::POST_STdri_cPt:
  case Hexagon::POST_STdri_cdnNotPt_V4:
  case Hexagon::POST_STdri_cdnPt_V4:
  case Hexagon::POST_SThri_cNotPt:
  case Hexagon::POST_SThri_cPt:
  case Hexagon::POST_SThri_cdnNotPt_V4:
  case Hexagon::POST_SThri_cdnPt_V4:
  case Hexagon::POST_STwri_cNotPt:
  case Hexagon::POST_STwri_cPt:
  case Hexagon::POST_STwri_cdnNotPt_V4:
  case Hexagon::POST_STwri_cdnPt_V4:
  case Hexagon::STb_GP:
  case Hexagon::STh_GP:
  case Hexagon::STrib:
  case Hexagon::STrib_indexed:
  case Hexagon::STrid:
  case Hexagon::STrid_indexed:
  case Hexagon::STrih:
  case Hexagon::STrih_indexed:
  case Hexagon::STriw:
  case Hexagon::STriw_indexed:
    return;
    break;
  case Hexagon::POST_LDrib_cNotPt:
  case Hexagon::POST_LDrib_cPt:
  case Hexagon::POST_LDrib_cdnNotPt_V4:
  case Hexagon::POST_LDrib_cdnPt_V4:
  case Hexagon::POST_LDrid_cNotPt:
  case Hexagon::POST_LDrid_cPt:
  case Hexagon::POST_LDrid_cdnNotPt_V4:
  case Hexagon::POST_LDrid_cdnPt_V4:
  case Hexagon::POST_LDrih_cNotPt:
  case Hexagon::POST_LDrih_cPt:
  case Hexagon::POST_LDrih_cdnNotPt_V4:
  case Hexagon::POST_LDrih_cdnPt_V4:
  case Hexagon::POST_LDriub_cNotPt:
  case Hexagon::POST_LDriub_cPt:
  case Hexagon::POST_LDriub_cdnNotPt_V4:
  case Hexagon::POST_LDriub_cdnPt_V4:
  case Hexagon::POST_LDriuh_cNotPt:
  case Hexagon::POST_LDriuh_cPt:
  case Hexagon::POST_LDriuh_cdnNotPt_V4:
  case Hexagon::POST_LDriuh_cdnPt_V4:
  case Hexagon::POST_LDriw_cNotPt:
  case Hexagon::POST_LDriw_cPt:
  case Hexagon::POST_LDriw_cdnNotPt_V4:
  case Hexagon::POST_LDriw_cdnPt_V4:
    printOperand(MI, 3, O); 
    O << "++#"; 
    printImmOperand(MI, 4, O); 
    O << ')'; 
    return;
    break;
  case Hexagon::STrib_GP_nv_V4:
  case Hexagon::STrib_cNotPt_nv_V4:
  case Hexagon::STrib_cPt_nv_V4:
  case Hexagon::STrib_cdnNotPt_nv_V4:
  case Hexagon::STrib_cdnPt_nv_V4:
  case Hexagon::STrih_GP_nv_V4:
  case Hexagon::STrih_cNotPt_nv_V4:
  case Hexagon::STrih_cPt_nv_V4:
  case Hexagon::STrih_cdnNotPt_nv_V4:
  case Hexagon::STrih_cdnPt_nv_V4:
  case Hexagon::STriw_GP_nv_V4:
  case Hexagon::STriw_cNotPt_nv_V4:
  case Hexagon::STriw_cPt_nv_V4:
  case Hexagon::STriw_cdnNotPt_nv_V4:
  case Hexagon::STriw_cdnPt_nv_V4:
    O << ") = "; 
    switch (MI->getOpcode()) {
    case Hexagon::STrib_GP_nv_V4: 
    case Hexagon::STrih_GP_nv_V4: 
    case Hexagon::STriw_GP_nv_V4: printOperand(MI, 2, O); break;
    case Hexagon::STrib_cNotPt_nv_V4: 
    case Hexagon::STrib_cPt_nv_V4: 
    case Hexagon::STrib_cdnNotPt_nv_V4: 
    case Hexagon::STrib_cdnPt_nv_V4: 
    case Hexagon::STrih_cNotPt_nv_V4: 
    case Hexagon::STrih_cPt_nv_V4: 
    case Hexagon::STrih_cdnNotPt_nv_V4: 
    case Hexagon::STrih_cdnPt_nv_V4: 
    case Hexagon::STriw_cNotPt_nv_V4: 
    case Hexagon::STriw_cPt_nv_V4: 
    case Hexagon::STriw_cdnNotPt_nv_V4: 
    case Hexagon::STriw_cdnPt_nv_V4: printOperand(MI, 3, O); break;
    }
    O << ".new"; 
    return;
    break;
  case Hexagon::STrib_cNotPt:
  case Hexagon::STrib_cPt:
  case Hexagon::STrib_cdnNotPt_V4:
  case Hexagon::STrib_cdnPt_V4:
  case Hexagon::STrid_cNotPt:
  case Hexagon::STrid_cPt:
  case Hexagon::STrid_cdnNotPt_V4:
  case Hexagon::STrid_cdnPt_V4:
  case Hexagon::STrih_cNotPt:
  case Hexagon::STrih_cPt:
  case Hexagon::STrih_cdnNotPt_V4:
  case Hexagon::STrih_cdnPt_V4:
  case Hexagon::STriw_cNotPt:
  case Hexagon::STriw_cPt:
  case Hexagon::STriw_cdnNotPt_V4:
  case Hexagon::STriw_cdnPt_V4:
    O << ") = "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case Hexagon::STrib_imm_cNotPt_V4:
  case Hexagon::STrib_imm_cPt_V4:
  case Hexagon::STrib_imm_cdnNotPt_V4:
  case Hexagon::STrib_imm_cdnPt_V4:
  case Hexagon::STrih_imm_cNotPt_V4:
  case Hexagon::STrih_imm_cPt_V4:
  case Hexagon::STrih_imm_cdnNotPt_V4:
  case Hexagon::STrih_imm_cdnPt_V4:
  case Hexagon::STriw_imm_cNotPt_V4:
  case Hexagon::STriw_imm_cPt_V4:
  case Hexagon::STriw_imm_cdnNotPt_V4:
  case Hexagon::STriw_imm_cdnPt_V4:
    O << "+#"; 
    printImmOperand(MI, 2, O); 
    O << ") = #"; 
    printImmOperand(MI, 3, O); 
    return;
    break;
  case Hexagon::STrib_indexed_cNotPt:
  case Hexagon::STrib_indexed_cPt:
  case Hexagon::STrib_indexed_cdnNotPt_V4:
  case Hexagon::STrib_indexed_cdnPt_V4:
  case Hexagon::STrib_indexed_shl_V4:
  case Hexagon::STrid_indexed_cNotPt:
  case Hexagon::STrid_indexed_cPt:
  case Hexagon::STrid_indexed_cdnNotPt_V4:
  case Hexagon::STrid_indexed_cdnPt_V4:
  case Hexagon::STrid_indexed_shl_V4:
  case Hexagon::STrih_indexed_cNotPt:
  case Hexagon::STrih_indexed_cPt:
  case Hexagon::STrih_indexed_cdnNotPt_V4:
  case Hexagon::STrih_indexed_cdnPt_V4:
  case Hexagon::STrih_indexed_shl_V4:
  case Hexagon::STriw_indexed_cNotPt:
  case Hexagon::STriw_indexed_cPt:
  case Hexagon::STriw_indexed_cdnNotPt_V4:
  case Hexagon::STriw_indexed_cdnPt_V4:
  case Hexagon::STriw_indexed_shl_V4:
    switch (MI->getOpcode()) {
    case Hexagon::STrib_indexed_cNotPt: 
    case Hexagon::STrib_indexed_cPt: 
    case Hexagon::STrib_indexed_cdnNotPt_V4: 
    case Hexagon::STrib_indexed_cdnPt_V4: 
    case Hexagon::STrid_indexed_cNotPt: 
    case Hexagon::STrid_indexed_cPt: 
    case Hexagon::STrid_indexed_cdnNotPt_V4: 
    case Hexagon::STrid_indexed_cdnPt_V4: 
    case Hexagon::STrih_indexed_cNotPt: 
    case Hexagon::STrih_indexed_cPt: 
    case Hexagon::STrih_indexed_cdnNotPt_V4: 
    case Hexagon::STrih_indexed_cdnPt_V4: 
    case Hexagon::STriw_indexed_cNotPt: 
    case Hexagon::STriw_indexed_cPt: 
    case Hexagon::STriw_indexed_cdnNotPt_V4: 
    case Hexagon::STriw_indexed_cdnPt_V4: O << "+#"; break;
    case Hexagon::STrib_indexed_shl_V4: 
    case Hexagon::STrid_indexed_shl_V4: 
    case Hexagon::STrih_indexed_shl_V4: 
    case Hexagon::STriw_indexed_shl_V4: O << "<<#"; break;
    }
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case Hexagon::STrib_indexed_cNotPt_nv_V4:
  case Hexagon::STrib_indexed_cPt_nv_V4:
  case Hexagon::STrib_indexed_cdnNotPt_nv_V4:
  case Hexagon::STrib_indexed_cdnPt_nv_V4:
  case Hexagon::STrib_indexed_shl_nv_V4:
  case Hexagon::STrih_indexed_cNotPt_nv_V4:
  case Hexagon::STrih_indexed_cPt_nv_V4:
  case Hexagon::STrih_indexed_cdnNotPt_nv_V4:
  case Hexagon::STrih_indexed_cdnPt_nv_V4:
  case Hexagon::STrih_indexed_shl_nv_V4:
  case Hexagon::STriw_indexed_cNotPt_nv_V4:
  case Hexagon::STriw_indexed_cPt_nv_V4:
  case Hexagon::STriw_indexed_cdnNotPt_nv_V4:
  case Hexagon::STriw_indexed_cdnPt_nv_V4:
  case Hexagon::STriw_indexed_shl_nv_V4:
    switch (MI->getOpcode()) {
    case Hexagon::STrib_indexed_cNotPt_nv_V4: 
    case Hexagon::STrib_indexed_cPt_nv_V4: 
    case Hexagon::STrib_indexed_cdnNotPt_nv_V4: 
    case Hexagon::STrib_indexed_cdnPt_nv_V4: 
    case Hexagon::STrih_indexed_cNotPt_nv_V4: 
    case Hexagon::STrih_indexed_cPt_nv_V4: 
    case Hexagon::STrih_indexed_cdnNotPt_nv_V4: 
    case Hexagon::STrih_indexed_cdnPt_nv_V4: 
    case Hexagon::STriw_indexed_cNotPt_nv_V4: 
    case Hexagon::STriw_indexed_cPt_nv_V4: 
    case Hexagon::STriw_indexed_cdnNotPt_nv_V4: 
    case Hexagon::STriw_indexed_cdnPt_nv_V4: O << "+#"; break;
    case Hexagon::STrib_indexed_shl_nv_V4: 
    case Hexagon::STrih_indexed_shl_nv_V4: 
    case Hexagon::STriw_indexed_shl_nv_V4: O << "<<#"; break;
    }
    printImmOperand(MI, 2, O); 
    O << ") = "; 
    printOperand(MI, 3, O); 
    O << ".new"; 
    return;
    break;
  case Hexagon::STrib_indexed_shl_cNotPt_V4:
  case Hexagon::STrib_indexed_shl_cPt_V4:
  case Hexagon::STrib_indexed_shl_cdnNotPt_V4:
  case Hexagon::STrib_indexed_shl_cdnPt_V4:
  case Hexagon::STrid_indexed_shl_cNotPt_V4:
  case Hexagon::STrid_indexed_shl_cPt_V4:
  case Hexagon::STrid_indexed_shl_cdnNotPt_V4:
  case Hexagon::STrid_indexed_shl_cdnPt_V4:
  case Hexagon::STrih_indexed_shl_cNotPt_V4:
  case Hexagon::STrih_indexed_shl_cPt_V4:
  case Hexagon::STrih_indexed_shl_cdnNotPt_V4:
  case Hexagon::STrih_indexed_shl_cdnPt_V4:
  case Hexagon::STriw_indexed_shl_cNotPt_V4:
  case Hexagon::STriw_indexed_shl_cPt_V4:
  case Hexagon::STriw_indexed_shl_cdnNotPt_V4:
  case Hexagon::STriw_indexed_shl_cdnPt_V4:
    O << '+'; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case Hexagon::STrib_indexed_shl_cNotPt_nv_V4:
  case Hexagon::STrib_indexed_shl_cPt_nv_V4:
  case Hexagon::STrib_indexed_shl_cdnNotPt_nv_V4:
  case Hexagon::STrib_indexed_shl_cdnPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cNotPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cdnNotPt_nv_V4:
  case Hexagon::STrih_indexed_shl_cdnPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cNotPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cdnNotPt_nv_V4:
  case Hexagon::STriw_indexed_shl_cdnPt_nv_V4:
    O << '+'; 
    printOperand(MI, 2, O); 
    O << "<<#"; 
    printImmOperand(MI, 3, O); 
    O << ") = "; 
    printOperand(MI, 4, O); 
    O << ".new"; 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *HexagonInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 62 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'r', '1', '1', ':', '1', '0', 0,
  /* 7 */ 'r', '1', '0', 0,
  /* 11 */ 'r', '2', '1', ':', '2', '0', 0,
  /* 18 */ 'r', '2', '0', 0,
  /* 22 */ 'r', '3', '1', ':', '3', '0', 0,
  /* 29 */ 'r', '3', '0', 0,
  /* 33 */ 'r', '1', ':', '0', 0,
  /* 38 */ 's', 'a', '0', 0,
  /* 42 */ 'l', 'c', '0', 0,
  /* 46 */ 'p', '0', 0,
  /* 49 */ 'r', '0', 0,
  /* 52 */ 'r', '1', '1', 0,
  /* 56 */ 'r', '2', '1', 0,
  /* 60 */ 'r', '3', '1', 0,
  /* 64 */ 's', 'a', '1', 0,
  /* 68 */ 'l', 'c', '1', 0,
  /* 72 */ 'p', '1', 0,
  /* 75 */ 'r', '1', 0,
  /* 78 */ 'r', '1', '3', ':', '1', '2', 0,
  /* 85 */ 'r', '1', '2', 0,
  /* 89 */ 'r', '2', '3', ':', '2', '2', 0,
  /* 96 */ 'r', '2', '2', 0,
  /* 100 */ 'r', '3', ':', '2', 0,
  /* 105 */ 'p', '2', 0,
  /* 108 */ 'r', '2', 0,
  /* 111 */ 'r', '1', '3', 0,
  /* 115 */ 'r', '2', '3', 0,
  /* 119 */ 'p', '3', 0,
  /* 122 */ 'r', '3', 0,
  /* 125 */ 'r', '1', '5', ':', '1', '4', 0,
  /* 132 */ 'r', '1', '4', 0,
  /* 136 */ 'r', '2', '5', ':', '2', '4', 0,
  /* 143 */ 'r', '2', '4', 0,
  /* 147 */ 'r', '5', ':', '4', 0,
  /* 152 */ 'r', '4', 0,
  /* 155 */ 'r', '1', '5', 0,
  /* 159 */ 'r', '2', '5', 0,
  /* 163 */ 'r', '5', 0,
  /* 166 */ 'r', '1', '7', ':', '1', '6', 0,
  /* 173 */ 'r', '1', '6', 0,
  /* 177 */ 'r', '2', '7', ':', '2', '6', 0,
  /* 184 */ 'r', '2', '6', 0,
  /* 188 */ 'r', '7', ':', '6', 0,
  /* 193 */ 'r', '6', 0,
  /* 196 */ 'r', '1', '7', 0,
  /* 200 */ 'r', '2', '7', 0,
  /* 204 */ 'r', '7', 0,
  /* 207 */ 'r', '1', '9', ':', '1', '8', 0,
  /* 214 */ 'r', '1', '8', 0,
  /* 218 */ 'r', '2', '9', ':', '2', '8', 0,
  /* 225 */ 'r', '2', '8', 0,
  /* 229 */ 'r', '9', ':', '8', 0,
  /* 234 */ 'r', '8', 0,
  /* 237 */ 'r', '1', '9', 0,
  /* 241 */ 'r', '2', '9', 0,
  /* 245 */ 'r', '9', 0,
  /* 248 */ 'p', 'c', 0,
  /* 251 */ 'f', 'p', 0,
  /* 254 */ 'g', 'p', 0,
  /* 257 */ 's', 'p', 0,
  /* 260 */ 'l', 'r', 0,
  };

  static const unsigned RegAsmOffset[] = {
    33, 100, 147, 188, 229, 0, 78, 125, 166, 207, 11, 89, 136, 177, 
    218, 22, 251, 254, 42, 68, 260, 46, 72, 105, 119, 248, 49, 75, 
    108, 122, 152, 163, 193, 204, 234, 245, 7, 52, 85, 111, 132, 155, 
    173, 196, 214, 237, 18, 56, 96, 115, 143, 159, 184, 200, 225, 241, 
    29, 60, 38, 64, 257, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool HexagonInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
